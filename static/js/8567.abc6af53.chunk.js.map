{"version":3,"file":"static/js/8567.abc6af53.chunk.js","mappings":"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","sources":["views/email_templates/AddEmailTemplate.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nconst AddEmailTemplate = () => {\n\n    const navigate = useNavigate();\n\n\n    const customConfig = {\n        toolbar: {\n            items: [\n                'heading', '|',\n                'bold', 'italic', 'link', 'bulletedList', 'numberedList', '|',\n                'indent', 'outdent', '|',\n                'blockQuote', '|',\n                'undo', 'redo'\n            ]\n        },\n        placeholder: 'Start typing here...'\n    };\n\n\n    const [lineOfBusiness, setLineOfBusiness] = useState([]);\n    const [policyType, setPolicyType] = useState([]);\n\n    const [subject, setSubject] = useState('');\n    const [selectedLineOfBusiness, setSelectedLineOfBusiness] = useState('');\n    const [selectedBusinessType, setSelectedBusinessType] = useState('');\n    const [selectedPlanType, setSelectedPlanType] = useState('');\n    const [email, setEmail] = useState('');\n    const [emailtypelist, setEmailTypeList] = useState([]);\n    const [emailType, setEmailType] = useState('');\n\n\n    useEffect(() => {\n        getlistLineOfBusiness();\n        getpolicytypelist();\n        handleType();\n    }, []);\n\n    const getlistLineOfBusiness = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_line_of_business_list`, requestOptions)\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                const line_of_businessdt = data?.data\n                const line_of_business_list = line_of_businessdt?.map((item) => {\n                    return {\n                        label: item?.line_of_business_name,\n                        value: item?._id,\n                    }\n                }\n                )\n                setLineOfBusiness(line_of_business_list)\n            })\n    }\n\n    const getpolicytypelist = async () => {\n\n\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_all_policiy_type`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setPolicyType(data.data);\n            });\n    }\n\n    const handlelob = (e) => {\n        const selectedList = e.target.value;\n        console.log('selectedList', selectedList);\n        setSelectedLineOfBusiness(selectedList);\n        setSelectedPlanType('');\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            console.log('subject', subject);\n            console.log('selectedLineOfBusiness', selectedLineOfBusiness);\n            console.log('selectedBusinessType', selectedBusinessType);\n            console.log('selectedPlanType', selectedPlanType);\n            console.log('email', email);\n\n\n\n            const formData = new FormData();\n            formData.append('subject', subject);\n            formData.append('LOB', selectedLineOfBusiness);\n            formData.append('business_type', selectedBusinessType);\n            formData.append('plan_type', selectedPlanType);\n            formData.append('body', email);\n            formData.append('email_type', emailType);\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + localStorage.getItem('token') || ''\n                },\n                body: JSON.stringify({ subject, LOB: selectedLineOfBusiness, business_type: selectedBusinessType, plan_type: selectedPlanType, body: email, email_type: emailType })\n            };\n\n            await fetch('https://insuranceapi-3o5t.onrender.com/api/addEmailTemplate', requestOptions)\n                .then((response) => response.json())\n                .then(data => {\n                    console.log('data', data);\n                    if (data.status == '201') {\n                        swal('', data.message, 'success');\n                        navigate('/viewemailtemplates');\n                    } else {\n                        swal('', data.message, 'error');\n                    }\n                });\n\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n\n    const handleType = () => {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/getEmailTypes`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    setEmailTypeList(data.data);\n                });\n\n\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n\n\n\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"card\" style={{ marginTop: '20px' }}>\n                            <div className=\"card-header\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-6\">\n                                        <h4 className=\"card-title\">Add Email Template</h4>\n                                    </div>\n                                    <div className=\"col-md-6\">\n                                        <a href=\"/ViewEmailTemplates\" className=\"btn btn-primary\" style={{ float: 'right' }}>Back</a>\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\">\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label><strong>Subject</strong></label>\n                                                        <input type=\"text\" className=\"form-control\" name=\"staff_name\" placeholder=\"Enter Name\" autoComplete=\"off\" required onChange={(e) => setSubject(e.target.value)} />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label><strong>Line Of Business</strong></label>\n                                                        <select className=\"form-control\" name=\"line_of_business\" required onChange={(e) => handlelob(e)}>\n                                                            <option value=\"\" hidden>Select Line Of Business</option>\n                                                            {lineOfBusiness.map((item, indx) => (\n                                                                <option key={indx} value={item.value}>{item.label}</option>\n                                                            ))}\n                                                        </select>\n\n                                                    </div>\n                                                </div>\n\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label><strong>Business Type </strong></label>\n                                                        <select className=\"form-control\" name=\"business_type\" required onChange={(e) => setSelectedBusinessType(e.target.value)}>\n                                                            <option value=\"\" hidden>Select Business Type</option>\n                                                            <option value=\"New\">New Business</option>\n                                                            <option value=\"Renewal\">Renewal Business</option>\n                                                        </select>\n                                                    </div>\n                                                </div>\n                                                {selectedLineOfBusiness == '6418643bf42eaf5ba1c9e0ef' || selectedLineOfBusiness == '641bf0bbcbfce023c8c76739' ?\n                                                    <div className=\"col-md-6\">\n                                                        <div className=\"form-group mb-3\">\n                                                            <label><strong>Plan Type</strong></label>\n                                                            <select\n                                                                className='form-control'\n                                                                onChange={(e) => setSelectedPlanType(e.target.value)}\n                                                            >\n                                                                <option value=\"\" hidden>Select Plan Type</option>\n                                                                {policyType?.map((item, index) => (\n                                                                    <option key={index} value={item._id}>{item.policy_type_name}</option>\n                                                                ))}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    : ''\n                                                }\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label><strong>Type </strong></label>\n                                                        <select className=\"form-control\" name=\"type\" required onChange={(e) => setEmailType(e.target.value)}>\n                                                            <option value=\"\" hidden>Select Type</option>\n                                                            {emailtypelist?.map((item, index) => (\n                                                                <option key={index} value={item._id}>{item.name}</option>\n                                                            ))}\n                                                        </select>\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-12\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label><strong>Email</strong></label>\n                                                        <CKEditor\n                                                            editor={ClassicEditor}\n                                                            data=\"<p>Dear Valued Customer,</p>\"\n                                                            config={customConfig}\n                                                            onReady={editor => {\n                                                                // You can store the \"editor\" and use when it is needed.\n                                                                console.log('Editor is ready to use!', editor);\n                                                            }}\n                                                            onChange={(event, editor) => {\n                                                                const data = editor.getData();\n                                                                setEmail(data);\n                                                            }}\n                                                            onBlur={(event, editor) => {\n                                                                console.log('Blur.', editor);\n                                                            }}\n                                                            onFocus={(event, editor) => {\n                                                                console.log('Focus.', editor);\n                                                            }}\n                                                        />\n                                                    </div>\n                                                </div>\n\n                                            </div>\n\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\" style={{ textAlign: 'right' }}>\n                                                    <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit}>Save</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default AddEmailTemplate"],"names":["AddEmailTemplate","navigate","useNavigate","lineOfBusiness","setLineOfBusiness","useState","policyType","setPolicyType","subject","setSubject","selectedLineOfBusiness","setSelectedLineOfBusiness","selectedBusinessType","setSelectedBusinessType","selectedPlanType","setSelectedPlanType","email","setEmail","emailtypelist","setEmailTypeList","emailType","setEmailType","useEffect","getlistLineOfBusiness","getpolicytypelist","handleType","fetch","method","headers","then","response","json","data","console","log","line_of_businessdt","line_of_business_list","map","item","label","line_of_business_name","value","_id","async","error","_jsx","_Fragment","children","className","style","marginTop","_jsxs","href","float","action","type","name","placeholder","autoComplete","required","onChange","e","target","selectedList","handlelob","hidden","indx","index","policy_type_name","CKEditor","editor","ClassicEditor","config","toolbar","items","onReady","event","getData","onBlur","onFocus","textAlign","onClick","preventDefault","formData","FormData","append","requestOptions","localStorage","getItem","body","JSON","stringify","LOB","business_type","plan_type","email_type","status","swal","message"],"sourceRoot":""}