{"version":3,"file":"static/js/218.80bdb118.chunk.js","mappings":"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xB,EAGF5B,QAAQC,IAAI,YAAa4B,GAYzB,MAAMpE,GAAO,CACX,CACEM,sBAAuB,QACvBgN,YAAa,CACX,CACE,MAAS,UACT,MAAShJ,GAEX,CACE,MAAS,WACT,MAASE,GAEX,CACE,MAAS,QACT,MAASE,GAEX,CACE,MAAS,QACT,MAASE,GAEX,CACE,MAAS,MACT,MAASE,GAEX,CACE,MAAS,OACT,MAASE,GAEX,CACE,MAAS,OACT,MAASE,GAEX,CACE,MAAS,SACT,MAASE,GAEX,CACE,MAAS,YACT,MAASE,GAEX,CACE,MAAS,UACT,MAASE,GAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,MAIf,CACEtF,sBAAuB,SACvB,YAAe,CACb,CACE,MAAS,UACT,MAASwF,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,MACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,SACT,MAASE,IAEX,CACE,MAAS,YACT,MAASE,IAEX,CACE,MAAS,UACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,MAIf,CACE9G,sBAAuB,OACvB,YAAe,CACb,CACE,MAAS,UACT,MAASgH,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,MACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,SACT,MAASE,IAEX,CACE,MAAS,YACT,MAASE,IAEX,CACE,MAAS,UACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,MAIf,CACEtI,sBAAuB,UACvB,YAAe,CACb,CACE,MAAS,UACT,MAASwI,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,MACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,SACT,MAASE,IAEX,CACE,MAAS,YACT,MAASE,IAEX,CACE,MAAS,UACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,MAIf,CACE9J,sBAAuB,QACvB,YAAe,CACb,CACE,MAAS,UACT,MAASgK,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,MACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,SACT,MAASE,IAEX,CACE,MAAS,YACT,MAASE,IAEX,CACE,MAAS,UACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,MAKf,CACEtL,sBAAuB,kBACvB,YAAe,CACb,CACE,MAAS,UACT,MAASwL,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,QACT,MAASE,IAEX,CACE,MAAS,MACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,OACT,MAASE,IAEX,CACE,MAAS,SACT,MAASE,IAEX,CACE,MAAS,YACT,MAASE,IAEX,CACE,MAAS,UACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,IAEX,CACE,MAAS,WACT,MAASE,OAOjB,IAAIG,GAAY,CACdrN,OAAQ,GACRC,SAAU,IAmBZ,OAhBAoN,GAAY,CACVrN,OAAQE,MAAMoN,KAAK,IAAIC,IAAIzN,GAAK0N,SAAQvO,GAAQA,EAAKmO,YAAYpO,KAAIc,GAAQA,EAAK2N,YAClFxN,SAAUH,GAAKd,KAAIC,IAAI,CACrBoB,MAAOpB,EAAKmB,sBACZG,gBAAgD,UAA/BtB,EAAKmB,sBAAoC,UACzB,WAA/BnB,EAAKmB,sBAAqC,UACT,SAA/BnB,EAAKmB,sBAAmC,UACP,YAA/BnB,EAAKmB,sBAAsC,UACV,UAA/BnB,EAAKmB,sBAAoC,UACvC,UACVN,KAAMb,EAAKmO,YAAYpO,KAAIc,GAAQA,EAAK4N,cAO1CC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CAAAD,UACRE,EAAAA,EAAAA,MAACD,EAAAA,EAAUE,KAAI,CAACC,SAAS,IAAGJ,SAAA,EAC1BF,EAAAA,EAAAA,KAACG,EAAAA,EAAUI,OAAM,CAAAL,UACfF,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,wBAAuBN,UACpCF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,yBAGZF,EAAAA,EAAAA,KAACG,EAAAA,EAAUM,KAAI,CAACC,MAAO,CAAEC,QAAS,OAAQT,UACxCF,EAAAA,EAAAA,KAACY,EAAAA,GAAK,CAACJ,UAAU,OAAMN,UACrBE,EAAAA,EAAAA,MAACS,EAAAA,GAAI,CAAAX,SAAA,EACHF,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACC,GAAI,EAAEb,UACVE,EAAAA,EAAAA,MAACQ,EAAAA,GAAK,CAACJ,UAAU,OAAMN,SAAA,EACrBF,EAAAA,EAAAA,KAACgB,EAAAA,GAAW,CAAAd,SAAC,eACbF,EAAAA,EAAAA,KAACiB,EAAAA,GAAS,CAAAf,UACRF,EAAAA,EAAAA,KAACkB,EAAAA,GAAS,CAAC/O,KAAMuN,aAoIvBM,EAAAA,EAAAA,KAACmB,EAAAA,EAAG,CAACX,UAAU,GAAGO,GAAI,EAAEb,UACtBE,EAAAA,EAAAA,MAACQ,EAAAA,GAAK,CAACJ,UAAU,OAAMN,SAAA,EACrBF,EAAAA,EAAAA,KAACgB,EAAAA,GAAW,CAAAd,SAAC,iBACbF,EAAAA,EAAAA,KAACiB,EAAAA,GAAS,CAAAf,UACRF,EAAAA,EAAAA,KAACoB,EAAAA,GAAS,CACRjP,KAAM,CACJE,OAAQ,CAAC,QAAS,SAAU,OAAQ,UAAW,QAAS,aACxDC,SAAU,CACR,CACEH,KAAM,CAAC2B,EAAYE,EAAaE,EAAWI,EAAcF,EAAYI,GACrE5B,gBAAiB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WACzEC,qBAAsB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,oCAe5G,C","sources":["views/policy_issuer/dashboard/PISalesGraph.js"],"sourcesContent":["import { CCard, CRow, CCol, CCardBody, CCardHeader } from '@coreui/react';\nimport { CChartBar, CChartLine, CChartPie } from '@coreui/react-chartjs';\nimport React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom'\nimport { Container, Col, Row, Modal, Button, Accordion } from 'react-bootstrap';\n\n\n\nPISalesGraph.propTypes =\n{\n  filterOptions: PropTypes.shape({\n    location: PropTypes.string,\n    lob: PropTypes.string,\n    businessType: PropTypes.string,\n    agent: PropTypes.string,\n    dateRange: PropTypes\n  })\n};\n\nPISalesGraph.propTypes = {\n  defaultOptions: PropTypes.shape({\n    defaultlocation: PropTypes.string,\n    defaultlob: PropTypes.string,\n    defaultbusinessType: PropTypes.string,\n    defaultagent: PropTypes.string,\n    defaultdateRange: PropTypes,\n    startdate: PropTypes,\n    enddate: PropTypes,\n    userType: PropTypes\n  })\n};\n\nPISalesGraph.propTypes =\n{\n  lobdata: PropTypes.array,\n\n};\n\nfunction PISalesGraph({ filterOptions, defaultOptions, lobdata }) {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    } else {\n      getdata()\n    }\n  }, [lobdata]);\n\n  // useEffect(() => {\n  //    getdata()\n  // }, [lobdata])\n\n  const random1 = () => Math.round(Math.random() * 100)\n\n  const [graphvalues, setGraphvalues] = useState()\n\n  const getdata = async () => {\n\n    let newlob = lobdata.map((item) => item.value)\n\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify({ lob: newlob }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    await fetch('https://insuranceapi-3o5t.onrender.com/api/get_new_leads_count', requestOptions)\n      .then((response) => response.json())\n      .then((data) => {\n        setGraphvalues(data)\n\n      }\n      );\n\n\n  }\n\n  // let chartData = {\n  //   labels: [],\n  //   datasets: [],\n  // };\n\n  // if (graphvalues && Array.isArray(graphvalues.data)) {\n  //   chartData = {\n  //     labels: Array.from(new Set(graphvalues.data.flatMap(item => item.monthlydata.map(data => data.month)))),\n  //     datasets: graphvalues.data.map(item => ({\n  //       label: item.line_of_business_name,\n  //       backgroundColor: item.line_of_business_name=='Motor'? '#0D2F92' : '#f87979',\n  //       data: item.monthlydata.map(data => data.count),\n  //     })),\n  //   };\n  // }\n\n\n  let piechartData = {\n    labels: [],\n    datasets: [],\n  };\n\n  if (graphvalues && Array.isArray(graphvalues.data)) {\n    piechartData = {\n      labels: graphvalues.data.map(item => item.line_of_business_name),\n      datasets: graphvalues.data.map(item => ({\n        label: item.line_of_business_name,\n        data: [item.total],\n        backgroundColor: item.line_of_business_name === 'Motor' ? '#0D2F92' : '#f87979',\n        hoverBackgroundColor: item.line_of_business_name === 'Motor' ? '#0D2F92' : '#f87979',\n      })),\n    };\n  }\n\n  /**** */\n\n\n  const [lob, setLob] = useState([]);\n\n  useEffect(() => {\n    lobList();\n  }, []);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    }\n    else {\n      getTotalCount();\n      getTotaldata()\n\n    }\n  }, [filterOptions]);\n\n  const lobList = () => {\n    const userdata = JSON.parse(localStorage.getItem('user'));\n    const lob = userdata.line_of_business;\n    if (lob.length > 0) {\n      const lobdt = lob;\n      const lob_len = lobdt.length;\n      const lob_list = [];\n      for (let i = 0; i < lob_len; i++) {\n        const lob_obj = { label: lobdt[i].lob_name, value: lobdt[i].lob_id };\n        lob_list.push(lob_obj);\n      }\n      setLob(lob_list);\n    }\n    else {\n      const requestOptions =\n      {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      fetch(`https://insuranceapi-3o5t.onrender.com/api/get_line_of_business_list`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          const lobdt = data.data;\n          const lob_len = lobdt.length;\n          const lob_list = [];\n          for (let i = 0; i < lob_len; i++) {\n            const lob_obj = { label: lobdt[i].line_of_business_name, value: lobdt[i]._id };\n            lob_list.push(lob_obj);\n          }\n          setLob(lob_list);\n        });\n    }\n  }\n\n  const [motorcount, setMotorcount] = useState(0);\n  const [travelcount, setTravelcount] = useState(0);\n  const [homecount, setHomecount] = useState(0);\n  const [yachtcount, setYachtcount] = useState(0);\n  const [medicalcount, setMedicalcount] = useState(0);\n  const [othercount, setOthercount] = useState(0);\n\n\n  const getTotalCount = async () => {\n\n    console.log(\"inside filterOptions\", filterOptions);\n    console.log(\"inside defaultOptions\", defaultOptions);\n\n    const userdata = JSON.parse(localStorage.getItem('user'));\n    let newlocation = filterOptions.location;\n    let newlob = filterOptions.lob;\n    let newbusinessType = filterOptions.businessType;\n    let newagent = filterOptions.agent;\n    let dateRange = filterOptions.dateRange;\n    let startdate = defaultOptions.startdate;\n    let enddate = defaultOptions.enddate;\n    let assign_staff = userdata.assign_staff;\n    let usertype = defaultOptions.userType\n\n    if (newlocation == null || newlocation == undefined || !Array.isArray(newlocation) || newlocation.length === 0) {\n      newlocation = defaultOptions.defaultlocation.map((item) => item.value);\n      // newlocation = [];\n    }\n    else {\n      newlocation = newlocation.map((item) => item.value);\n    }\n\n    if (newlob == null || newlob == undefined || !Array.isArray(newlob) || newlob.length === 0) {\n      newlob = defaultOptions.defaultlob.map((item) => item.value);\n      // newlob = [];\n    }\n    else {\n      newlob = newlob.map((item) => item.value);\n    }\n\n    if (newbusinessType == null || newbusinessType == undefined || !Array.isArray(newbusinessType) || newbusinessType.length === 0) {\n      newbusinessType = defaultOptions.defaultbusinessType.map((item) => item.value);\n      // newbusinessType = [];\n\n    }\n    else {\n      newbusinessType = newbusinessType.map((item) => item.value);\n    }\n    if (newagent == null || newagent == undefined || !Array.isArray(newagent) || newagent.length === 0) {\n      newagent = defaultOptions.defaultagent.map((item) => item.value);\n    }\n    else {\n      newagent = newagent.map((item) => item.value);\n    }\n\n    const token = localStorage.getItem('token');\n    const loginuser = JSON.parse(localStorage.getItem('user'));\n    const loginusertype = loginuser.usertype;\n    console.log(\"loginusertype\", loginusertype);\n\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify({\n        location: newlocation,\n        lob: newlob,\n        business_type: newbusinessType,\n        newagent: newagent,\n        dateRange: dateRange,\n        startdate: startdate,\n        enddate: enddate,\n        assign_staff: assign_staff,\n        userType: usertype\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n    };\n\n\n    if (loginusertype == \"64622526b201a6f07b2dff3e\") {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/topLeagentCount`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(\"data\", data.data);\n          setMotorcount(data.data.motorCount);\n          setTravelcount(data.data.travelCount);\n          setHomecount(data.data.homeCount);\n          setYachtcount(data.data.yatchCount);\n          setMedicalcount(data.data.medicalCount);\n          setOthercount(data.data.ortherInsuranceCount);\n        })\n        .catch((error) => {\n          console.log(error)\n        })\n\n\n    }\n    if (loginusertype == \"64622470b201a6f07b2dff22\") {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/topLeagentCount?dashboardType=policyIssuerDashbord`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(\"data\", data.data);\n          setMotorcount(data.data.motorCount);\n          setTravelcount(data.data.travelCount);\n          setHomecount(data.data.homeCount);\n          setYachtcount(data.data.yatchCount);\n          setMedicalcount(data.data.medicalCount);\n          setOthercount(data.data.ortherInsuranceCount);\n        }\n        )\n        .catch((error) => {\n          console.log(error)\n        }\n        )\n\n    }\n  }\n\n  const [totaldata, setTotaldata] = useState([]);\n  const [janmotorCount, setJanmotorCount] = useState(0);\n  const [febmotorCount, setFebmotorCount] = useState(0);\n  const [marmotorCount, setMarmotorCount] = useState(0);\n  const [aprmotorCount, setAprmotorCount] = useState(0);\n  const [maymotorCount, setMaymotorCount] = useState(0);\n  const [junmotorCount, setJunmotorCount] = useState(0);\n  const [julmotorCount, setJulmotorCount] = useState(0);\n  const [augmotorCount, setAugmotorCount] = useState(0);\n  const [sepmotorCount, setSepmotorCount] = useState(0);\n  const [octmotorCount, setOctmotorCount] = useState(0);\n  const [novmotorCount, setNovmotorCount] = useState(0);\n  const [decmotorCount, setDecmotorCount] = useState(0);\n\n  const [jantravelCount, setJantravelCount] = useState(0);\n  const [febtravelCount, setFebtravelCount] = useState(0);\n  const [martravelCount, setMartravelCount] = useState(0);\n  const [aprtravelCount, setAprtravelCount] = useState(0);\n  const [maytravelCount, setMaytravelCount] = useState(0);\n  const [juntravelCount, setJuntravelCount] = useState(0);\n  const [jultravelCount, setJultravelCount] = useState(0);\n  const [augtravelCount, setAugtravelCount] = useState(0);\n  const [septravelCount, setSeptravelCount] = useState(0);\n  const [octtravelCount, setOcttravelCount] = useState(0);\n  const [novtravelCount, setNovtravelCount] = useState(0);\n  const [dectravelCount, setDectravelCount] = useState(0);\n\n  const [janhomeCount, setJanhomeCount] = useState(0);\n  const [febhomeCount, setFebhomeCount] = useState(0);\n  const [marhomeCount, setMarhomeCount] = useState(0);\n  const [aprhomeCount, setAprhomeCount] = useState(0);\n  const [mayhomeCount, setMayhomeCount] = useState(0);\n  const [junhomeCount, setJunhomeCount] = useState(0);\n  const [julhomeCount, setJulhomeCount] = useState(0);\n  const [aughomeCount, setAughomeCount] = useState(0);\n  const [sephomeCount, setSehomeCount] = useState(0);\n  const [octhomeCount, setOcthomeCount] = useState(0);\n  const [novhomeCount, setNovhomeCount] = useState(0);\n  const [dechomeCount, setDechomeCount] = useState(0);\n\n  const [janmedicalCount, setJanmedicalCount] = useState(0);\n  const [febmedicalCount, setFebmedicalCount] = useState(0);\n  const [marmedicalCount, setMarmedicalCount] = useState(0);\n  const [aprmedicalCount, setAprmedicalCount] = useState(0);\n  const [maymedicalCount, setMaymedicalCount] = useState(0);\n  const [junmedicalCount, setJunmedicalCount] = useState(0);\n  const [julmedicalCount, setJulmedicalCount] = useState(0);\n  const [augmedicalCount, setAugmedicalCount] = useState(0);\n  const [sepmedicalCount, setSepmedicalCount] = useState(0);\n  const [octmedicalCount, setOctmedicalCount] = useState(0);\n  const [novmedicalCount, setNovmedicalCount] = useState(0);\n  const [decmedicalCount, setDecmedicalCount] = useState(0);\n\n  const [janyachtCount, setJanyachtCount] = useState(0);\n  const [febyachtCount, setFebyachtCount] = useState(0);\n  const [maryachtCount, setMaryachtCount] = useState(0);\n  const [apryachtCount, setApryachtCount] = useState(0);\n  const [mayyachtCount, setMayyachtCount] = useState(0);\n  const [junyachtCount, setJunyachtCount] = useState(0);\n  const [julyachtCount, setJulyachtCount] = useState(0);\n  const [augyachtCount, setAugyachtCount] = useState(0);\n  const [sepyachtCount, setSepyachtCount] = useState(0);\n  const [octyachtCount, setOctyachtCount] = useState(0);\n  const [novyachtCount, setNovyachtCount] = useState(0);\n  const [decyachtCount, setDecyachtCount] = useState(0);\n\n  const [janotherCount, setJanotherCount] = useState(0);\n  const [febotherCount, setFebotherCount] = useState(0);\n  const [marotherCount, setMarotherCount] = useState(0);\n  const [aprotherCount, setAprotherCount] = useState(0);\n  const [mayotherCount, setMayotherCount] = useState(0);\n  const [junotherCount, setJunotherCount] = useState(0);\n  const [julotherCount, setJulotherCount] = useState(0);\n  const [augotherCount, setAugotherCount] = useState(0);\n  const [sepotherCount, setSepotherCount] = useState(0);\n  const [octotherCount, setOctotherCount] = useState(0);\n  const [novotherCount, setNovotherCount] = useState(0);\n  const [decotherCount, setDecotherCount] = useState(0);\n\n\n\n  const getTotaldata = async () => {\n\n    console.log(\"inside filterOptions\", filterOptions);\n    console.log(\"inside defaultOptions\", defaultOptions);\n\n    const userdata = JSON.parse(localStorage.getItem('user'));\n    let newlocation = filterOptions.location;\n    let newlob = filterOptions.lob;\n    let newbusinessType = filterOptions.businessType;\n    let newagent = filterOptions.agent;\n    let dateRange = filterOptions.dateRange;\n    let startdate = defaultOptions.startdate;\n    let enddate = defaultOptions.enddate;\n    let assign_staff = userdata.assign_staff;\n    let usertype = defaultOptions.userType\n\n    if (newlocation == null || newlocation == undefined || !Array.isArray(newlocation) || newlocation.length === 0) {\n      // newlocation = defaultOptions.defaultlocation.map((item) => item.value);\n      newlocation = [];\n    }\n    else {\n      newlocation = newlocation.map((item) => item.value);\n    }\n\n    if (newlob == null || newlob == undefined || !Array.isArray(newlob) || newlob.length === 0) {\n      // newlob = defaultOptions.defaultlob.map((item) => item.value);\n      newlob = [];\n    }\n    else {\n      newlob = newlob.map((item) => item.value);\n    }\n\n    if (newbusinessType == null || newbusinessType == undefined || !Array.isArray(newbusinessType) || newbusinessType.length === 0) {\n      // newbusinessType = defaultOptions.defaultbusinessType.map((item) => item.value);\n      newbusinessType = [];\n\n    }\n    else {\n      newbusinessType = newbusinessType.map((item) => item.value);\n    }\n    if (newagent == null || newagent == undefined || !Array.isArray(newagent) || newagent.length === 0) {\n      newagent = defaultOptions.defaultagent.map((item) => item.value);\n    }\n    else {\n      newagent = newagent.map((item) => item.value);\n    }\n\n    const token = localStorage.getItem('token');\n    const loginuser = JSON.parse(localStorage.getItem('user'));\n    const loginusertype = loginuser.usertype;\n    console.log(\"loginusertype\", loginusertype);\n\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify({\n        location: newlocation,\n        lob: newlob,\n        business_type: newbusinessType,\n        newagent: newagent,\n        dateRange: dateRange,\n        startdate: startdate,\n        enddate: enddate,\n        assign_staff: assign_staff,\n        userType: usertype\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n    };\n\n\n    if (loginusertype == \"64622526b201a6f07b2dff3e\") {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/getAllGraphCount`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          setJanmotorCount(data.data.janmotorCount);\n          setFebmotorCount(data.data.febmotorCount);\n          setMarmotorCount(data.data.marmotorCount);\n          setAprmotorCount(data.data.aprmotorCount);\n          setMaymotorCount(data.data.maymotorCount);\n          setJunmotorCount(data.data.junmotorCount);\n          setJulmotorCount(data.data.julmotorCount);\n          setAugmotorCount(data.data.augmotorCount);\n          setSepmotorCount(data.data.sepmotorCount);\n          setOctmotorCount(data.data.octmotorCount);\n          setNovmotorCount(data.data.novmotorCount);\n          setDecmotorCount(data.data.decmotorCount);\n\n          setJantravelCount(data.data.jantravelCount);\n          setFebtravelCount(data.data.febtravelCount);\n          setMartravelCount(data.data.martravelCount);\n          setAprtravelCount(data.data.aprtravelCount);\n          setMaytravelCount(data.data.maytravelCount);\n          setJuntravelCount(data.data.juntravelCount);\n          setJultravelCount(data.data.jultravelCount);\n          setAugtravelCount(data.data.augtravelCount);\n          setSeptravelCount(data.data.septravelCount);\n          setOcttravelCount(data.data.octtravelCount);\n          setNovtravelCount(data.data.novtravelCount);\n          setDectravelCount(data.data.dectravelCount);\n\n          setJanhomeCount(data.data.janhomeCount);\n          setFebhomeCount(data.data.febhomeCount);\n          setMarhomeCount(data.data.marhomeCount);\n          setAprhomeCount(data.data.aprhomeCount);\n          setMayhomeCount(data.data.mayhomeCount);\n          setJunhomeCount(data.data.junhomeCount);\n          setJulhomeCount(data.data.julhomeCount);\n          setAughomeCount(data.data.aughomeCount);\n          setSehomeCount(data.data.sephomeCount);\n          setOcthomeCount(data.data.octhomeCount);\n          setNovhomeCount(data.data.novhomeCount);\n          setDechomeCount(data.data.dechomeCount);\n\n          setJanmedicalCount(data.data.janmedicalCount);\n          setFebmedicalCount(data.data.febmedicalCount);\n          setMarmedicalCount(data.data.marmedicalCount);\n          setAprmedicalCount(data.data.aprmedicalCount);\n          setMaymedicalCount(data.data.maymedicalCount);\n          setJunmedicalCount(data.data.junmedicalCount);\n          setJulmedicalCount(data.data.julmedicalCount);\n          setAugmedicalCount(data.data.augmedicalCount);\n          setSepmedicalCount(data.data.sepmedicalCount);\n          setOctmedicalCount(data.data.octmedicalCount);\n          setNovmedicalCount(data.data.novmedicalCount);\n          setDecmedicalCount(data.data.decmedicalCount);\n\n          setJanyachtCount(data.data.janyachtCount);\n          setFebyachtCount(data.data.febyachtCount);\n          setMaryachtCount(data.data.maryachtCount);\n          setApryachtCount(data.data.apryachtCount);\n          setMayyachtCount(data.data.mayyachtCount);\n          setJunyachtCount(data.data.junyachtCount);\n          setJulyachtCount(data.data.julyachtCount);\n          setAugyachtCount(data.data.augyachtCount);\n          setSepyachtCount(data.data.sepyachtCount);\n          setOctyachtCount(data.data.octyachtCount);\n          setNovyachtCount(data.data.novyachtCount);\n          setDecyachtCount(data.data.decyachtCount);\n\n          setJanotherCount(data.data.janotherCount);\n          setFebotherCount(data.data.febotherCount);\n          setMarotherCount(data.data.marotherCount);\n          setAprotherCount(data.data.aprotherCount);\n          setMayotherCount(data.data.mayotherCount);\n          setJunotherCount(data.data.junotherCount);\n          setJulotherCount(data.data.julotherCount);\n          setAugotherCount(data.data.augotherCount);\n          setSepotherCount(data.data.sepotherCount);\n          setOctotherCount(data.data.octotherCount);\n          setNovotherCount(data.data.novotherCount);\n          setDecotherCount(data.data.decotherCount);\n\n        }\n        )\n        .catch((error) => {\n          console.log(error)\n        })\n\n\n    }\n    if (loginusertype == \"64622470b201a6f07b2dff22\") {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/getAllGraphCount?dashboardType=policyIssuerDashbord`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          setJanmotorCount(data.data.janmotorCount);\n          setFebmotorCount(data.data.febmotorCount);\n          setMarmotorCount(data.data.marmotorCount);\n          setAprmotorCount(data.data.aprmotorCount);\n          setMaymotorCount(data.data.maymotorCount);\n          setJunmotorCount(data.data.junmotorCount);\n          setJulmotorCount(data.data.julmotorCount);\n          setAugmotorCount(data.data.augmotorCount);\n          setSepmotorCount(data.data.sepmotorCount);\n          setOctmotorCount(data.data.octmotorCount);\n          setNovmotorCount(data.data.novmotorCount);\n          setDecmotorCount(data.data.decmotorCount);\n\n          setJantravelCount(data.data.jantravelCount);\n          setFebtravelCount(data.data.febtravelCount);\n          setMartravelCount(data.data.martravelCount);\n          setAprtravelCount(data.data.aprtravelCount);\n          setMaytravelCount(data.data.maytravelCount);\n          setJuntravelCount(data.data.juntravelCount);\n          setJultravelCount(data.data.jultravelCount);\n          setAugtravelCount(data.data.augtravelCount);\n          setSeptravelCount(data.data.septravelCount);\n          setOcttravelCount(data.data.octtravelCount);\n          setNovtravelCount(data.data.novtravelCount);\n          setDectravelCount(data.data.dectravelCount);\n\n          setJanhomeCount(data.data.janhomeCount);\n          setFebhomeCount(data.data.febhomeCount);\n          setMarhomeCount(data.data.marhomeCount);\n          setAprhomeCount(data.data.aprhomeCount);\n          setMayhomeCount(data.data.mayhomeCount);\n          setJunhomeCount(data.data.junhomeCount);\n          setJulhomeCount(data.data.julhomeCount);\n          setAughomeCount(data.data.aughomeCount);\n          setSehomeCount(data.data.sephomeCount);\n          setOcthomeCount(data.data.octhomeCount);\n          setNovhomeCount(data.data.novhomeCount);\n          setDechomeCount(data.data.dechomeCount);\n\n          setJanmedicalCount(data.data.janmedicalCount);\n          setFebmedicalCount(data.data.febmedicalCount);\n          setMarmedicalCount(data.data.marmedicalCount);\n          setAprmedicalCount(data.data.aprmedicalCount);\n          setMaymedicalCount(data.data.maymedicalCount);\n          setJunmedicalCount(data.data.junmedicalCount);\n          setJulmedicalCount(data.data.julmedicalCount);\n          setAugmedicalCount(data.data.augmedicalCount);\n          setSepmedicalCount(data.data.sepmedicalCount);\n          setOctmedicalCount(data.data.octmedicalCount);\n          setNovmedicalCount(data.data.novmedicalCount);\n          setDecmedicalCount(data.data.decmedicalCount);\n\n          setJanyachtCount(data.data.janyachtCount);\n          setFebyachtCount(data.data.febyachtCount);\n          setMaryachtCount(data.data.maryachtCount);\n          setApryachtCount(data.data.apryachtCount);\n          setMayyachtCount(data.data.mayyachtCount);\n          setJunyachtCount(data.data.junyachtCount);\n          setJulyachtCount(data.data.julyachtCount);\n          setAugyachtCount(data.data.augyachtCount);\n          setSepyachtCount(data.data.sepyachtCount);\n          setOctyachtCount(data.data.octyachtCount);\n          setNovyachtCount(data.data.novyachtCount);\n          setDecyachtCount(data.data.decyachtCount);\n\n          setJanotherCount(data.data.janotherCount);\n          setFebotherCount(data.data.febotherCount);\n          setMarotherCount(data.data.marotherCount);\n          setAprotherCount(data.data.aprotherCount);\n          setMayotherCount(data.data.mayotherCount);\n          setJunotherCount(data.data.junotherCount);\n          setJulotherCount(data.data.julotherCount);\n          setAugotherCount(data.data.augotherCount);\n          setSepotherCount(data.data.sepotherCount);\n          setOctotherCount(data.data.octotherCount);\n          setNovotherCount(data.data.novotherCount);\n          setDecotherCount(data.data.decotherCount);\n\n        }\n        )\n        .catch((error) => {\n          console.log(error)\n        }\n        )\n\n    }\n  }\n\n  console.log(\"totaldata\", totaldata)\n\n  // const lobdata = [\n  //   'Motor',\n  //   'Travel',\n  //   'Home',\n  //   'Medical',\n  //   'Yacht',\n  //   'Other LOB'\n\n  // ]\n\n  const data = [\n    {\n      line_of_business_name: \"Motor\",\n      monthlydata: [\n        {\n          \"month\": \"January\",\n          \"count\": janmotorCount\n        },\n        {\n          \"month\": \"February\",\n          \"count\": febmotorCount\n        },\n        {\n          \"month\": \"March\",\n          \"count\": marmotorCount\n        },\n        {\n          \"month\": \"April\",\n          \"count\": aprmotorCount\n        },\n        {\n          \"month\": \"May\",\n          \"count\": maymotorCount\n        },\n        {\n          \"month\": \"June\",\n          \"count\": junmotorCount\n        },\n        {\n          \"month\": \"July\",\n          \"count\": julmotorCount\n        },\n        {\n          \"month\": \"August\",\n          \"count\": augmotorCount\n        },\n        {\n          \"month\": \"September\",\n          \"count\": sepmotorCount\n        },\n        {\n          \"month\": \"October\",\n          \"count\": octmotorCount\n        },\n        {\n          \"month\": \"November\",\n          \"count\": novmotorCount\n        },\n        {\n          \"month\": \"December\",\n          \"count\": decmotorCount\n        }\n      ],\n    },\n    {\n      line_of_business_name: \"Travel\",\n      \"monthlydata\": [\n        {\n          \"month\": \"January\",\n          \"count\": jantravelCount\n        },\n        {\n          \"month\": \"February\",\n          \"count\": febtravelCount\n        },\n        {\n          \"month\": \"March\",\n          \"count\": martravelCount\n        },\n        {\n          \"month\": \"April\",\n          \"count\": aprtravelCount\n        },\n        {\n          \"month\": \"May\",\n          \"count\": maytravelCount\n        },\n        {\n          \"month\": \"June\",\n          \"count\": juntravelCount\n        },\n        {\n          \"month\": \"July\",\n          \"count\": jultravelCount\n        },\n        {\n          \"month\": \"August\",\n          \"count\": augtravelCount\n        },\n        {\n          \"month\": \"September\",\n          \"count\": septravelCount\n        },\n        {\n          \"month\": \"October\",\n          \"count\": octtravelCount\n        },\n        {\n          \"month\": \"November\",\n          \"count\": novtravelCount\n        },\n        {\n          \"month\": \"December\",\n          \"count\": dectravelCount\n        }\n      ],\n    },\n    {\n      line_of_business_name: \"Home\",\n      \"monthlydata\": [\n        {\n          \"month\": \"January\",\n          \"count\": janhomeCount\n        },\n        {\n          \"month\": \"February\",\n          \"count\": febhomeCount\n        },\n        {\n          \"month\": \"March\",\n          \"count\": marhomeCount\n        },\n        {\n          \"month\": \"April\",\n          \"count\": aprhomeCount\n        },\n        {\n          \"month\": \"May\",\n          \"count\": mayhomeCount\n        },\n        {\n          \"month\": \"June\",\n          \"count\": junhomeCount\n        },\n        {\n          \"month\": \"July\",\n          \"count\": julhomeCount\n        },\n        {\n          \"month\": \"August\",\n          \"count\": aughomeCount\n        },\n        {\n          \"month\": \"September\",\n          \"count\": sephomeCount\n        },\n        {\n          \"month\": \"October\",\n          \"count\": octhomeCount\n        },\n        {\n          \"month\": \"November\",\n          \"count\": novhomeCount\n        },\n        {\n          \"month\": \"December\",\n          \"count\": dechomeCount\n        }\n      ],\n    },\n    {\n      line_of_business_name: \"Medical\",\n      \"monthlydata\": [\n        {\n          \"month\": \"January\",\n          \"count\": janmedicalCount\n        },\n        {\n          \"month\": \"February\",\n          \"count\": febmedicalCount\n        },\n        {\n          \"month\": \"March\",\n          \"count\": marmedicalCount\n        },\n        {\n          \"month\": \"April\",\n          \"count\": aprmedicalCount\n        },\n        {\n          \"month\": \"May\",\n          \"count\": maymedicalCount\n        },\n        {\n          \"month\": \"June\",\n          \"count\": junmedicalCount\n        },\n        {\n          \"month\": \"July\",\n          \"count\": julmedicalCount\n        },\n        {\n          \"month\": \"August\",\n          \"count\": augmedicalCount\n        },\n        {\n          \"month\": \"September\",\n          \"count\": sepmedicalCount\n        },\n        {\n          \"month\": \"October\",\n          \"count\": octmedicalCount\n        },\n        {\n          \"month\": \"November\",\n          \"count\": novmedicalCount\n        },\n        {\n          \"month\": \"December\",\n          \"count\": decmedicalCount\n        }\n      ],\n    },\n    {\n      line_of_business_name: \"Yacht\",\n      \"monthlydata\": [\n        {\n          \"month\": \"January\",\n          \"count\": janyachtCount\n        },\n        {\n          \"month\": \"February\",\n          \"count\": febyachtCount\n        },\n        {\n          \"month\": \"March\",\n          \"count\": maryachtCount\n        },\n        {\n          \"month\": \"April\",\n          \"count\": apryachtCount\n        },\n        {\n          \"month\": \"May\",\n          \"count\": mayyachtCount\n        },\n        {\n          \"month\": \"June\",\n          \"count\": junyachtCount\n        },\n        {\n          \"month\": \"July\",\n          \"count\": julyachtCount\n        },\n        {\n          \"month\": \"August\",\n          \"count\": augyachtCount\n        },\n        {\n          \"month\": \"September\",\n          \"count\": sepyachtCount\n        },\n        {\n          \"month\": \"October\",\n          \"count\": octyachtCount\n        },\n        {\n          \"month\": \"November\",\n          \"count\": novyachtCount\n        },\n        {\n          \"month\": \"December\",\n          \"count\": decyachtCount\n        }\n      ],\n\n    },\n    {\n      line_of_business_name: \"Other Insurance\",\n      \"monthlydata\": [\n        {\n          \"month\": \"January\",\n          \"count\": janotherCount\n        },\n        {\n          \"month\": \"February\",\n          \"count\": febotherCount\n        },\n        {\n          \"month\": \"March\",\n          \"count\": marotherCount\n        },\n        {\n          \"month\": \"April\",\n          \"count\": aprotherCount\n        },\n        {\n          \"month\": \"May\",\n          \"count\": mayotherCount\n        },\n        {\n          \"month\": \"June\",\n          \"count\": junotherCount\n        },\n        {\n          \"month\": \"July\",\n          \"count\": julotherCount\n        },\n        {\n          \"month\": \"August\",\n          \"count\": augotherCount\n        },\n        {\n          \"month\": \"September\",\n          \"count\": sepotherCount\n        },\n        {\n          \"month\": \"October\",\n          \"count\": octotherCount\n        },\n        {\n          \"month\": \"November\",\n          \"count\": novotherCount\n        },\n        {\n          \"month\": \"December\",\n          \"count\": decotherCount\n        }\n      ],\n    }\n  ]\n\n\n  let chartData = {\n    labels: [],\n    datasets: [],\n  };\n\n  chartData = {\n    labels: Array.from(new Set(data.flatMap(item => item.monthlydata.map(data => data.month)))),\n    datasets: data.map(item => ({\n      label: item.line_of_business_name,\n      backgroundColor: item.line_of_business_name === 'Motor' ? '#FF6384' :\n        item.line_of_business_name === 'Travel' ? '#007500' :\n          item.line_of_business_name === 'Home' ? '#FFCE56' :\n            item.line_of_business_name === 'Medical' ? '#36A2EB' :\n              item.line_of_business_name === 'Yacht' ? '#5742f5' :\n                '#da42f5',\n      data: item.monthlydata.map(data => data.count),\n    })),\n  };\n\n\n\n  return (\n    <>\n      <Accordion >\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header>\n            <div className=\"card-header new_leads\">\n              <strong>Graphical View </strong>\n            </div>\n          </Accordion.Header>\n          <Accordion.Body style={{ padding: '2px' }}>\n            <CCard className=\"mb-4\">\n              <CRow>\n                <CCol lg={8}>\n                  <CCard className=\"mb-4\">\n                    <CCardHeader>Bar Chart</CCardHeader>\n                    <CCardBody>\n                      <CChartBar data={chartData} />\n                    </CCardBody>\n                  </CCard>\n                </CCol>\n                {/* <CCol  lg={8}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>Bar Chart</CCardHeader>\n            <CCardBody>\n            <CChartBar \n               data={{\n                labels: ['january', 'February', 'March', 'April', 'May', 'June', 'July','August','September','October','November','December'],\n                datasets: [\n                  {\n                    label: loblist.map((item)=>item),\n                    backgroundColor: ['#FF6384', '#007500', '#FFCE56','#36A2EB','#5742f5','#da42f5'],\n                    hoverBackgroundColor: ['#FF6384', '#007500', '#FFCE56','#36A2EB','#5742f5','#da42f5'],\n                    data: [{janmotorCount, febmotorCount, marmotorCount, aprmotorCount, maymotorCount, junmotorCount, julmotorCount,augmotorCount,sepmotorCount,octmotorCount,novmotorCount,decmotorCount},\n                    {jantravelCount, febtravelCount, martravelCount, aprtravelCount, maytravelCount, juntravelCount, jultravelCount,augtravelCount,septravelCount,octtravelCount,novtravelCount,dectravelCount},\n                    {janhomeCount, febhomeCount, marhomeCount, aprhomeCount, mayhomeCount, junhomeCount, julhomeCount,aughomeCount,sephomeCount,octhomeCount,novhomeCount,dechomeCount},\n                    {janmedicalCount, febmedicalCount, marmedicalCount, aprmedicalCount, maymedicalCount, junmedicalCount, julmedicalCount,augmedicalCount,sepmedicalCount,octmedicalCount,novmedicalCount,decmedicalCount},\n                    {janyachtCount, febyachtCount, maryachtCount, apryachtCount, mayyachtCount, junyachtCount, julyachtCount,augyachtCount,sepyachtCount,octyachtCount,novyachtCount,decyachtCount},\n                    {janotherCount, febotherCount, marotherCount, aprotherCount, mayotherCount, junotherCount, julotherCount,augotherCount,sepotherCount,octotherCount,novotherCount,decotherCount}\n\n                  ],\n                  },\n                ],\n              }}\n            />\n            </CCardBody>\n          </CCard>\n        </CCol> */}\n\n                {/* <CCol lg={8}>\n  <CCard className=\"mb-4\">\n    <CCardHeader>Bar Chart</CCardHeader>\n    <CCardBody>\n      <CChartBar\n        datasets={[\n          {\n            label: 'Motor',\n            backgroundColor: '#0D2F92',\n            data: [janmotorCount, febmotorCount, marmotorCount, aprmotorCount, maymotorCount, junmotorCount, julmotorCount, augmotorCount, sepmotorCount, octmotorCount, novmotorCount, decmotorCount],\n          },\n          {\n            label: 'Travel',\n            backgroundColor: '#f87979',\n            data: [jantravelCount, febtravelCount, martravelCount, aprtravelCount, maytravelCount, juntravelCount, jultravelCount, augtravelCount, septravelCount, octtravelCount, novtravelCount, dectravelCount],\n          },\n          // Add other datasets for different LOBs here\n          {\n            label: 'Home',\n            backgroundColor: '#f87979',\n            data: [janhomeCount, febhomeCount, marhomeCount, aprhomeCount, mayhomeCount, junhomeCount, julhomeCount, aughomeCount, sephomeCount, octhomeCount, novhomeCount, dechomeCount],\n          },\n          {\n            label: 'Medical',\n            backgroundColor: '#f87979',\n            data: [janmedicalCount, febmedicalCount, marmedicalCount, aprmedicalCount, maymedicalCount, junmedicalCount, julmedicalCount, augmedicalCount, sepmedicalCount, octmedicalCount, novmedicalCount, decmedicalCount],\n          },\n          {\n            label: 'Yacht',\n            backgroundColor: '#f87979',\n            data: [janyachtCount, febyachtCount, maryachtCount, apryachtCount, mayyachtCount, junyachtCount, julyachtCount, augyachtCount, sepyachtCount, octyachtCount, novyachtCount, decyachtCount],\n          },\n          {\n            label: 'Other LOB',\n            backgroundColor: '#f87979',\n            data: [janotherCount, febotherCount, marotherCount, aprotherCount, mayotherCount, junotherCount, julotherCount, augotherCount, sepotherCount, octotherCount, novotherCount, decotherCount],\n          }\n        ]}\n        labels={['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']}\n        options={{\n          scales: {\n            x: {\n              beginAtZero: true,\n            },\n          },\n        }}\n      />\n    </CCardBody>\n  </CCard>\n</CCol> */}\n\n\n\n\n                {/* <CCol xl={6} xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>Line Chart</CCardHeader>\n            <CCardBody>\n              <CChartLine\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      label: 'My First dataset',\n                      backgroundColor: 'rgba(220, 220, 220, 0.2)',\n                      borderColor: 'rgba(220, 220, 220, 1)',\n                      pointBackgroundColor: 'rgba(220, 220, 220, 1)',\n                      pointBorderColor: '#fff',\n                      data: [\n                        random1(),\n                        random1(),\n                        random1(),\n                        random1(),\n                        random1(),\n                        random1(),\n                        random1(),\n                      ],\n                    },\n                    {\n                      label: 'My Second dataset',\n                      backgroundColor: 'rgba(151, 187, 205, 0.2)',\n                      borderColor: 'rgba(151, 187, 205, 1)',\n                      pointBackgroundColor: 'rgba(151, 187, 205, 1)',\n                      pointBorderColor: '#fff',\n                      data: [\n                        random1(),\n                        random1(),\n                        random1(),\n                        random1(),\n                        random1(),\n                        random1(),\n                        random1(),\n                      ],\n                    },\n                  ],\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol> */}\n                <Col className='' lg={4}>\n                  <CCard className=\"mb-4\">\n                    <CCardHeader>Total Leads</CCardHeader>\n                    <CCardBody>\n                      <CChartPie\n                        data={{\n                          labels: ['Motor', 'Travel', 'Home', 'Medical', 'Yacht', 'Other LOB'],\n                          datasets: [\n                            {\n                              data: [motorcount, travelcount, homecount, medicalcount, yachtcount, othercount],\n                              backgroundColor: ['#FF6384', '#007500', '#FFCE56', '#36A2EB', '#5742f5', '#da42f5'],\n                              hoverBackgroundColor: ['#FF6384', '#007500', '#FFCE56', '#36A2EB', '#5742f5', '#da42f5'],\n                            },\n                          ],\n                        }}\n                      />\n                    </CCardBody>\n                  </CCard>\n                </Col>\n              </CRow>\n            </CCard>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>\n    </>\n  )\n}\n\nexport default PISalesGraph;\n"],"names":["_ref","filterOptions","defaultOptions","lobdata","navigate","useNavigate","useEffect","token","localStorage","getItem","undefined","getdata","graphvalues","setGraphvalues","useState","async","newlob","map","item","value","requestOptions","method","body","JSON","stringify","lob","headers","fetch","then","response","json","data","piechartData","labels","datasets","Array","isArray","line_of_business_name","label","total","backgroundColor","hoverBackgroundColor","setLob","lobList","getTotalCount","getTotaldata","parse","line_of_business","length","lobdt","lob_len","lob_list","i","lob_obj","lob_name","lob_id","push","_id","motorcount","setMotorcount","travelcount","setTravelcount","homecount","setHomecount","yachtcount","setYachtcount","medicalcount","setMedicalcount","othercount","setOthercount","console","log","userdata","newlocation","location","newbusinessType","businessType","newagent","agent","dateRange","startdate","enddate","assign_staff","usertype","userType","defaultlocation","defaultlob","defaultbusinessType","defaultagent","loginusertype","business_type","motorCount","travelCount","homeCount","yatchCount","medicalCount","ortherInsuranceCount","catch","error","totaldata","setTotaldata","janmotorCount","setJanmotorCount","febmotorCount","setFebmotorCount","marmotorCount","setMarmotorCount","aprmotorCount","setAprmotorCount","maymotorCount","setMaymotorCount","junmotorCount","setJunmotorCount","julmotorCount","setJulmotorCount","augmotorCount","setAugmotorCount","sepmotorCount","setSepmotorCount","octmotorCount","setOctmotorCount","novmotorCount","setNovmotorCount","decmotorCount","setDecmotorCount","jantravelCount","setJantravelCount","febtravelCount","setFebtravelCount","martravelCount","setMartravelCount","aprtravelCount","setAprtravelCount","maytravelCount","setMaytravelCount","juntravelCount","setJuntravelCount","jultravelCount","setJultravelCount","augtravelCount","setAugtravelCount","septravelCount","setSeptravelCount","octtravelCount","setOcttravelCount","novtravelCount","setNovtravelCount","dectravelCount","setDectravelCount","janhomeCount","setJanhomeCount","febhomeCount","setFebhomeCount","marhomeCount","setMarhomeCount","aprhomeCount","setAprhomeCount","mayhomeCount","setMayhomeCount","junhomeCount","setJunhomeCount","julhomeCount","setJulhomeCount","aughomeCount","setAughomeCount","sephomeCount","setSehomeCount","octhomeCount","setOcthomeCount","novhomeCount","setNovhomeCount","dechomeCount","setDechomeCount","janmedicalCount","setJanmedicalCount","febmedicalCount","setFebmedicalCount","marmedicalCount","setMarmedicalCount","aprmedicalCount","setAprmedicalCount","maymedicalCount","setMaymedicalCount","junmedicalCount","setJunmedicalCount","julmedicalCount","setJulmedicalCount","augmedicalCount","setAugmedicalCount","sepmedicalCount","setSepmedicalCount","octmedicalCount","setOctmedicalCount","novmedicalCount","setNovmedicalCount","decmedicalCount","setDecmedicalCount","janyachtCount","setJanyachtCount","febyachtCount","setFebyachtCount","maryachtCount","setMaryachtCount","apryachtCount","setApryachtCount","mayyachtCount","setMayyachtCount","junyachtCount","setJunyachtCount","julyachtCount","setJulyachtCount","augyachtCount","setAugyachtCount","sepyachtCount","setSepyachtCount","octyachtCount","setOctyachtCount","novyachtCount","setNovyachtCount","decyachtCount","setDecyachtCount","janotherCount","setJanotherCount","febotherCount","setFebotherCount","marotherCount","setMarotherCount","aprotherCount","setAprotherCount","mayotherCount","setMayotherCount","junotherCount","setJunotherCount","julotherCount","setJulotherCount","augotherCount","setAugotherCount","sepotherCount","setSepotherCount","octotherCount","setOctotherCount","novotherCount","setNovotherCount","decotherCount","setDecotherCount","monthlydata","chartData","from","Set","flatMap","month","count","_jsx","_Fragment","children","Accordion","_jsxs","Item","eventKey","Header","className","Body","style","padding","CCard","CRow","CCol","lg","CCardHeader","CCardBody","CChartBar","Col","CChartPie"],"sourceRoot":""}