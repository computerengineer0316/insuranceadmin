{"version":3,"file":"static/js/1306.7a5afcad.chunk.js","mappings":"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","sources":["views/motor-claim-years/MotorClaimYears.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Modal, Button } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport filePath from '../../webroot/sample-files/user-type.xlsx'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\n\nconst MotorClaimYears = () => {\n  const navigate = useNavigate();\n  const [data, setData] = useState([]);\n  const [perPage] = useState(5);\n  const [pageCount, setPageCount] = useState(0);\n  const [page, setPage] = useState(1);\n  const [excelfile, setExcelfile] = useState(\"\");\n  const [usertype, setUsertype] = useState('');\n  const [usertype_status, setUsertypestatus] = useState('');\n  const [id, setId] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [visibleedit, setVisibleedit] = useState(false);\n  const [masterpermission, setMasterpermission] = useState([]);\n\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    }\n    else {\n      getclaimyear(page, perPage);\n      const userdata = JSON.parse(localStorage.getItem('user'));\n      const master_permission = userdata?.master_permission?.[0] || {};\n      setMasterpermission(master_permission);\n\n    }\n  }, [])\n\n  const getclaimyear = (page, perPage) => {\n    setData([]);\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/motorClaimsYears?limit=${perPage}&page=${page}`, requestOptions)\n      .then(response => response.json())\n      .then(\n        data => {\n          const total = data.count;\n          const slice = total / perPage;\n          const pages = Math.ceil(slice);\n          setPageCount(pages);\n          const list = data.data;\n          setData(list)\n        }\n      );\n  }\n\n  console.log(data)\n\n  const fileType = 'xlsx'\n  const exporttocsv = () => {\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n    const newdata = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(newdata, \"User-type\" + \".xlsx\")\n  }\n\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    setPage(selectedPage + 1);\n    getclaimyear(selectedPage + 1, perPage);\n  };\n\n\n\n\n  const collectExceldata = async (e) => {\n    e.preventDefault()\n    const fd = new FormData()\n    fd.append('file', excelfile)\n    let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_user_type_excel \",\n      {\n        method: \"post\",\n        body: fd,\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setVisible(!visible)\n          swal({\n\n            text: data.message,\n            type: \"success\",\n            icon: \"success\",\n            button: false\n          })\n\n          getclaimyear(page, perPage);\n\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          setVisible(!visible)\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\"\n          })\n          getclaimyear(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n      });\n  }\n\n  const [questions, setQuestions] = useState('');\n  const [year, setYear] = useState('');\n\n  const addclaimyears = async (e) => {\n    e.preventDefault();\n    console.log(questions, year)\n\n    await fetch('https://insuranceapi-3o5t.onrender.com/api/motorClaimsYears', {\n      method: 'POST',\n      body: JSON.stringify({ questions: questions, year: year }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 201) {\n          setShowModal(false);\n          swal({\n            text: data.message,\n            type: \"success\",\n            icon: \"success\",\n            button: false\n          })\n          getclaimyear(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n\n        }\n        else {\n          setShowModal(false);\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\",\n            button: false\n          })\n          getclaimyear(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n      });\n  }\n\n\n\n  const [detailsbyid, setDetailsbyid] = useState([])\n\n\n  const getdetailsbyid = async (ParamValue) => {\n    setId(ParamValue)\n    console.log(ParamValue)\n    var requestOptions = {\n      method: 'GET',\n    };\n    await fetch(`https://insuranceapi-3o5t.onrender.com/api/motorClaimsYearssById?id=${ParamValue}`, requestOptions)\n      .then(response => response.json())\n      .then(result =>\n        setDetailsbyid(result.data)\n\n      )\n      .catch(error => console.log('error', error));\n\n    setVisibleedit(true);\n  }\n\n  const [imageurl, setImageurl] = useState(null);\n  const handleImagePreview = async (data) => {\n    setImageurl(data);\n  }\n\n  const [editquestions, setEditquestions] = useState('');\n  const [edityear, setEdityear] = useState('');\n\n\n  const updateclaimyears = async (e) => {\n    e.preventDefault();\n\n\n\n    await fetch(`https://insuranceapi-3o5t.onrender.com/api/motorClaimsYears?id=${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ questions: editquestions, year: edityear }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setVisibleedit(false)\n          swal({\n            text: data.message,\n            type: \"success\",\n            icon: \"success\",\n            button: false\n          })\n          getclaimyear(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          setVisibleedit(false)\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\",\n            button: false\n          })\n          getclaimyear(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n      });\n  }\n\n  const updatestatus = async (id, status) => {\n\n    let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/motorClaimsYears?id=${id}`, {\n      method: 'put',\n      body: JSON.stringify({ status: status }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    result = await result.json();\n    swal(\"Updated Succesfully\", \"\", \"success\");\n    getclaimyear(page, perPage)\n  }\n\n  const startFrom = (page - 1) * perPage;\n\n\n  return (\n    <>\n      <Container>\n        <div className=\"card mb-4\">\n          <div className=\"card-header\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <h4 className=\"card-title\">Claim years</h4>\n              </div>\n              {/* <div className=\"col-md-6\">\n                { masterpermission.usertype?.includes('create') ?\n                <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => setShowModal(true)}>Add Claim years</button>\n                : '' }\n              </div> */}\n            </div>\n          </div>\n          {/* <div className=\"card-header\" style={{ textAlign: 'right' }}>\n            { masterpermission.usertype?.includes('download') ?\n            <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={filePath} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n            : '' }\n            { masterpermission.usertype?.includes('upload') ?\n            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n            : '' }\n            { masterpermission.usertype?.includes('export') ?\n            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n            : '' }\n          </div> */}\n          <div className=\"card-body\">\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-dark\">\n                <tr className=\"table-info\">\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Questions</th>\n                  <th scope=\"col\">Year</th>\n\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  data?.length > 0 ?\n                    data.map((item, index) =>\n                      <tr key={index}>\n                        <td>{startFrom + index + 1}</td>\n                        <td>{item.questions}</td>\n                        <td>{item.year}</td>\n                        <td>\n                          {masterpermission.usertype?.includes('edit') && (\n                            <button className=\"btn btn-primary\" onClick={() => getdetailsbyid(item._id)}>Edit</button>\n                          )}\n                          {' '}\n                          {/* { masterpermission.usertype?.includes('delete') && (\n                            <>\n                            {\n                              item.status === true ?\n                                <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, false) }}>Deactivate</button> :\n                                <button className=\"btn btn-success\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, true) }}>Activate</button>\n                            }\n                            </>\n                          )} */}\n                        </td>\n                      </tr>\n                    ) : <tr>\n                      <td colSpan=\"6\">No Data Found</td>\n                    </tr>\n                }\n              </tbody>\n            </table>\n            <ReactPaginate\n              previousLabel={\"Previous\"}\n              nextLabel={\"Next\"}\n              breakLabel={\"...\"}\n              pageCount={pageCount}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={3}\n              onPageChange={handlePageClick}\n              containerClassName={\"pagination justify-content-end\"}\n              pageClassName={\"page-item\"}\n              pageLinkClassName={\"page-link\"}\n              previousClassName={\"page-item\"}\n              previousLinkClassName={\"page-link\"}\n              nextClassName={\"page-item\"}\n              nextLinkClassName={\"page-link\"}\n              breakClassName={\"page-item\"}\n              breakLinkClassName={\"page-link\"}\n              activeClassName={\"active\"}\n            />\n          </div>\n        </div>\n\n      </Container>\n      <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n        <CModalHeader onClose={() => setVisible(false)}>\n          <CModalTitle>Upload Excel File</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <div >\n            {/* <label className=\"form-label\"><strong>Upload Excel File</strong></label> */}\n            <input type=\"file\" className=\"form-control\" id=\"DHA\" defaultValue=\"\" required\n              onChange={(e) => setExcelfile(e.target.files[0])} />\n          </div>\n\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n            Close\n          </CButton>\n          <CButton color=\"primary\" onClick={collectExceldata} href={'/Viewtraveltype'}>Upload</CButton>\n        </CModalFooter>\n      </CModal>\n\n      <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Add claim years</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n\n                  <div className=\"card-body\">\n                    <form action=\"/\" method=\"POST\">\n                      <div className=\"row\">\n\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Add Question</strong></label>\n                          <input type='text' className=\"form-control\"\n                            name='question'\n                            placeholder='Enter Question'\n\n                            required\n                            autoComplete=\"off\"\n                            onChange={(e) => setQuestions(e.target.value)}\n                          />\n                        </div>\n\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Add year</strong></label>\n                          <input type='number' className=\"form-control\"\n                            name='year'\n                            placeholder='Enter year'\n\n                            required\n                            autoComplete=\"off\"\n                            onChange={(e) => setYear(e.target.value)}\n\n                          />\n                        </div>\n\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }} onClick={addclaimyears}>Submit</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal size='lg' show={visibleedit} onHide={() => setVisibleedit(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Claim Years</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n\n                  <div className=\"card-body\">\n                    <form >\n                      <div className=\"row\">\n\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Edit Question</strong></label>\n                          <input type='text' className=\"form-control\"\n                            name='question'\n                            placeholder='Enter Name'\n                            defaultValue={detailsbyid.questions}\n                            required\n                            autoComplete=\"off\"\n                            onChange={(e) => setEditquestions(e.target.value)}\n                            readOnly\n                          />\n                        </div>\n\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Edit Year</strong></label>\n                          <input type='number' className=\"form-control\"\n                            name='year'\n                            placeholder='Enter Designation'\n                            defaultValue={detailsbyid.year}\n                            required\n                            autoComplete=\"off\"\n                            onChange={(e) => setEdityear(e.target.value)}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }} onClick={updateclaimyears}>Submit</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default MotorClaimYears;"],"names":["MotorClaimYears","navigate","useNavigate","data","setData","useState","perPage","pageCount","setPageCount","page","setPage","excelfile","setExcelfile","usertype","setUsertype","usertype_status","setUsertypestatus","id","setId","visible","setVisible","showModal","setShowModal","visibleedit","setVisibleedit","masterpermission","setMasterpermission","useEffect","token","localStorage","getItem","undefined","_userdata$master_perm","getclaimyear","userdata","JSON","parse","master_permission","fetch","method","headers","then","response","json","slice","count","pages","Math","ceil","list","console","log","questions","setQuestions","year","setYear","detailsbyid","setDetailsbyid","imageurl","setImageurl","editquestions","setEditquestions","edityear","setEdityear","startFrom","_jsxs","_Fragment","children","_jsx","Container","className","scope","length","map","item","index","_masterpermission$use","includes","onClick","async","ParamValue","result","catch","error","getdetailsbyid","_id","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","type","defaultValue","required","onChange","target","files","CModalFooter","CButton","color","preventDefault","fd","FormData","append","body","status","swal","text","message","icon","button","setTimeout","title","href","Modal","size","show","onHide","Header","closeButton","Title","Body","action","name","placeholder","autoComplete","value","style","float","stringify","Footer","Button","variant","readOnly"],"sourceRoot":""}