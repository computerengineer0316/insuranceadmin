{"version":3,"file":"static/js/5293.b6a2a7c4.chunk.js","mappings":"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","sources":["views/Travel/travelplan/TravelTablePlan.js","views/Travel/travelplan/AddTravelPlan.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from 'react';\nimport Multiselect from \"multiselect-react-dropdown\";\n\nfunction TablePlan({ rowsData, deleteTableRows, handleChange, handleChange123 }) {\n    const [travel_cover_type, setTravelCoverType] = useState([]);\n    const [natureOfPlan, setNatureOfPlan] = useState([]);\n    const [TravelType, setTravelType] = useState([]);\n    const [TravelInsuranceFor, setTravelInsuranceFor] = useState([]);\n    const [companyList, setCompanyList] = useState([]);\n    const [countryList, setCountryList] = useState([]);\n    const [location, setLocation] = useState([]);\n    const [errmsg, setErrmsg] = useState({\n        status: false,\n        name: '',\n        index: ''\n    })\n\n    useEffect(() => {\n        company_list();\n        travel_cover_type_list();\n        NatureOfPlan();\n        TravelTypeList();\n        travel_insurance_for();\n        country_list();\n        locationList();\n    }, []);\n\n    const company_list = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/company_list`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setCompanyList(data.data);\n            });\n    }\n\n    const travel_cover_type_list = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/travelcovertype`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setTravelCoverType(data.data);\n            });\n    }\n\n    const NatureOfPlan = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getNatureOfPlan`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setNatureOfPlan(data.data);\n            });\n    }\n\n    const TravelTypeList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getTravelType`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setTravelType(data.data);\n            });\n    }\n\n    const travel_insurance_for = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getTravelInsuranceFor`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setTravelInsuranceFor(data.data);\n            });\n    }\n\n    const country_list = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getNationality`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setCountryList(data.data);\n            });\n    }\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n    const handleChange1 = (index, evnt, title) => {\n        handleChange123(index, evnt, title);\n    };\n    const validateInput = (e, index) => {\n        const inputValue = e.target.value;\n        const textPattern = /^[A-Za-z,]*$/;\n        if (!textPattern.test(inputValue)) {\n            setErrmsg({ status: true, name: e.target.name, index: index })\n            e.target.value = inputValue.replace(/[^a-zA-Z\\s,]/g, '');\n        } else {\n            setErrmsg({ status: false, name: e.target.name, index: index })\n        }\n    }\n    return (\n        rowsData.map((data, index) => {\n            return (\n                <tr key={index}>\n                    <td>\n                        <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                    </td>\n                    <td>\n                        <select className=\"form-control\" name=\"company_id\" onChange={(evnt) => (handleChange(index, evnt))}>\n                            <option value=\"\" hidden>Select Company</option>\n                            {companyList.map((item, index) => (\n                                <option key={index} value={item._id}>{item.company_name}</option>\n                            ))}\n                        </select>\n                    </td>\n                    <td>\n                        <select className=\"form-control\" name=\"plan_type\" onChange={(evnt) => (handleChange(index, evnt))}>\n                            <option value=\"\" hidden>Select Plan Type</option>\n                            {TravelInsuranceFor.map((item, index) => (\n                                <option key={index} value={item._id}>{item.travel_insurance_for}</option>\n                            ))}\n                        </select>\n                    </td>\n                    <td>\n                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} name=\"plan_name\" className=\"form-control\" placeholder=\"Enter Plan Name\" />\n                    </td>\n                    <td>\n                        <select className=\"form-control\" name=\"plan_category_id\" onChange={(evnt) => (handleChange(index, evnt))}>\n                            <option value=\"\" hidden>Select Cover Type</option>\n                            {travel_cover_type.map((item, index) => (\n                                <option key={index} value={item._id}>{item.travel_cover_type}</option>\n                            ))}\n                        </select>\n                    </td>\n                    <td>\n                        <select className=\"form-control\" name=\"nature_of_plan_id\" onChange={(evnt) => (handleChange(index, evnt))}>\n                            <option value=\"\" hidden>Select Nature Of Plan</option>\n                            {natureOfPlan.map((item, index) => (\n                                <option key={index} value={item._id}>{item.nature_of_plan_name}</option>\n                            ))}\n                        </select>\n                    </td>\n                    <td>\n                        <select className=\"form-control\" name=\"travel_type_id\" onChange={(evnt) => (handleChange(index, evnt))}>\n                            <option value=\"\" hidden>Select Travel Type</option>\n                            {TravelType.map((item, index) => (\n                                <option key={index} value={item._id}>{item.travel_type}</option>\n                            ))}\n                        </select>\n                    </td>\n                    <td>\n                        <Multiselect\n                            className=\"form-control\"\n                            options={countryList}\n                            onSelect={(evnt) => (handleChange1(index, evnt, 'country_name'))}\n                            onRemove={(evnt) => (handleChange1(index, evnt, 'country_name'))}\n                            displayValue=\"nationality_name\"\n                            showCheckbox={true}\n                        />\n                    </td>\n                    <td>\n                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} name=\"country_topup\" className=\"form-control\" placeholder=\"Enter Country Topup\" />\n                    </td>\n                    <td>\n                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} onInput={(e) => validateInput(e, index)} name=\"add_op_con_desc\" className=\"form-control\" placeholder=\"Enter Add Option Condition Description\" />\n                        {errmsg.status == true && errmsg.name == \"add_op_con_desc\" && errmsg.index == index ? <span style={{ color: 'red' }}>Text Only</span> : \"\"}\n                    </td>\n                    <td>\n                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} name=\"add_op_con_desc_topup\" className=\"form-control\" placeholder=\"Enter Topup (Add Option Condition Description)\" />\n                    </td>\n                    <td>\n                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} onInput={(e) => validateInput(e, index)} name=\"vat\" className=\"form-control\" placeholder=\"Enter Vat Able\" />\n                        {errmsg.status == true && errmsg.name == \"vat\" && errmsg.index == index ? <span style={{ color: 'red' }}>Text Only</span> : \"\"}\n                    </td>\n                    <td>\n                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} name=\"jdv_comm\" className=\"form-control\" placeholder=\"Enter JDV Commission\" />\n                    </td>\n                    <td>\n                        <td>\n                            <Multiselect\n                                options={location}\n                                selectedValues={location}\n                                onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                displayValue=\"label\"\n                                placeholder=\"Select Location\"\n                                closeOnSelect={false}\n                                avoidHighlightFirstOption={true}\n                                showCheckbox={true}\n                                style={{ chips: { background: \"#007bff\" } }}\n                                required\n                            />\n                        </td>\n                    </td>\n                </tr>\n            )\n        })\n    )\n}\n\nexport default TablePlan;","import React, { useEffect } from 'react';\nimport TablePlan from './TravelTablePlan';\nimport { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport swal from 'sweetalert';\n\nfunction AddPlan() {\n    const navigate = useNavigate();\n    const validations = {\n        company_id: 'Company Name',\n        plan_name: 'Plan Name',\n        plan_type: 'Travel Insurance For',\n        plan_category_id: 'Cover Type',\n        nature_of_plan_id: 'Nature Of Plan',\n        travel_type_id: 'Travel Type',\n        country_topup: 'Country Topup',\n        add_op_con_desc: 'Addition Option Condition Description',\n        add_op_con_desc_topup: 'Addition Option Condition Description Topup',\n        vat: 'Vat',\n        jdv_comm: 'JDV commission',\n    }\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        } else {\n            locationList();\n        }\n    }, []);\n\n    const [rowsData, setRowsData] = useState([])\n    const [location, setLocation] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            company_id: '',\n            plan_type: '',\n            plan_name: '',\n            plan_category_id: '',\n            nature_of_plan_id: '',\n            travel_type_id: '',\n            country_topup: '',\n            add_op_con_desc: '',\n            add_op_con_desc_topup: '',\n            vat: '',\n            jdv_comm: '',\n            location: location,\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n\n    const handleChange123 = (index, value, title) => {\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n    const handleSubmit = async () => {\n        const objectsWithEmptyValues = [];\n\n        rowsData.forEach((rowData, rowIndex) => {\n            const emptyKeys = Object.keys(rowData).filter((key) => {\n                const value = rowData[key];\n                if (typeof value === 'string' && value.trim() === '') {\n                    if (key === 'country_topup') {\n\n                        if (!rowData['country_name'] || !rowData['country_name']?.length) {\n\n                            return false;\n\n                        } else {\n\n                            return true;\n                        }\n\n                    }\n                    if (key === 'add_op_con_desc') {\n                        return false;\n                    }\n                    if (key === 'add_op_con_desc_topup' || key === 'vat') {\n                        if (rowData['add_op_con_desc'] === '') {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    }\n                    return true; // Include this key in emptyKeys\n\n                } else {\n                    return false; // Ignore this key - it is not empty\n                }\n            });\n\n            if (emptyKeys.length > 0) {\n                // Store information about the object and its empty keys\n                objectsWithEmptyValues.push({\n                    index: rowIndex,\n                    emptyKeys: emptyKeys,\n                });\n            }\n        });\n\n        if (objectsWithEmptyValues.length > 0) {\n\n            objectsWithEmptyValues.forEach((objectInfo) => {\n                const errval = objectInfo.emptyKeys[0];\n                swal({\n                    title: \"warning!\",\n                    text: `${validations[errval]} is required`,\n                    type: \"warning\",\n                    icon: \"warning\"\n                }).then(function () {\n                    return false;\n                });\n\n            });\n        } else {\n            const requestOptions =\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\n                },\n                body: JSON.stringify({ rowsData })\n            };\n            await fetch('https://insuranceapi-3o5t.onrender.com/api/addTravelPlan', requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status === 200) {\n                        swal({\n                            title: \"Success!\",\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\",\n                            button: false\n                        })\n                        navigate('/travel-plan')\n\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\",\n                            button: false\n                        })\n                        navigate('/travel-plan')\n\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                })\n                .catch(err => console.log(err))\n        }\n    }\n\n    return (\n        <div className=\"container mb-5\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4 className=\"card-title\">Add Travel Plan</h4>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <a href=\"/travel-plan\" className=\"btn btn-primary\" style={{ float: 'right' }}>Back</a>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                            <table className=\"table table-bordered\" style={{ width: \"3500px\" }}>\n                                <thead>\n                                    <tr>\n                                        <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                        <th>Company Name</th>\n                                        <th>Travel Insurance For</th>\n                                        <th>Plan Name</th>\n                                        <th>Cover Type</th>\n                                        <th>Nature Of Plan</th>\n                                        <th>Travel Type</th>\n                                        <th>Country</th>\n                                        <th>Fixed/Percentage/Reffered (Country)</th>\n                                        <th>Add Option Condition Description</th>\n                                        <th>Fixed/Percentage/Reffered (Add Option Condition Description)</th>\n                                        <th>Vat Able</th>\n                                        <th>JDV Commission</th>\n                                        <th>Location</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <TablePlan\n                                        rowsData={rowsData}\n                                        deleteTableRows={deleteTableRows}\n                                        handleChange={handleChange}\n                                        handleChange123={handleChange123}\n                                    />\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"card-footer\">\n                            <button className=\"btn btn-outline-success\" style={{ float: \"right\" }} onClick={handleSubmit}>Submit</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default AddPlan\n"],"names":["_ref","rowsData","deleteTableRows","handleChange","handleChange123","travel_cover_type","setTravelCoverType","useState","natureOfPlan","setNatureOfPlan","TravelType","setTravelType","TravelInsuranceFor","setTravelInsuranceFor","companyList","setCompanyList","countryList","setCountryList","location","setLocation","errmsg","setErrmsg","status","name","index","useEffect","company_list","travel_cover_type_list","NatureOfPlan","TravelTypeList","travel_insurance_for","country_list","locationList","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","handleChange1","evnt","title","validateInput","e","inputValue","target","test","replace","map","_jsxs","children","_jsx","className","onClick","onChange","hidden","item","company_name","type","placeholder","nature_of_plan_name","travel_type","Multiselect","options","onSelect","onRemove","displayValue","showCheckbox","onInput","style","color","selectedValues","closeOnSelect","avoidHighlightFirstOption","chips","background","required","navigate","useNavigate","validations","company_id","plan_name","plan_type","plan_category_id","nature_of_plan_id","travel_type_id","country_topup","add_op_con_desc","add_op_con_desc_topup","vat","jdv_comm","token","localStorage","getItem","undefined","setRowsData","loading","setLoading","href","float","overflowX","width","addTableRows","rowsInput","TablePlan","rows","splice","async","objectsWithEmptyValues","forEach","rowData","rowIndex","emptyKeys","Object","keys","filter","key","_rowData$country_name","trim","objectInfo","errval","swal","text","icon","requestOptions","body","JSON","stringify","message","button","setTimeout","catch","err","console","log"],"sourceRoot":""}