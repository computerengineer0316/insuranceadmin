{"version":3,"file":"static/js/5582.e3956257.chunk.js","mappings":"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","sources":["views/email_templates/ViewTemplateTypes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Modal, Button } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\n// import * as FileSaver from 'file-saver';\n// import * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\nimport axios from 'axios';\n\nconst ViewTemplateTypes = () => {\n    const navigate = useNavigate();\n    const [perPage] = useState(10);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [templateType, setTemplateType] = useState([]);\n    const [typeDetails, setTypeDetails] = useState([]);\n    const [id, setId] = useState([]);\n    const [showModal, setShowModal] = useState(false);\n    const [visible, setVisible] = useState(false);\n    const [location, setLocation] = useState([]);\n    const [defaultlocation, setDefaultLocation] = useState([]);\n    const [masterpermission, setMasterPermission] = useState([]);\n    useEffect(() => {\n\n        getTemplatetypes(page, perPage);\n\n    }, [])\n\n\n\n    const getTemplatetypes = async (page, perPage) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n            },\n        };\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/getEmailTypes?page=${page}&limit=${perPage}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data, \"result\");\n                const total = data.total;\n                const slice = total / perPage;\n                const pages = Math.ceil(slice);\n                setPageCount(pages);\n                const list = data.data;\n                console.log(list, \"list\");\n                setTemplateType(list);\n                // const list_len = list.length;\n                // for (let i = 0; i < list_len; i++) {\n                //   setTemplateType(list[i]);\n                // }\n            });\n    }\n\n    const handlesubmit = async (e) => {\n        e.preventDefault();\n\n        const data = new FormData(e.target);\n        const template_type = data.get('template_type');\n        await fetch('https://insuranceapi-3o5t.onrender.com/api/addEmailType', {\n            method: 'POST',\n            body: JSON.stringify({\n                name: template_type,\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n            }\n        }).then(response => {\n            const status = response.status; // Extract status here\n            return response.json().then((data) => ({\n                status: status, // Add status to the data object\n                data: data\n            }));\n        })\n            .then(data => {\n                console.log(data);\n                if (data.status == 201) {\n\n                    swal({\n                        text: \"Template Type Updated Successfully!\",\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    });\n                    setShowModal(false);\n                    getTemplatetypes(page, perPage);\n                    setTimeout(() => {\n                        swal.close();\n                    }, 2000);\n                } else {\n                    swal({\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                    });\n                }\n            })\n\n    }\n\n    const detailsbyid = (ParamValue) => {\n        setId(ParamValue);\n        const requestOptions = {\n            method: \"get\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getEmailType/${ParamValue}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data, \"result by id\");\n                setTypeDetails(data.data);\n                setVisible(true);\n            });\n    }\n\n\n\n    const updateReasonType = async (e) => {\n        e.preventDefault();\n        const data = new FormData(e.target);\n        const template_type = data.get('template_type');\n\n        console.log(template_type);\n        console.log(id);\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/editEmailType/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                oldname: typeDetails.name,\n                name: template_type,\n                _id: id\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            }\n        }).then(res => res.json())\n            .then(data => {\n                console.log(data);\n                if (data.status == 200) {\n                    swal({\n                        text: \"Template Type Updated Successfully!\",\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    });\n                    setVisible(false);\n                    getTemplatetypes(page, perPage);\n                    setTimeout(() => {\n                        swal.close();\n                    }\n                        , 1000);\n                } else {\n                    swal({\n                        text: \"Something went wrong!\",\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    });\n                    setTimeout(() => {\n                        swal.close();\n                    }\n                        , 1000);\n                }\n            })\n    }\n\n\n    const updatestatus = async (id, status) => {\n        try {\n            await fetch('https://insuranceapi-3o5t.onrender.com/api/update_templateType', {\n                method: 'POST',\n                body: JSON.stringify({\n                    reason_status: status,\n                    ParamValue: id,\n                }),\n                headers: {\n\n                    \"Content-Type\": \"application/json\"\n                }\n            }).then((data) => {\n                if (data.status == 200) {\n                    console.log(data, \"response data>>>>>>>>>>\")\n                    setShowModal(false)\n                    swal({\n                        title: \"Status Updated Successfully!\",\n                        type: 'success',\n                        icon: 'success',\n                        button: false,\n                    })\n                    getTemplatetypes(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                } else {\n                    setShowModal(false)\n                    swal({\n                        title: \"Something went wrong!\",\n                        type: 'error',\n                        icon: 'error',\n                        button: false,\n                    })\n                    getTemplatetypes(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteEmailType/${id}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200) {\n                    swal({\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getTemplatetypes(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getTemplatetypes(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n\n            })\n    }\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        getTemplatetypes(selectedPage + 1, perPage);\n    };\n\n    const startFrom = (page - 1) * perPage + 1;\n\n    return (\n        <>\n            <Container>\n                <div className=\"card mb-4\">\n                    <div className=\"card-header\">\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <h4 className=\"card-title\">Template Types</h4>\n                            </div>\n                            <div className=\"col-md-6\">\n\n                                <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => setShowModal(true)}>Add Types</button>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"card-header\" style={{ textAlign: 'right' }}>\n\n                    </div>\n                    <div className=\"card-body\">\n                        <table className=\"table table-bordered\">\n                            <thead className=\"thead-dark\">\n                                <tr className=\"table-info\">\n                                    <th scope=\"col\">#</th>\n                                    <th scope=\"col\">Type</th>\n                                    <th scope=\"col\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    templateType?.length > 0 ?\n                                        templateType.map((item, index) =>\n                                            <tr key={index}>\n                                                <td>{startFrom + index + 1}</td>\n                                                <td>{item.name}</td>\n                                                <td>\n                                                    <button className=\"btn btn-primary\" onClick={() => detailsbyid(item._id)}>Edit</button>{' '}\n                                                    <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                                                </td>\n                                            </tr>\n                                        ) : <tr>\n                                            <td colSpan=\"6\">No Data Found</td>\n                                        </tr>\n                                }\n                            </tbody>\n                        </table>\n                        <ReactPaginate\n                            previousLabel={\"Previous\"}\n                            nextLabel={\"Next\"}\n                            breakLabel={\"...\"}\n                            pageCount={pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={3}\n                            onPageChange={handlePageClick}\n                            containerClassName={\"pagination justify-content-end\"}\n                            pageClassName={\"page-item\"}\n                            pageLinkClassName={\"page-link\"}\n                            previousClassName={\"page-item\"}\n                            previousLinkClassName={\"page-link\"}\n                            nextClassName={\"page-item\"}\n                            nextLinkClassName={\"page-link\"}\n                            breakClassName={\"page-item\"}\n                            breakLinkClassName={\"page-link\"}\n                            activeClassName={\"active\"}\n                        />\n                    </div>\n                </div>\n            </Container>\n            <CModal size='lg' visible={showModal} onHide={() => setShowModal(false)}>\n                <CModalHeader onClose={() => setShowModal(false)} >\n                    <CModalTitle>Add Template Type</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={handlesubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n\n                                                    <label className=\"form-label\"><strong>Add Type</strong></label>\n                                                    <input type='text' className=\"form-control\"\n                                                        name='template_type'\n                                                        placeholder=\"Enter Template Type\"\n                                                        defaultValue=\"\"\n                                                        required\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </CButton>\n                </CModalFooter>\n            </CModal>\n\n            <Modal size='lg' show={visible} onHide={() => setVisible(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Template Type</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updateReasonType}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n\n                                                    <label className=\"form-label\"><strong>Edit Type</strong></label>\n                                                    <input type='text' className=\"form-control\"\n                                                        name='template_type'\n                                                        placeholder='Template Type'\n                                                        defaultValue={typeDetails?.name}\n                                                        required\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setVisible(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n\nexport default ViewTemplateTypes"],"names":["ViewTemplateTypes","useNavigate","perPage","useState","pageCount","setPageCount","page","setPage","templateType","setTemplateType","typeDetails","setTypeDetails","id","setId","showModal","setShowModal","visible","setVisible","location","setLocation","defaultlocation","setDefaultLocation","masterpermission","setMasterPermission","useEffect","getTemplatetypes","async","requestOptions","method","headers","localStorage","getItem","fetch","then","response","json","data","console","log","slice","total","pages","Math","ceil","list","startFrom","_jsxs","_Fragment","children","_jsx","Container","className","style","float","onClick","textAlign","scope","length","map","item","index","name","detailsbyid","ParamValue","_id","window","confirm","status","swal","text","message","icon","button","setTimeout","title","deleteItem","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","size","onHide","CModalHeader","onClose","CModalTitle","CModalBody","action","onSubmit","preventDefault","template_type","FormData","target","get","body","JSON","stringify","type","placeholder","defaultValue","required","CModalFooter","CButton","variant","Modal","show","Header","closeButton","Title","Body","oldname","res","Footer","Button"],"sourceRoot":""}