{"version":3,"file":"static/js/3009.d560d00b.chunk.js","mappings":"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","sources":["views/area-of-registration/AddAreaOfRegistration.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\n\nconst AddAreaOfRegistration = () => {\n    const navigate = useNavigate();\n    const [location, setLocation] = useState([]);\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            locationList();\n        }\n    }, []);\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n\n    // const handleSubmit = (e) => {\n    //     e.preventDefault();\n    //     const data = new FormData(e.target);\n    //     const area_of_registration_name = data.get('area_of_registeration_name');\n    //     const area_of_registration_location = selectedOption;\n    //     const area_of_registration_location_len = area_of_registration_location.length;\n    //     const area_of_registration_location_str = [];\n    //     for(let i = 0; i < area_of_registration_location_len; i++)\n    //     {\n    //         area_of_registration_location_str.push(area_of_registration_location[i].value);\n    //     }\n    //     const area_of_registration_status = data.get('status');\n    //     const requestOptions = {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //         },\n    //         body: JSON.stringify({\n    //             area_of_registration_name: area_of_registration_name,\n    //             area_of_registration_location: area_of_registration_location_str.toString(),\n    //             area_of_registration_status: area_of_registration_status\n    //         })\n    //     };\n    //     fetch(`https://insuranceapi-3o5t.onrender.com/api/add_area_of_registeration`, requestOptions)\n    //         .then(response => response.json())\n    //         .then(data => {\n    //             if (data.status === 200)\n    //             {\n    //                 swal({\n    //                     title: \"Success!\",\n    //                     text: data.message,\n    //                     icon: \"success\",\n    //                     button: \"Ok\",\n    //                 }).then(function() {\n    //                     navigate('/area-of-registration');\n    //                 });\n    //             }\n    //             else\n    //             {\n    //                 swal({\n    //                     title: \"Error!\",\n    //                     text: data.message,\n    //                     icon: \"error\",\n    //                     button: \"Ok\",\n    //                 }).then(function() {\n    //                     navigate('/area-of-registration');\n    //                 });\n    //             }\n    //         });\n    // }\n\n\n    // area_of_registeration_name\n\n\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n\n\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            area_of_registration_name: '',\n            location: location\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n\n\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        console.log(value, \"multiselect value\")\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n\n    const handleSubmit = () => {\n\n        try {\n\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.area_of_registration_name === '' || row.location.length == 0;\n            });\n\n            if (hasEmptyFields) {\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\",\n                    button: false\n                })\n                return;\n            }\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(rowsData)\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/add_area_of_registeration`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status == 200) {\n                        swal({\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\",\n                            button: false\n\n                        })\n                        navigate('/area-of-registration')\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\",\n                            button: false\n                        })\n                        navigate('/area-of-registration')\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                });\n        }\n        catch (err) {\n            console.log(err)\n        }\n\n    }\n\n\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <h4 className=\"card-title\">Add Area Of Registration</h4>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                            <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                <thead>\n                                    <tr>\n                                        <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                        <th>Area Of Registration Name</th>\n                                        <th>Location</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        rowsData.map((data, index) => {\n                                            return (\n                                                <tr key={index} >\n                                                    <td>\n                                                        <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                    </td>\n                                                    <td>\n                                                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"area_of_registration_name\" placeholder=\"Area Of Registration Name\" autoComplete=\"off\" required />\n\n                                                    </td>\n                                                    <td>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={location}\n                                                            displayValue=\"label\"\n                                                            onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                            onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                            placeholder=\"Select Location\"\n                                                            showCheckbox={true}\n                                                            required\n                                                        />\n                                                    </td>\n\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"card-footer\">\n                            <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddAreaOfRegistration\n"],"names":["AddAreaOfRegistration","navigate","useNavigate","location","setLocation","useState","useEffect","token","localStorage","getItem","undefined","locationList","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","rowsData","setRowsData","errors","setErrors","handleChange1","index","title","console","log","rowsInput","_jsx","className","children","_jsxs","style","overflowX","width","onClick","addTableRows","area_of_registration_name","map","rows","splice","deleteTableRows","type","onChange","evnt","handleChange","name","target","trim","prevErrors","placeholder","autoComplete","required","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","handleSubmit","some","row","swal","text","icon","button","requestOptions","body","JSON","stringify","status","message","setTimeout","err"],"sourceRoot":""}