{"version":3,"file":"static/js/4207.8252ff32.chunk.js","mappings":"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","sources":["views/motor-model-details/AddMotormodeldetails.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\nimport Select from 'react-select';\nimport Swal from 'sweetalert2';\n\nconst AddMotormodeldetails = () => {\n    const navigate = useNavigate();\n    const [motor_model, setMotormodel] = useState([]);\n    const [make_motor, setMakeMotor] = useState([]);\n    const [location, setLocation] = useState([]);\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [motor_model_detail_name, setMotorModelDetailName] = useState('');\n    const [motor_model_detail_model_id, setMotorModelDetailModelId] = useState('');\n    const [motor_model_detail_status, setMotorModelDetailStatus] = useState('');\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n    const [bodytype, setBodytype] = useState([]);\n    const [selected, setSelected] = useState(null)\n    const [modelList, setModelList] = useState([]);\n    // const [defaultmodelmotor,setDefaultModelMotor]= useState('')\n\n    // const [state, setState] = useState({\n    //     make_motor : '',\n    // })\n\n    useEffect(() => {\n\n        getlistMotormodel();\n        getlistMakeMotor();\n        locationList();\n        bodytypelist();\n    }, [])\n\n    const errormsg = {\n        body_type: \"Body Type\",\n        cylinder: \"Cylinder\",\n        dep: \"Depreciation Up To Years\",\n        location: \"Location\",\n        max: \"Max Car Value\",\n        max_dep: \"Max Depreciation\",\n        min: \"Min Car Value\",\n        min_dep: \"Min Depreciation\",\n        motor_model_detail_id: \"Motor Model\",\n        motor_model_detail_name: \"Motor model Name\",\n        motor_model_make_id: \"Make Motor\",\n        start_year: \"Start Year\"\n    }\n\n\n\n\n\n    const getlistMotormodel = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/get_model_motor_name', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setMotormodel(data.data);\n            });\n    }\n    const getlistMakeMotor = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/getlistMakeMotor', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setMakeMotor(data.data);\n            });\n    }\n    const bodytypelist = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/get_body_type_list', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data.data, \">>>>> body types\")\n                setBodytype(data.data);\n            });\n    }\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        try {\n\n            for (let i = 0; i < rowsData.length; i++) {\n                for (const key in rowsData[i]) {\n                    if (rowsData[i].hasOwnProperty(key)) {\n                        const val = rowsData[i][key]\n                        if (!val && key != \"discontinution_year\") {\n                            Swal.fire({\n                                title: 'warning',\n                                text: `${errormsg[key]}  is required`,\n                                icon: 'warning',\n                                confirmButtonText: 'Ok'\n                            })\n                            return;\n                        } else {\n                            continue;\n                        }\n                    }\n                }\n\n            }\n            console.log(rowsData, \">>>>>>>>>>rowsData\")\n\n\n\n            // const hasEmptyFields = rowsData.map((row) => {\n            //     return row.motor_model_detail_name.trim() == '' || !row.motor_model_detail_id || row.start_year.trim() == '' || !row.body_type || !row.cylinder || row.min.trim() == '' || row.max.trim() == '' || row.dep.trim() == '' || row.min_dep.trim() == '' || row.max_dep.trim() == '' || row.discontinution_year.trim() == '' || !row.location;\n            // });\n            // console.log(hasEmptyFields,\"empty feilds\")\n            // if (hasEmptyFields) {\n            //     swal({\n            //         title: \"Warning!\",\n            //         text: \"Please fill in all fields for each row.\",\n            //         type: \"warning\",\n            //         icon: \"warning\"\n            //     });\n            //     return; // Exit the function if there are empty fields\n            // }\n\n            console.log(rowsData, \">>>>>>>>>>rowsData\")\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(rowsData)\n            };\n\n            fetch('https://insuranceapi-3o5t.onrender.com/api/add_Motor_model_details', requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status == 200) {\n                        swal({\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\",\n                            button: false\n                        })\n                        navigate('/ViewMotorModelDetails')\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\",\n                            button: false\n                        })\n                        navigate('/AddMotorModelDetails')\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n\n                    }\n                });\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            motor_model_detail_name: '',\n            motor_model_detail_id: \"\",\n            motor_model_make_id: make_motor[0]?._id,\n            start_year: '',\n            body_type: bodytype[0]?._id,\n            cylinder: '',\n            min: '',\n            max: '',\n            dep: '',\n            min_dep: '',\n            max_dep: '',\n            discontinution_year: '',\n            location: location,\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        const modelListData = [...modelList]\n        modelListData.splice(index, 1)\n        rows.splice(index, 1)\n        setRowsData(rows)\n        setModelList(modelListData)\n\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n        // if(name == \"motor_model_detail_id\"){\n        //     setDefaultModelMotor(value)\n        // }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n    const handleMotorChange = (index, event) => {\n        const modelmotor = event.target.value;\n        console.log(modelmotor, \">>>>\")\n        const { name, value } = event.target\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/modelmotor/${modelmotor}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const motormodeldt = data.data;\n\n                const motormodel_len = motormodeldt.length;\n                // setDefaultModelMotor(motormodeldt[0]?._id)\n                console.log(motormodeldt[0]?._id, \">>>>>>>>modelMotorid\")\n                const motormodel_list = [];\n                for (let i = 0; i < motormodel_len; i++) {\n                    const motormodel_obj = { label: motormodeldt[i].motor_model_name, value: motormodeldt[i]._id };\n                    motormodel_list.push(motormodel_obj);\n                }\n                if (modelList.length > 0) {\n                    const newModelist = [...modelList]\n                    newModelist.splice(index, 1, motormodel_list)\n                    setModelList(newModelist)\n                }\n                else {\n                    const newModelist = [...modelList]\n                    newModelist[index] = motormodel_list;\n                    setModelList(newModelist)\n                }\n            });\n    }\n\n    return (\n        <>\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"card\">\n                            <div className=\"card-header\">\n                                <h4 className=\"card-title\">Add Motor Model details</h4>\n                            </div>\n                            <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                                <table className=\"table table-bordered\" style={{ width: \"1700px\" }}>\n                                    <thead>\n                                        <tr>\n                                            <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                            <th>Motor Model details</th>\n                                            <th>Make Motor</th>\n                                            <th>Motor Models</th>\n                                            <th>Start Year</th>\n                                            <th>Body Type</th>\n                                            <th>Cylinder</th>\n                                            <th>Min Car</th>\n                                            <th>Max Car</th>\n                                            <th>Depreciation up to years</th>\n                                            <th>Min Depreciation up to years</th>\n                                            <th>Max Depreciation up to years</th>\n                                            <th>Discontinution Year</th>\n                                            <th>Location</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            rowsData.map((data, index) => {\n                                                return (\n                                                    <tr key={index} >\n                                                        <td>\n                                                            <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"motor_model_detail_name\" placeholder=\"Model Motor Name\" autoComplete=\"off\" />\n\n                                                        </td>\n                                                        <td>\n                                                            <select className=\"form-control\" defaultValue={make_motor[0]?._id} onChange={(evnt) => (handleMotorChange(index, evnt))} name=\"motor_model_make_id\">\n                                                                {make_motor?.map((item, indx) => {\n                                                                    return (\n                                                                        <option key={indx} value={item._id}>{item.make_motor_name}</option>\n\n                                                                    )\n                                                                })}\n                                                            </select>\n                                                        </td>\n                                                        <td>\n                                                            <select className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} name=\"motor_model_detail_id\">\n                                                                <option hidden>Select Motor model</option>\n                                                                {modelList[index]?.map((item, indx) => {\n                                                                    return (\n                                                                        <option key={indx} value={item.value}>{item.label}</option>\n                                                                    )\n                                                                })}\n                                                            </select>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} placeholder=\"Start Year\" name=\"start_year\" autoComplete=\"off\" />\n                                                        </td>\n                                                        <td>\n                                                            <select className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} name=\"body_type\">\n\n                                                                {bodytype?.map((item, indx) => {\n                                                                    return (\n                                                                        <option selected={indx == 0 ? true : false} key={indx} value={item._id}>{item.body_type_name}</option>\n                                                                    )\n                                                                })}\n                                                            </select>\n                                                        </td>\n                                                        <td>\n                                                            <select className=\"form-control\" name=\"cylinder\" onChange={(evnt) => (handleChange(index, evnt))}>\n                                                                <option>Select Cylinder</option>\n                                                                <option value=\"2\">2</option>\n                                                                <option value=\"4\">4</option>\n                                                                <option value=\"6\">6</option>\n                                                                <option value=\"8\">8</option>\n                                                                <option value=\"10\">10</option>\n                                                                <option value=\"12\">12</option>\n                                                            </select>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} placeholder=\"Min\" name=\"min\" autoComplete=\"off\" />\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} placeholder=\"Max\" name=\"max\" autoComplete=\"off\" />\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} placeholder=\"Depreciation up to years\" name=\"dep\" autoComplete=\"off\" />\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} placeholder=\"Min Depreciation up to years\" name=\"min_dep\" autoComplete=\"off\" />\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} placeholder=\"Max Depreciation up to years\" name=\"max_dep\" autoComplete=\"off\" />\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} placeholder=\"Discontinution Year\" name=\"discontinution_year\" autoComplete=\"off\" />\n                                                        </td>\n                                                        <td>\n                                                            <Multiselect\n                                                                options={location}\n                                                                selectedValues={location}\n                                                                displayValue=\"label\"\n                                                                onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                placeholder=\"Select Location\"\n                                                                showCheckbox={true}\n                                                                required\n                                                            />\n                                                        </td>\n\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport default AddMotormodeldetails"],"names":["AddMotormodeldetails","navigate","useNavigate","motor_model","setMotormodel","useState","make_motor","setMakeMotor","location","setLocation","selectedOption","setSelectedOption","motor_model_detail_name","setMotorModelDetailName","motor_model_detail_model_id","setMotorModelDetailModelId","motor_model_detail_status","setMotorModelDetailStatus","rowsData","setRowsData","errors","setErrors","bodytype","setBodytype","selected","setSelected","modelList","setModelList","useEffect","getlistMotormodel","getlistMakeMotor","locationList","bodytypelist","errormsg","body_type","cylinder","dep","max","max_dep","min","min_dep","motor_model_detail_id","motor_model_make_id","start_year","fetch","method","headers","then","response","json","data","console","log","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","handleChange","index","evnt","name","target","rowsInput","handleChange1","title","_jsx","_Fragment","children","className","_jsxs","style","overflowX","width","onClick","addTableRows","_make_motor$","_bodytype$","discontinution_year","map","_make_motor$2","_modelList$index","rows","modelListData","splice","deleteTableRows","type","onChange","placeholder","autoComplete","defaultValue","handleMotorChange","event","modelmotor","_motormodeldt$","motormodeldt","motormodel_len","motormodel_list","motormodel_obj","motor_model_name","newModelist","item","indx","make_motor_name","hidden","body_type_name","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","required","e","preventDefault","key","hasOwnProperty","Swal","text","icon","confirmButtonText","requestOptions","body","JSON","stringify","status","swal","message","button","setTimeout","error"],"sourceRoot":""}