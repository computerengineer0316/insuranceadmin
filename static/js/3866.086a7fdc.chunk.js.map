{"version":3,"file":"static/js/3866.086a7fdc.chunk.js","mappings":"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","sources":["views/Medical/MedicalPlan/StandardUnderwriting/StandardConditions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { Modal, Button } from 'react-bootstrap';\nimport filePath from '../../../../webroot/sample-files/Standard_Underwritiong_condition_sample.xlsx';\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport ReactPaginate from \"react-paginate\";\nimport swal from 'sweetalert';\nimport Multiselect from 'multiselect-react-dropdown';\nconst StandardUnderwrinting = () => {\n    const navigate = useNavigate();\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            geTableBenefits(page, perPage);\n            exportlistdata();\n            locationList();\n        }\n    }, []);\n\n    const [excelfile, setExcelfile] = useState(\"\");\n    const [perPage] = useState(5);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [standardConditions, setStandardConditions] = useState([]);\n    const [visible, setVisible] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [editshowModal, setEditShowModal] = useState(false);\n    const [standardConditionId, setStandardConditionId] = useState('');\n    const [standardConditionValues, setStandardConditionValues] = useState({});\n    const [location, setLocation] = useState([]);\n    const [selectedLocation, setDefaultLocation] = useState([]);\n\n    const geTableBenefits = async (page, perPage) => {\n        setStandardConditions([]);\n        const requestOptions =\n        {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_standard_Underwriting_condition?page=${page}&limit=${perPage}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const total = data.total;\n                const slice = total / perPage;\n                const pages = Math.ceil(slice);\n                setPageCount(pages);\n                setStandardConditions(data.data);\n            });\n    }\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n\n                setLocation(location_list);\n            });\n    }\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        geTableBenefits(selectedPage + 1, perPage);\n    };\n\n    const updatestatus = async (id, status) => {\n        let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/update_standard_condition_status', {\n            method: 'post',\n            body: JSON.stringify({ id, status }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        result = await result.json();\n        swal(\"Updated Succesfully\", \"\", \"success\");\n        geTableBenefits(page, perPage)\n    }\n\n    const StandardUnderwritingCondition = async (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        const standard_label = formData.get('standard_label');\n        const description = formData.get('description');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ standard_label, description, location: selectedLocation }),\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/add_standard_Underwriting_condition`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setShowModal(false);\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n\n    const updateSubmit = (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        const standard_label = formData.get('standard_label');\n        const description = formData.get('description');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ standard_label, description, location: selectedLocation, standardConditionId }),\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/update_standard_Underwriting_condition`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setEditShowModal(false);\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setEditShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n    const [exportlist, setExportlist] = useState([]);\n    const exportlistdata = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/get_standard_Underwriting_condition', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setExportlist(data.data);\n            });\n    }\n    const fileType = 'xlsx'\n    const exporttocsv = () => {\n        const updatedData = exportlist.map((item, index) => {\n            return {\n\n                'Feature': item.feature,\n                'Description': item.description,\n            }\n        })\n        const ws = XLSX.utils.json_to_sheet(updatedData);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n        const newdata = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(newdata, \"standard-underwriting-conditions\" + \".xlsx\")\n    }\n\n    const collectExceldata = async (e) => {\n        e.preventDefault()\n        const fd = new FormData()\n        fd.append('file', excelfile)\n        let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_standard_condition_status_excel\",\n            {\n                method: \"POST\",\n                body: fd,\n            });\n        result = await result.json();\n        if (result.status == 200) {\n            setVisible(!visible)\n            swal({\n                text: result.message,\n                type: \"success\",\n                icon: \"success\",\n                button: false,\n            })\n            geTableBenefits(page, perPage)\n\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n        else {\n            setVisible(!visible)\n            swal({\n                title: \"Error!\",\n                text: result.message,\n                type: \"error\",\n                icon: \"error\",\n                button: \"ok\",\n            })\n            geTableBenefits(page, perPage)\n\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n\n    }\n\n    const detailsbyid = async (ParamValue) => {\n        setStandardConditionId(ParamValue)\n        const requestOptions = {\n            method: \"post\",\n            body: JSON.stringify({ ParamValue }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_standard_Underwriting_conditionbyid`, requestOptions);\n        result = await result.json();\n        console.log(result.data, \"result.data\")\n        const locs = result.data[0].location\n        const locs_len = locs.length;\n        const locs_list = [];\n        for (let i = 0; i < locs_len; i++) {\n            const locs_obj = { label: locs[i].location_name, value: locs[i]._id };\n            locs_list.push(locs_obj);\n        }\n        setStandardConditionValues(result.data[0]);\n        setDefaultLocation(locs_list);\n\n        setEditShowModal(true);\n    };\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMedicalMaster/?id=${id}&type=standardConditions`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n\n            })\n    }\n    const AddStandardCondition = () => {\n        navigate(\"/AddStandardConditions\")\n    }\n    const startFrom = (page - 1) * perPage;\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card \">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4 className=\"card-title\">Additional Conditions</h4>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddStandardCondition(true)}>Add Additional Condition</button>\n                                </div>\n                            </div>\n                        </div>\n                        {/* <div className=\"card-header\" style={{ textAlign: 'right' }}>\n                            <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={filePath} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n                        </div> */}\n                        <div className=\"card-body\">\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th><strong>#</strong></th>\n                                        <th><strong>Feature</strong></th>\n                                        <th><strong>Description</strong></th>\n                                        <th><strong>Location</strong></th>\n                                        <th><strong>Action</strong></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {standardConditions?.length > 0 ?\n                                        standardConditions?.map((item, index) =>\n                                            <tr key={index}>\n                                                <td>{startFrom + index + 1}</td>\n                                                <td>{item.feature}</td>\n                                                <td>{item.description}</td>\n                                                <td>{item.location?.map((val) => val.location_name)?.join(\", \")}</td>\n                                                <td>\n                                                    <button className=\"btn btn-primary\" onClick={() => detailsbyid(item._id)}>Edit</button>&nbsp;&nbsp;\n                                                    {\n                                                        item.status === 1 ?\n                                                            <button className=\"btn btn-danger mr-5\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                                            <button className=\"btn btn-success mr-5\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                                                    }\n                                                    <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n\n                                                </td>\n                                            </tr>\n                                        ) : <tr>\n                                            <td colSpan=\"4\">No Data Found</td>\n                                        </tr>\n                                    }\n                                </tbody>\n                            </table>\n                            <ReactPaginate\n                                previousLabel={\"Previous\"}\n                                nextLabel={\"Next\"}\n                                breakLabel={\"...\"}\n                                pageCount={pageCount}\n                                marginPagesDisplayed={2}\n                                pageRangeDisplayed={3}\n                                onPageChange={handlePageClick}\n                                containerClassName={\"pagination justify-content-end\"}\n                                pageClassName={\"page-item\"}\n                                pageLinkClassName={\"page-link\"}\n                                previousClassName={\"page-item\"}\n                                previousLinkClassName={\"page-link\"}\n                                nextClassName={\"page-item\"}\n                                nextLinkClassName={\"page-link\"}\n                                breakClassName={\"page-item\"}\n                                breakLinkClassName={\"page-link\"}\n                                activeClassName={\"active\"}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                    <CModalTitle>Upload Excel File</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div>\n                        <input type=\"file\" className=\"form-control\" onChange={(e) => setExcelfile(e.target.files[0])} required />\n                    </div>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setVisible(false)}>Close</CButton>\n                    <CButton color=\"primary\" onClick={collectExceldata}>Upload</CButton>\n                </CModalFooter>\n            </CModal>\n\n            <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Standard Condition</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={StandardUnderwritingCondition}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Standard  Conditions</strong></label>\n                                                        <input type='text' className=\"form-control\" name='standard_label' placeholder=\"Enter Standard Underwriting Condition Feature\" autoComplete='off' required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Additional Condition Description</strong></label>\n                                                        <input type='text' className=\"form-control\" name='description' placeholder=\"Enter Standard Underwriting Condition Description\" autoComplete='off' required />\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal size='lg' show={editshowModal} onHide={() => setEditShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Additional Condition</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updateSubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Standard  Conditions</strong></label>\n                                                        <input type='text' className=\"form-control\" name='standard_label' placeholder='Enter Condition Label' defaultValue={standardConditionValues.feature} autoComplete='off' required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Additional Condition Description</strong></label>\n                                                        <input type='text' className=\"form-control\" name='description' placeholder='Enter Condition Description' defaultValue={standardConditionValues.description} autoComplete='off' required />\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className='row'>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group\">\n                                                        <label>Location</label>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={selectedLocation}\n                                                            onSelect={(evnt) => (setDefaultLocation(evnt))}\n                                                            onRemove={(evnt) => (setDefaultLocation(evnt))}\n                                                            displayValue=\"label\"\n                                                            placeholder=\"Select Location\"\n                                                            closeOnSelect={false}\n                                                            avoidHighlightFirstOption={true}\n                                                            showCheckbox={true}\n                                                            style={{ chips: { background: \"#007bff\" } }}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary submit_all\" style={{ float: \"right\" }}>Update</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setEditShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n        </div>\n    )\n}\n\nexport default StandardUnderwrinting\n"],"names":["StandardUnderwrinting","navigate","useNavigate","useEffect","token","localStorage","getItem","undefined","geTableBenefits","page","perPage","exportlistdata","locationList","excelfile","setExcelfile","useState","pageCount","setPageCount","setPage","standardConditions","setStandardConditions","visible","setVisible","showModal","setShowModal","editshowModal","setEditShowModal","standardConditionId","setStandardConditionId","standardConditionValues","setStandardConditionValues","location","setLocation","selectedLocation","setDefaultLocation","async","fetch","method","headers","then","response","json","data","slice","total","pages","Math","ceil","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","updatestatus","id","status","result","body","JSON","stringify","swal","exportlist","setExportlist","startFrom","_jsxs","className","children","_jsx","style","float","onClick","map","item","index","_item$location","_item$location$map","feature","description","val","join","ParamValue","requestOptions","console","log","locs","locs_len","locs_list","locs_obj","detailsbyid","window","confirm","title","text","message","icon","button","setTimeout","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","type","onChange","target","files","required","CModalFooter","CButton","color","preventDefault","fd","FormData","append","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","formData","standard_label","get","name","placeholder","autoComplete","Footer","Button","variant","defaultValue","Multiselect","options","selectedValues","onSelect","evnt","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","chips","background"],"sourceRoot":""}