{"version":3,"file":"static/js/2049.a365a2ed.chunk.js","mappings":"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","sources":["views/Medical/medical_weight_type/Viewmedicalweighttype.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Modal, Button } from 'react-bootstrap';\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport filePath from '../../../webroot/sample-files/medical-weight-type.xlsx'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\n\nconst Viewmedicalweighttype = () => {\n  const navigate = useNavigate();\n  const [data, setData] = useState([]);\n  const [perPage] = useState(5);\n  const [pageCount, setPageCount] = useState(0);\n  const [page, setPage] = useState(1);\n  const [excelfile, setExcelfile] = useState(\"\")\n  const [location, setLocation] = useState([]);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [medical_weight_type, setMedicalweighttype] = useState('');\n  const [medical_weight_type_status, setMedicalweighttypestatus] = useState();\n  const [medical_weight_type_id, setMedicalweighttypeid] = useState();\n  const [visible, setVisible] = useState(false)\n  const [showModal, setShowModal] = useState(false);\n  const [visibleedit, setVisibleedit] = useState(false);\n  const [medicalpermission, setMedicalpermission] = useState([]);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    }\n    else {\n      getmedicalweighttype(page, perPage);\n      locationList();\n      exportlistdata();\n      const userdata = JSON.parse(localStorage.getItem('user'));\n      const medical_permission = userdata?.medical_permission?.[0] || {};\n      setMedicalpermission(medical_permission);\n    }\n  }, [])\n\n\n  const getmedicalweighttype = async (page, perPage) => {\n    setData([]);\n\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/get_medical_weight_type?page=${page}&limit=${perPage}`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const total = data.total;\n        const slice = total / perPage;\n        const pages = Math.ceil(slice);\n        setPageCount(pages);\n        const list = data.data;\n        console.log(list, \">>>>>>>>> datalist\")\n        setData(list)\n\n      });\n  }\n  const [exportlist, setExportlist] = useState([]);\n  const exportlistdata = () => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch('https://insuranceapi-3o5t.onrender.com/api/get_medical_weight_type', requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        setExportlist(data.data);\n      });\n  }\n  const fileType = 'xlsx'\n  const exporttocsv = () => {\n    const updatedData = exportlist.map((item, index) => {\n      return {\n\n        'medical_weight_type': item.medical_weight_type,\n        'medical_weight_type_location': item.weight_type_location.map((item) => item.location_name).join(\", \"),\n      }\n    })\n    const ws = XLSX.utils.json_to_sheet(updatedData);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n    const newdata = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(newdata, \"Medical-Weight-Type\" + \".xlsx\")\n  }\n\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    setPage(selectedPage + 1);\n    getmedicalweighttype(selectedPage + 1, perPage);\n  };\n\n  const updatestatus = async (id, medical_weight_type_status) => {\n    let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/update_medical_weight_type_status', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ id, medical_weight_type_status })\n    })\n    result = await result.json();\n    swal(\"Success!\", \"Status Updated Successfully!\", \"success\");\n    getmedicalweighttype(page, perPage);\n  }\n\n\n  const collectExceldata = async (e) => {\n    e.preventDefault()\n    const fd = new FormData()\n    fd.append('file', excelfile)\n    let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_medical_weight_type_excel \",\n      {\n        method: \"post\",\n        body: fd,\n      })\n    result = await result.json()\n    if (result.status == 200) {\n      setVisible(!visible)\n      swal({\n        text: result.message,\n        type: \"success\",\n        icon: \"success\",\n        button: false,\n      })\n      getmedicalweighttype(page, perPage);\n      setTimeout(() => {\n        swal.close()\n      }, 1000);\n    }\n    else {\n      setVisible(!visible)\n      swal({\n        title: \"Error!\",\n        text: result.message,\n        type: \"error\",\n        icon: \"error\",\n        button: \"ok\",\n      })\n      getmedicalweighttype(page, perPage);\n      setTimeout(() => {\n        swal.close()\n      }, 1000);\n    }\n  }\n\n  const locationList = () => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const locationdt = data.data;\n        setLocation(locationdt);\n        handleChange(locationdt);\n      });\n  }\n\n  const addmedicalweighttype = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const medical_weight_type = data.get('medical_weight_type');\n    const medical_weight_type_location = selectedOption;\n    const medical_weight_type_location_len = medical_weight_type_location.length;\n    const medical_weight_type_location_str = [];\n    for (let i = 0; i < medical_weight_type_location_len; i++) {\n      medical_weight_type_location_str.push(medical_weight_type_location[i]._id);\n    }\n\n    let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/add_medical_weight_type', {\n      method: 'post',\n      body: JSON.stringify({\n        medical_weight_type: medical_weight_type,\n        medical_weight_type_location: medical_weight_type_location_str\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setShowModal(false);\n          swal({\n            title: \"Wow!\",\n            text: data.message,\n            type: \"success\",\n            icon: \"success\",\n            button: false,\n          })\n          getmedicalweighttype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          setShowModal(false);\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\",\n            button: false,\n          })\n          getmedicalweighttype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n      });\n  }\n\n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n  }\n\n  const detailsbyid = async (ParamValue) => {\n    setMedicalweighttypeid(ParamValue);\n    const requestOptions = {\n      method: \"post\",\n      body: JSON.stringify({ ParamValue }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_medical_weight_type_detailsbyid`, requestOptions);\n    result = await result.json();\n    setMedicalweighttype(result.data[0]?.medical_weight_type);\n    setMedicalweighttypestatus(result.data[0]?.medical_weight_type_status);\n    const locationid = result.data[0]?.weight_type_location;\n    setSelectedOption(locationid);\n    setVisibleedit(true);\n  }\n\n\n\n  const Updatemedicalweight = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const medical_weight_type = data.get(\"medical_weight_type\");\n    const medical_weight_type_location = selectedOption;\n    const medical_weight_type_location_len = medical_weight_type_location.length;\n    const medical_weight_type_location_str = [];\n    for (let i = 0; i < medical_weight_type_location_len; i++) {\n      medical_weight_type_location_str.push(medical_weight_type_location[i]._id);\n    }\n    let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/update_medical_weight_type_details`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        ParamValue: medical_weight_type_id,\n        medical_weight_type: medical_weight_type,\n        medical_weight_type_location: medical_weight_type_location_str\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setVisibleedit(false)\n          swal({\n            text: data.message,\n            type: \"success\",\n            icon: \"success\",\n            button: false,\n          })\n          getmedicalweighttype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          setVisibleedit(false)\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\",\n            button: false,\n          })\n          getmedicalweighttype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n      });\n  }\n  const deleteItem = (id) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMedicalMaster/?id=${id}&type=weightType`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        if (data.status === 200) {\n          swal({\n            title: \"Success!\",\n            text: data.message,\n            icon: \"success\",\n            button: false,\n          })\n          getmedicalweighttype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            icon: \"error\",\n            button: false,\n          })\n          getmedicalweighttype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n\n      })\n  }\n  const AddMedicalWeight = () => {\n    navigate(\"/Addmedicalweighttype\")\n  }\n\n  return (\n    <>\n      <Container>\n        <div className=\"card mb-4\">\n          <div className=\"card-header\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <h4 className=\"card-title\">Weight Type Details</h4>\n              </div>\n              <div className=\"col-md-6\">\n                {medicalpermission.weight_type?.includes('create') ?\n                  <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddMedicalWeight()}>Add Weight Type</button>\n                  : ' '}\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"card-header\" style={{ textAlign: 'right' }}>\n            {medicalpermission.weight_type?.includes('download') ?\n              <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={filePath} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n              : ''}\n            {medicalpermission.weight_type?.includes('upload') ?\n              <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n              : ''}\n            {medicalpermission.weight_type?.includes('export') ?\n              <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n              : ''}\n          </div> */}\n          <div className=\"card-body\">\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-dark\">\n                <tr className=\"table-info\">\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Type</th>\n                  <th scope=\"col\">Location</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  data?.length > 0 ?\n                    data.map((item, index) =>\n                      <tr key={index}>\n                        <td>{index + 1}</td>\n                        <td>{item.medical_weight_type}</td>\n                        <td>{item.weight_type_location.map((val) => val.location_name).join(\", \")}</td>\n                        <td>\n                          {medicalpermission.weight_type?.includes('edit') && (\n                            <button className=\"btn btn-primary\" onClick={() => detailsbyid(item._id)}>Edit</button>\n                          )}\n                          {' '}\n                          {medicalpermission.weight_type?.includes('delete') && (\n                            <>\n                              {\n                                item.medical_weight_type_status === 1 ?\n                                  <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                  <button className=\"btn btn-success\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                              }\n                              <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                            </>\n                          )}\n                        </td>\n\n                      </tr>\n                    ) : <tr>\n                      <td colSpan=\"6\">No Data Found</td>\n                    </tr>\n                }\n              </tbody>\n            </table>\n            <ReactPaginate\n              previousLabel={\"Previous\"}\n              nextLabel={\"Next\"}\n              breakLabel={\"...\"}\n              pageCount={pageCount}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={3}\n              onPageChange={handlePageClick}\n              containerClassName={\"pagination justify-content-end\"}\n              pageClassName={\"page-item\"}\n              pageLinkClassName={\"page-link\"}\n              previousClassName={\"page-item\"}\n              previousLinkClassName={\"page-link\"}\n              nextClassName={\"page-item\"}\n              nextLinkClassName={\"page-link\"}\n              breakClassName={\"page-item\"}\n              breakLinkClassName={\"page-link\"}\n              activeClassName={\"active\"}\n            />\n          </div>\n        </div>\n\n      </Container>\n\n      <CModal alignment='center' visible={visible} onClose={() => setVisible(false)}>\n        <CModalHeader onClose={() => setVisible(false)}>\n          <CModalTitle>Upload Excel File</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <div >\n            {/* <label className=\"form-label\"><strong>Upload Excel File</strong></label> */}\n            <input type=\"file\" className=\"form-control\" id=\"DHA\" defaultValue=\"\" required\n              onChange={(e) => setExcelfile(e.target.files[0])} />\n          </div>\n\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n            Close\n          </CButton>\n          <CButton color=\"primary\" onClick={collectExceldata} href={'/Viewtraveltype'}>Upload</CButton>\n        </CModalFooter>\n      </CModal>\n\n      <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Add Weight Type</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    <form action=\"/\" method=\"POST\" onSubmit={addmedicalweighttype}>\n                      <div className=\"row\">\n                        <div className=\"col-md-6\">\n\n                          <label className=\"form-label\"><strong>Add Weight Type</strong></label>\n                          <input type='text' className=\"form-control\"\n                            name='medical_weight_type'\n                            placeholder=\"Enter Weight Type\"\n                            defaultValue=\"\"\n                            required\n                          />\n                        </div>\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Select Location</strong></label>\n\n                          <Multiselect\n                            options={location}\n                            selectedValues={location}\n                            displayValue=\"location_name\"\n                            onSelect={setSelectedOption}\n                            onRemove={setSelectedOption}\n                            placeholder=\"Select Location\"\n                            showCheckbox={true}\n                            required\n                          />\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal size='lg' show={visibleedit} onHide={() => setVisibleedit(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Weight Type</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    <form action=\"/\" method=\"POST\" onSubmit={Updatemedicalweight}>\n                      <div className=\"row\">\n                        <div className=\"col-md-6\">\n\n                          <label className=\"form-label\"><strong>Edit Weight Type</strong></label>\n                          <input type='text' className=\"form-control\"\n                            name='medical_weight_type'\n                            placeholder='Name'\n                            defaultValue={medical_weight_type}\n                            required\n                          />\n                        </div>\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Select Location</strong></label>\n\n                          <Multiselect\n                            options={location}\n                            selectedValues={selectedOption}\n                            onSelect={handleChange}\n                            onRemove={handleChange}\n                            displayValue=\"location_name\"\n                            placeholder=\"Select Location\"\n                            closeOnSelect={false}\n                            avoidHighlightFirstOption={true}\n                            showCheckbox={true}\n                            style={{ chips: { background: \"#007bff\" } }}\n                            required\n                          />\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default Viewmedicalweighttype"],"names":["Viewmedicalweighttype","_medicalpermission$we","navigate","useNavigate","data","setData","useState","perPage","pageCount","setPageCount","page","setPage","excelfile","setExcelfile","location","setLocation","selectedOption","setSelectedOption","medical_weight_type","setMedicalweighttype","medical_weight_type_status","setMedicalweighttypestatus","medical_weight_type_id","setMedicalweighttypeid","visible","setVisible","showModal","setShowModal","visibleedit","setVisibleedit","medicalpermission","setMedicalpermission","useEffect","token","localStorage","getItem","undefined","_userdata$medical_per","getmedicalweighttype","locationList","exportlistdata","userdata","JSON","parse","medical_permission","async","requestOptions","method","headers","fetch","then","response","json","slice","total","pages","Math","ceil","list","console","log","exportlist","setExportlist","updatestatus","id","result","body","stringify","swal","locationdt","handleChange","_jsxs","_Fragment","children","_jsx","Container","className","weight_type","includes","style","float","onClick","scope","length","map","item","index","_medicalpermission$we2","_medicalpermission$we3","weight_type_location","val","location_name","join","_result$data$","_result$data$2","_result$data$3","ParamValue","locationid","detailsbyid","_id","window","confirm","status","title","text","message","icon","button","setTimeout","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","type","defaultValue","required","onChange","target","files","CModalFooter","CButton","color","preventDefault","fd","FormData","append","href","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","get","medical_weight_type_location","medical_weight_type_location_len","medical_weight_type_location_str","i","push","name","placeholder","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","Footer","Button","variant","closeOnSelect","avoidHighlightFirstOption","chips","background"],"sourceRoot":""}