{"version":3,"file":"static/js/8329.7b234a3d.chunk.js","mappings":"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","sources":["views/body-type/BodyType.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport swal from 'sweetalert';\nimport filePath from '../../webroot/sample-files/motor-body-type.xlsx'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport Multiselect from \"multiselect-react-dropdown\";\nimport { Modal, Button } from 'react-bootstrap';\n\nconst BodyType = () => {\n    const navigate = useNavigate();\n    const [data, setData] = useState([]);\n    const [perPage] = useState(10);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [excelfile, setExcelfile] = useState(\"\");\n    const [location, setLocation] = useState([]);\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [body_type_name, setBodyTypeName] = useState('');\n    const [body_type_status, setBodyTypeStatus] = useState('');\n    const [body_type_id, setBodyTypeId] = useState('');\n    const [visible, setVisible] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [visibleedit, setVisibleedit] = useState(false);\n    const [motorpermission, setMotorPermission] = useState([]);\n    const [searchvalue, setSearchvalue] = useState('');\n    const [nodata, setNodata] = useState('');\n    const [statusvalue, setStatusvalue] = useState(2);\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            getlistBodyType(page, perPage);\n            locationList();\n            const userdata = JSON.parse(localStorage.getItem('user'));\n            const motor_permission = userdata?.motor_permission?.[0] || {};\n            setMotorPermission(motor_permission);\n            exportlistdata();\n        }\n    }, [])\n\n    useEffect(() => {\n        getlistBodyType(page, perPage);\n    }, [searchvalue, statusvalue])\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n                handleChange(location_list);\n            });\n    }\n\n    const handleChange = (selectedOption) => {\n        setSelectedOption(selectedOption);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const data = new FormData(e.target);\n        const body_type_name = data.get('body_type_name');\n        const body_type_location = selectedOption;\n        const body_type_location_len = body_type_location.length;\n        const body_type_location_str = [];\n        for (let i = 0; i < body_type_location_len; i++) {\n            body_type_location_str.push(body_type_location[i].value);\n        }\n        const body_type_status = data.get('status');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                body_type_name: body_type_name,\n                body_type_location: body_type_location_str,\n                // body_type_status: body_type_status\n            })\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/add_body_type`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setShowModal(false);\n                    swal({\n\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false\n\n                    })\n                    getlistBodyType(page, perPage);\n                    setTimeout(() => {\n                        swal.close();\n                    }, 1000);\n                }\n                else {\n                    setShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false\n\n                    })\n                    getlistBodyType(page, perPage);\n                    setTimeout(() => {\n                        swal.close();\n                    }, 1000);\n                }\n            });\n    }\n\n    const getlistBodyType = (page, perPage) => {\n        setData([]);\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + localStorage.getItem('token'),\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_body_type?page=${page}&limit=${perPage}&name=${searchvalue}&status=${statusvalue}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setNodata(data.message)\n                const total = data.total;\n                const slice = total / perPage;\n                const pages = Math.ceil(slice);\n                setPageCount(pages);\n                const list = data.data;\n                console.log(list, \">>>>>>>>>this is list\")\n                setData(list);\n                // const list_len = list.length;\n                // for (let i = 0; i < list_len; i++)\n                // {\n                //     locationdata(list[i]);\n                // }\n            });\n    }\n\n    const [exportlist, setExportlist] = useState([]);\n    const exportlistdata = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/get_body_type', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setExportlist(data.data);\n            });\n    }\n    console.log(exportlist)\n\n    const fileType = 'xlsx'\n    const exporttocsv = () => {\n\n        const updatedData = exportlist.map((item, index) => {\n            return {\n                'body_type_name': item.body_type_name,\n                'body_type_location': item.body_type_location.map((data) => data.location_name).join(\", \"),\n            }\n        })\n\n        console.log(updatedData)\n\n\n\n\n        const ws = XLSX.utils.json_to_sheet(updatedData);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n        const newdata = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(newdata, \"Body-Type\" + \".xlsx\")\n    }\n\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        getlistBodyType(selectedPage + 1, perPage);\n    };\n\n    const deleteBodyType = (id, status) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ body_type_status: status })\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/update_body_type_status/${id}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getlistBodyType(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getlistBodyType(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n\n    const collectExceldata = async (e) => {\n        e.preventDefault()\n        const fd = new FormData()\n        fd.append('file', excelfile)\n        let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_body_type_excel \",\n            {\n                method: \"post\",\n                body: fd,\n            });\n        result = await result.json();\n        setVisible(!visible)\n        swal(\"Uploaded Succesfully\", \"\", \"success\");\n        getlistBodyType(page, perPage)\n    }\n\n    const BodyTypeDetails = (id) => {\n        setBodyTypeId(id);\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_body_type_details/${id}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const body_type_details = data.data;\n                console.log(body_type_details, \">>>>>>>>>>>>>>>> data\")\n                setBodyTypeName(body_type_details[0]?.body_type_name);\n                const locationid = body_type_details[0]?.body_type_location;\n                console.log(locationid)\n                const location_id = locationid.map((data) => ({ label: data.location_name, value: data._id }));\n                setSelectedOption(location_id);\n                setVisibleedit(true);\n            });\n    }\n\n    const updateSubmit = (e) => {\n        e.preventDefault();\n        const data = new FormData(e.target);\n        const body_type_name = data.get('body_type_name');\n        const body_type_location = selectedOption;\n        const body_type_location_len = body_type_location.length;\n        const body_type_location_id = [];\n        for (let i = 0; i < body_type_location_len; i++) {\n            body_type_location_id.push(body_type_location[i].value);\n        }\n        const body_type_status = data.get('status');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                body_type_name: body_type_name,\n                body_type_location: body_type_location_id,\n                // body_type_status: body_type_status,\n                body_type_id: body_type_id\n            })\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/update_body_type`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setVisibleedit(false);\n                    swal({\n\n                        text: data.message,\n                        icon: \"success\",\n                        button: false\n                    })\n                    getlistBodyType(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setVisibleedit(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false\n                    }).then(() => {\n                        getlistBodyType(page, perPage);\n                    });\n                }\n            });\n    }\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMotorMaster/?id=${id}&type=BodyType`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getlistBodyType(page, perPage);\n\n\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getlistBodyType(page, perPage);\n\n\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n\n            })\n    }\n\n    const startFrom = (page - 1) * perPage;\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"card\">\n                            <div className=\"card-header\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-6\">\n                                        <h4 className=\"card-title\">Body Type</h4>\n                                    </div>\n                                    <div className=\"col-md-6\">\n                                        {motorpermission.body_type?.includes('create') ?\n                                            // <button className='btn btn-primary' style={ { float : \"right\" } } onClick={() => setShowModal(true)}>Add Body Type</button>\n                                            <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => navigate('/AddBodyType')}>Add Body Type</button>\n\n                                            : ''}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"card-body\">\n                                <div className='row card-header' style={{ marginLeft: '10px', marginRight: '10px', alignItems: 'center', paddingTop: '5px', paddingBottom: '5px' }}>\n                                    <div className='col-lg-3'>\n                                        <label><strong>Search</strong></label><br />\n                                        <input type=\"text\" className=\"form-control\" placeholder=\"Search\" onChange={(e) => setSearchvalue(e.target.value)} />\n\n                                    </div>\n                                    <div className='col-lg-3'>\n                                        <label><strong>Status</strong></label><br />\n                                        <select className='form-control'\n                                            value={statusvalue}\n                                            onChange={(e) => setStatusvalue(e.target.value)}\n                                        >\n                                            <option value={2}>-- All --</option>\n                                            <option value={1}>Active</option>\n                                            <option value={0}>Inactive</option>\n                                        </select>\n                                    </div>\n\n                                    <div className=\"col-lg-6\" style={{ textAlign: 'right' }}>\n                                        {motorpermission.body_type?.includes('download') ?\n                                            <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={filePath} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n                                            : ''}\n                                        {motorpermission.body_type?.includes('upload') ?\n                                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n                                            : ''}\n                                        {motorpermission.body_type?.includes('export') ?\n                                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n                                            : ''}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card-body\">\n                                <table className=\"table table-bordered\">\n                                    <thead className=\"thead-dark\">\n                                        <tr className=\"table-info\">\n                                            <th>#</th>\n                                            <th>Body Type Name</th>\n                                            <th>Body Type Location</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data && data.length > 0 ?\n                                            <>\n\n                                                {data?.map((item, index) => (\n                                                    <tr key={index}>\n                                                        <td>{startFrom + index + 1}</td>\n                                                        <td>{item.body_type_name}</td>\n                                                        <td>{item.body_type_location.map((data) => data.location_name).join(\", \")}</td>\n                                                        <td>\n                                                            {motorpermission.body_type?.includes('edit') && (\n                                                                <button className=\"btn btn-primary\" onClick={() => { BodyTypeDetails(item._id); }}>Edit</button>\n                                                            )}\n                                                            {' '}\n                                                            {motorpermission.body_type?.includes('delete') && (\n                                                                <>\n                                                                    {\n                                                                        item.body_type_status === 1 ?\n                                                                            <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) deleteBodyType(item._id, 0) }}>Deactivate</button> :\n                                                                            <button className=\"btn btn-success\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) deleteBodyType(item._id, 1) }}>Activate</button>\n                                                                    }\n                                                                    <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                                                                </>\n                                                            )}\n                                                        </td>\n                                                    </tr>\n                                                ))}\n\n                                            </>\n                                            :\n                                            <tr><td colSpan=\"17\" style={{ textAlign: 'center' }}><strong>{nodata}</strong></td></tr>\n                                        }\n\n                                    </tbody>\n                                </table>\n                                <ReactPaginate\n                                    previousLabel={\"Previous\"}\n                                    nextLabel={\"Next\"}\n                                    breakLabel={\"...\"}\n                                    pageCount={pageCount}\n                                    marginPagesDisplayed={2}\n                                    pageRangeDisplayed={3}\n                                    onPageChange={handlePageClick}\n                                    containerClassName={\"pagination justify-content-end\"}\n                                    pageClassName={\"page-item\"}\n                                    pageLinkClassName={\"page-link\"}\n                                    previousClassName={\"page-item\"}\n                                    previousLinkClassName={\"page-link\"}\n                                    nextClassName={\"page-item\"}\n                                    nextLinkClassName={\"page-link\"}\n                                    breakClassName={\"page-item\"}\n                                    breakLinkClassName={\"page-link\"}\n                                    activeClassName={\"active\"}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                    <CModalTitle>Upload Excel File</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div>\n                        <input type=\"file\" className=\"form-control\" id=\"DHA\" defaultValue=\"\" required\n                            onChange={(e) => setExcelfile(e.target.files[0])} />\n                    </div>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setVisible(false)}>Close</CButton>\n                    <CButton color=\"primary\" onClick={collectExceldata} href={'/Viewtraveltype'}>Upload</CButton>\n                </CModalFooter>\n            </CModal>\n\n            <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Body Type</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={handleSubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group\">\n                                                        <label className=\"form-label\">Body Type Name</label>\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Body Type Name\" name=\"body_type_name\" autoComplete=\"off\" required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group\">\n                                                        <label className=\"form-label\">Location</label>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={location}\n                                                            displayValue=\"label\"\n                                                            onSelect={setSelectedOption}\n                                                            onRemove={setSelectedOption}\n                                                            placeholder=\"Select Location\"\n                                                            showCheckbox={true}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            {/* <div className=\"row\">\n                                        <div className=\"col-md-6\">\n                                            <div className=\"form-group\">\n                                            <label className=\"form-label\">Status</label>\n                                                <select className=\"form-control\" name=\"status\" required>\n                                                    <option value=\"\">Select Status</option>\n                                                    <option value=\"1\">Active</option>\n                                                    <option value=\"0\">Inactive</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div> */}\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal size='lg' show={visibleedit} onHide={() => setVisibleedit(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Body Type</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updateSubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group\">\n                                                        <label className=\"form-label\">Body Type Name</label>\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Body Type Name\" name=\"body_type_name\" autoComplete=\"off\" defaultValue={body_type_name} required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group\">\n                                                        <label className=\"form-label\">Location</label>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={selectedOption}\n                                                            onSelect={handleChange}\n                                                            onRemove={handleChange}\n                                                            displayValue=\"label\"\n                                                            placeholder=\"Select Location\"\n                                                            closeOnSelect={false}\n                                                            avoidHighlightFirstOption={true}\n                                                            showCheckbox={true}\n                                                            style={{ chips: { background: \"#007bff\" } }}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            {/* <div className=\"row\">\n                                        <div className=\"col-md-6\">\n                                            <div className=\"form-group\">\n                                                <label className=\"form-label\">Status</label>\n                                                <select className=\"form-control\" name=\"status\" required>\n                                                    <option value=\"\">Select Status</option>\n                                                    <option value=\"1\" selected={body_type_status == 1 ? true : false}>Active</option>\n                                                    <option value=\"0\" selected={body_type_status == 0 ? true : false}>Inactive</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div> */}\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Update</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n\nexport default BodyType\n"],"names":["BodyType","_motorpermission$body","_motorpermission$body2","_motorpermission$body3","_motorpermission$body4","navigate","useNavigate","data","setData","useState","perPage","pageCount","setPageCount","page","setPage","excelfile","setExcelfile","location","setLocation","selectedOption","setSelectedOption","body_type_name","setBodyTypeName","body_type_status","setBodyTypeStatus","body_type_id","setBodyTypeId","visible","setVisible","showModal","setShowModal","visibleedit","setVisibleedit","motorpermission","setMotorPermission","searchvalue","setSearchvalue","nodata","setNodata","statusvalue","setStatusvalue","useEffect","token","localStorage","getItem","undefined","_userdata$motor_permi","getlistBodyType","locationList","userdata","JSON","parse","motor_permission","exportlistdata","fetch","method","headers","then","response","json","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","handleChange","requestOptions","message","slice","total","pages","Math","ceil","list","console","log","exportlist","setExportlist","deleteBodyType","id","status","body","stringify","swal","text","icon","button","setTimeout","title","startFrom","_jsxs","_Fragment","children","_jsx","className","body_type","includes","style","float","onClick","marginLeft","marginRight","alignItems","paddingTop","paddingBottom","type","placeholder","onChange","e","target","textAlign","backgroundColor","href","filePath","download","exporttocsv","updatedData","map","item","index","body_type_location","join","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","booktype","newdata","Blob","FileSaver","_motorpermission$body5","_motorpermission$body6","_body_type_details$","_body_type_details$2","body_type_details","locationid","location_id","window","confirm","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","defaultValue","required","files","CModalFooter","CButton","color","async","preventDefault","fd","FormData","append","result","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","get","body_type_location_len","body_type_location_str","name","autoComplete","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","Footer","Button","variant","body_type_location_id","closeOnSelect","avoidHighlightFirstOption","chips","background"],"sourceRoot":""}