{"version":3,"file":"static/js/4836.30210c1f.chunk.js","mappings":"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","sources":["views/Medical/NetworkList/AddmedicalNetworkList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { Container, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Multiselect from 'multiselect-react-dropdown';\n\nconst AddmedicalNetworkList = () => {\n    const navigate = useNavigate();\n    const [location, setLocation] = useState([]);\n    const [rowsData, setRowsData] = useState([{\n        name: '',\n        location: location,\n        TPAID: \"\",\n        planCategory: '',\n        networkId: '',\n    }])\n    const [activeMedicalTPA, setactiveMedicalTPA] = useState([])\n    const [defaultMedicalNetwork, setactiveMedicalNetwork] = useState([])\n    const [errors, setErrors] = useState({});\n    const [defaultPlancategories, setdefaultPlanCategories] = useState([])\n    const [selectedPlan, setselectedPlan] = useState(\"\")\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            locationList();\n            activeMedicalTPAList()\n            getAllPlanCategories()\n            activeMedicalNetwork()\n        }\n    }, [])\n\n\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                setLocation(locationdt);\n                handleChange1(0, locationdt, 'location')\n            });\n    }\n    const getAllPlanCategories = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getAllPlanCategories`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setdefaultPlanCategories(data.data)\n                setselectedPlan(data?.data?.[0][\"_id\"])\n            });\n    }\n    const activeMedicalTPAList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/activeMedicalTPA`, requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n\n                setactiveMedicalTPA(data.data)\n            });\n    }\n    const activeMedicalNetwork = (id) => {\n        console.log(\"id>>>>>>>>>>>>>>>>>>>>>>>>>\", id)\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getTpaLinkNetwork?tpaId=${id}`, requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n                console.log('lllllllllllllllllllll', data.data)\n                setactiveMedicalNetwork(data.data)\n                // handleChange1(0, data.data, 'networkId')\n            });\n    }\n    const getLinkListByTPAid = (id, index) => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getTpaLinkNetwork?tpaId=${id}`, requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n                handleChange1(index, data.data, 'networkId')\n\n            })\n            .catch(error => console.log('error', error));\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        try {\n\n            // return false\n\n\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.name.trim() === '' || row.location.length === 0 || row.TPAID.length === 0\n                    || row.planCategory === ''\n                    || row.networkId.length === 0\n            });\n\n            if (hasEmptyFields) {\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return; // Exit the function if there are empty fields\n            } else {\n                let payload = {}\n                payload = rowsData.map((val) => {\n\n                    return {\n                        ...val,\n                        location: val.location && val.location.length > 0 ? val.location.map(item => item?._id) : [],\n                        networkId: val.networkId && val.networkId.length > 0 ? val.networkId.map(item => item?._id) : [],\n                        // TPAID: val.TPAID && val.TPAID.length > 0 ? val.TPAID.map(item => item?._id) : [],\n                    }\n\n                })\n                console.log(\"payload\", payload)\n                const requestOptions = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(payload)\n                };\n                fetch('https://insuranceapi-3o5t.onrender.com/api/medicalNetworkList', requestOptions)\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.status == 201) {\n                            swal({\n                                text: data.message,\n                                type: \"success\",\n                                icon: \"success\",\n                                button: false\n                            })\n                            navigate('/ViewmedicalNetworkList')\n                            setTimeout(() => {\n                                swal.close()\n                            }, \"1000\");\n                        }\n                        else {\n                            swal({\n                                title: \"Error!\",\n                                text: data.message,\n                                type: \"error\",\n                                icon: \"error\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                            }, \"1000\");\n                        }\n                    });\n            }\n\n\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            name: '',\n            location: location,\n            TPAID: \"\",\n            planCategory: '',\n            networkId: defaultMedicalNetwork,\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        if (name === \"TPAID\") {\n            getLinkListByTPAid(value, index)\n        }\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n    console.log(\"rowsdata\", rowsData)\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <h4 className=\"card-title\">Add Network List</h4>\n                                </div>\n                            </div>\n                            <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                                <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                    <thead>\n                                        <tr>\n                                            <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                            <th>Network Name</th>\n                                            <th>Plan Categories</th>\n                                            <th>Plan Administrator</th>\n                                            <th>Networks</th>\n                                            <th>Location</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            rowsData.map((data, index) => {\n                                                return (\n                                                    <tr key={index} >\n                                                        <td>\n                                                            <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"name\" placeholder=\"Name\" autoComplete=\"off\" required />\n                                                        </td>\n                                                        <td>\n                                                            <select name='planCategory' className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))}>\n\n                                                                {\n\n                                                                    defaultPlancategories.length > 0 ? (<>\n                                                                        <option value={\"\"}>Select Plan Category</option>\n                                                                        {\n                                                                            defaultPlancategories.map((item) => (\n                                                                                <option key={item._id} value={item._id}>{item.plan_category_name}</option>\n                                                                            ))\n                                                                        }\n                                                                    </>) : <React.Fragment></React.Fragment>\n                                                                }\n                                                            </select>\n                                                        </td>\n                                                        <td>\n                                                            <select name='TPAID' className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))}>\n                                                                {\n\n                                                                    activeMedicalTPA.length > 0 ? (<React.Fragment>\n                                                                        <option value={\"\"}>Select TPA</option>\n                                                                        {\n                                                                            activeMedicalTPA.map((item) => (\n                                                                                <option key={item._id} value={item._id}>{item.name}</option>\n                                                                            ))\n                                                                        }\n                                                                    </React.Fragment>) : <React.Fragment></React.Fragment>\n                                                                }\n                                                            </select>\n                                                        </td>\n                                                        <td>\n                                                            <Multiselect\n                                                                style={{ overflow: 'visible' }}\n                                                                options={defaultMedicalNetwork}\n                                                                selectedValues={rowsData[index]?.networkId}\n                                                                displayValue=\"name\"\n                                                                onSelect={(evnt) => (handleChange1(index, evnt, 'networkId'))}\n                                                                onRemove={(evnt) => (handleChange1(index, evnt, 'networkId'))}\n                                                                placeholder=\"Select Network\"\n                                                                showCheckbox={true}\n                                                                required\n                                                            />\n                                                        </td>\n                                                        <td>\n                                                            <Multiselect\n                                                                style={{ overflow: 'visible' }}\n                                                                options={location}\n                                                                selectedValues={location}\n                                                                displayValue=\"location_name\"\n                                                                onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                placeholder=\"Select Location\"\n                                                                showCheckbox={true}\n                                                                required\n                                                            />\n                                                        </td>\n\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddmedicalNetworkList"],"names":["AddmedicalNetworkList","navigate","useNavigate","location","setLocation","useState","rowsData","setRowsData","name","TPAID","planCategory","networkId","activeMedicalTPA","setactiveMedicalTPA","defaultMedicalNetwork","setactiveMedicalNetwork","errors","setErrors","defaultPlancategories","setdefaultPlanCategories","selectedPlan","setselectedPlan","useEffect","token","localStorage","getItem","undefined","locationList","activeMedicalTPAList","getAllPlanCategories","activeMedicalNetwork","fetch","method","headers","then","response","json","data","locationdt","handleChange1","_data$data","id","console","log","handleChange","index","evnt","value","target","trim","prevErrors","rowsInput","getLinkListByTPAid","catch","error","title","_jsx","className","children","_jsxs","style","overflowX","width","onClick","addTableRows","map","_rowsData$index","rows","splice","deleteTableRows","type","onChange","placeholder","autoComplete","required","length","_Fragment","item","_id","plan_category_name","React","Multiselect","overflow","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","e","preventDefault","some","row","swal","text","icon","payload","val","requestOptions","body","JSON","stringify","status","message","button","setTimeout"],"sourceRoot":""}