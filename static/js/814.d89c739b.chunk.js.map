{"version":3,"file":"static/js/814.d89c739b.chunk.js","mappings":"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","sources":["views/Medical/MedicalPlan/TableBenefits/TableBenefits.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { Modal, Button } from 'react-bootstrap';\nimport filePath from '../../../../webroot/sample-files/Table_benefits_sample_sheet.xlsx';\n\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport ReactPaginate from \"react-paginate\";\nimport swal from 'sweetalert';\n\nconst TableBenefits = () => {\n    const navigate = useNavigate();\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            geTableBenefits(page, perPage);\n            exportlistdata()\n        }\n    }, []);\n\n    const [excelfile, setExcelfile] = useState(\"\");\n    const [perPage] = useState(10);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [tableBenefits, setTabaleBenefits] = useState([]);\n    const [visible, setVisible] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [editshowModal, setEditShowModal] = useState(false);\n    const [tableBenefitsId, setTabaleBenefitsId] = useState('');\n    const [tabaleBenefitsValues, setTabaleBenefitsValues] = useState({});\n\n    const geTableBenefits = async (page, perPage) => {\n        setTabaleBenefits([]);\n        const requestOptions =\n        {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_table_benefits?page=${page}&limit=${perPage}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const total = data.total;\n                const slice = total / perPage;\n                const pages = Math.ceil(slice);\n                setPageCount(pages);\n                setTabaleBenefits(data.data);\n            });\n    }\n\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        geTableBenefits(selectedPage + 1, perPage);\n    };\n\n    const updatestatus = async (id, table_benefit_status) => {\n        let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/update_benefits_table_status', {\n            method: 'post',\n            body: JSON.stringify({ id, table_benefit_status }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        result = await result.json();\n        swal(\"Updated Succesfully\", \"\", \"success\");\n        geTableBenefits(page, perPage)\n    }\n\n    const addTableBenefits = async (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        const benefits_label = formData.get('benefits_label');\n        const benefits_description = formData.get('benefits_description');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ benefits_label, benefits_description }),\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/add_table_benefits`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setShowModal(false);\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n\n    const updateSubmit = (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        const benefits_label = formData.get('benefits_label');\n        const benefits_description = formData.get('benefits_description');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ benefits_label, benefits_description, tableBenefitsId }),\n\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/update_table_benefits`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setEditShowModal(false);\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setEditShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n    const [exportlist, setExportlist] = useState([]);\n    const exportlistdata = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/get_table_benefits', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setExportlist(data.data);\n            });\n    }\n    const fileType = 'xlsx'\n    const exporttocsv = () => {\n        const updatedData = exportlist.map((item, index) => {\n            return {\n\n                'Feature': item.table_benefit,\n                'Description': item.table_benefit_description,\n            }\n        })\n        const ws = XLSX.utils.json_to_sheet(updatedData);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n        const newdata = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(newdata, \"table-benefits\" + \".xlsx\")\n    }\n\n    const collectExceldata = async (e) => {\n        e.preventDefault()\n        const fd = new FormData()\n        fd.append('file', excelfile)\n        let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_benefits_table_excel\",\n            {\n                method: \"POST\",\n                body: fd,\n            });\n        result = await result.json();\n        if (result.status == 200) {\n            setVisible(!visible)\n            swal({\n                text: result.message,\n                type: \"success\",\n                icon: \"success\",\n                button: false,\n            })\n            geTableBenefits(page, perPage)\n\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n        else {\n            setVisible(!visible)\n            swal({\n                title: \"Error!\",\n                text: result.message,\n                type: \"error\",\n                icon: \"error\",\n                button: \"ok\",\n            })\n            geTableBenefits(page, perPage)\n\n\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n    }\n\n    const detailsbyid = async (ParamValue) => {\n        setTabaleBenefitsId(ParamValue)\n        const requestOptions = {\n            method: \"post\",\n            body: JSON.stringify({ ParamValue }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_table_benefitbyid`, requestOptions);\n        result = await result.json();\n        setTabaleBenefitsValues(result.data);\n\n\n        setEditShowModal(true);\n    };\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMedicalMaster/?id=${id}&type=tableBenefits`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n\n            })\n    }\n    const startFrom = (page - 1) * perPage;\n    const AddTableBenefit = () => {\n        navigate(\"/AddMedicalBenefits\")\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card \">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4 className=\"card-title\">Medical Benefits</h4>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddTableBenefit()}>Add Table Benefit</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-header\" style={{ textAlign: 'right' }}>\n                            <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={filePath} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n                        </div>\n                        <div className=\"card-body\">\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th><strong>#</strong></th>\n                                        <th><strong>Feature</strong></th>\n                                        <th><strong>Description</strong></th>\n                                        <th><strong>Action</strong></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {tableBenefits.length > 0 ?\n                                        tableBenefits.map((item, index) =>\n                                            <tr key={index}>\n                                                <td>{startFrom + index + 1}</td>\n                                                <td>{item.table_benefit}</td>\n                                                <td>{item.table_benefit_description}</td>\n                                                <td>\n                                                    <button className=\"btn btn-primary\" onClick={() => detailsbyid(item._id)}>Edit</button>&nbsp;&nbsp;\n                                                    {\n                                                        item.table_benefit_status === 1 ?\n                                                            <button className=\"btn btn-danger mr-5\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                                            <button className=\"btn btn-success mr-5\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                                                    }\n                                                    <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                                                </td>\n                                            </tr>\n                                        ) : <tr>\n                                            <td colSpan=\"4\">No Data Found</td>\n                                        </tr>\n                                    }\n                                </tbody>\n                            </table>\n                            <ReactPaginate\n                                previousLabel={\"Previous\"}\n                                nextLabel={\"Next\"}\n                                breakLabel={\"...\"}\n                                pageCount={pageCount}\n                                marginPagesDisplayed={2}\n                                pageRangeDisplayed={3}\n                                onPageChange={handlePageClick}\n                                containerClassName={\"pagination justify-content-end\"}\n                                pageClassName={\"page-item\"}\n                                pageLinkClassName={\"page-link\"}\n                                previousClassName={\"page-item\"}\n                                previousLinkClassName={\"page-link\"}\n                                nextClassName={\"page-item\"}\n                                nextLinkClassName={\"page-link\"}\n                                breakClassName={\"page-item\"}\n                                breakLinkClassName={\"page-link\"}\n                                activeClassName={\"active\"}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                    <CModalTitle>Upload Excel File</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div>\n                        <input type=\"file\" className=\"form-control\" onChange={(e) => setExcelfile(e.target.files[0])} required />\n                    </div>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setVisible(false)}>Close</CButton>\n                    <CButton color=\"primary\" onClick={collectExceldata}>Upload</CButton>\n                </CModalFooter>\n            </CModal>\n\n            <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Table Benefits</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={addTableBenefits}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Benefits Feature</strong></label>\n                                                        <input type='text' className=\"form-control\" name='benefits_label' placeholder=\"Enter Benefits Feature\" autoComplete='off' required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Benefits Description</strong></label>\n                                                        <input type='text' className=\"form-control\" name='benefits_description' placeholder=\"Enter Benefits Description\" autoComplete='off' required />\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal size='lg' show={editshowModal} onHide={() => setEditShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Table Benefit</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updateSubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Benefit Feature</strong></label>\n                                                        <input type='text' className=\"form-control\" name='benefits_label' placeholder='Enter Condition Label' defaultValue={tabaleBenefitsValues.table_benefit} autoComplete='off' required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Benefit Description</strong></label>\n                                                        <input type='text' className=\"form-control\" name='benefits_description' placeholder='Enter Condition Label' defaultValue={tabaleBenefitsValues.table_benefit_description} autoComplete='off' required />\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary submit_all\" style={{ float: \"right\" }}>Update</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setEditShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n        </div>\n    )\n}\n\nexport default TableBenefits\n"],"names":["TableBenefits","navigate","useNavigate","useEffect","token","localStorage","getItem","undefined","geTableBenefits","page","perPage","exportlistdata","excelfile","setExcelfile","useState","pageCount","setPageCount","setPage","tableBenefits","setTabaleBenefits","visible","setVisible","showModal","setShowModal","editshowModal","setEditShowModal","tableBenefitsId","setTabaleBenefitsId","tabaleBenefitsValues","setTabaleBenefitsValues","async","fetch","method","headers","then","response","json","data","slice","total","pages","Math","ceil","updatestatus","id","table_benefit_status","result","body","JSON","stringify","swal","exportlist","setExportlist","startFrom","_jsxs","className","children","_jsx","style","float","onClick","textAlign","backgroundColor","marginRight","href","filePath","download","exporttocsv","updatedData","map","item","index","table_benefit","table_benefit_description","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","booktype","type","newdata","Blob","FileSaver","length","ParamValue","requestOptions","detailsbyid","_id","window","confirm","status","title","text","message","icon","button","setTimeout","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","onChange","target","files","required","CModalFooter","CButton","color","preventDefault","fd","FormData","append","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","formData","benefits_label","get","benefits_description","name","placeholder","autoComplete","Footer","Button","variant","defaultValue"],"sourceRoot":""}