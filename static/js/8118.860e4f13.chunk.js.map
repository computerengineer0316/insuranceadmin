{"version":3,"file":"static/js/8118.860e4f13.chunk.js","mappings":"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","sources":["views/Travel/travelcovertypelist/Addtravelcovertypelist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { Container, Row } from 'react-bootstrap';\nimport Multiselect from 'multiselect-react-dropdown';\n\n\nfunction Addtravelcovertypelist() {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        locationList();\n\n    }, [])\n\n    const [travel_type, setTraveltype] = useState('')\n    const [location, setLocation] = useState([]);\n    const [selectedOption, setSelectedOption] = useState();\n    const [travel_type_status, setTraveltypestatus] = useState()\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        try {\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.travel_cover_type.trim() === '' || row.location == 0;\n            });\n\n            if (hasEmptyFields) {\n                // Display an error message or handle the validation error as needed\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return false; // Exit the function if there are empty fields\n            }\n            else {\n                console.log(rowsData, \"rowsData\")\n\n                const requestOptions = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(rowsData)\n                };\n\n                fetch(`https://insuranceapi-3o5t.onrender.com/api/add_travel_cover_type_list`, requestOptions)\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.status == 200) {\n                            swal({\n                                text: data.message,\n                                type: \"success\",\n                                icon: \"success\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                                navigate('/Viewtravelcovertypelist')\n                            }, 1000);\n\n                        }\n\n                        else if (data.status != 200) {\n                            swal({\n                                title: \"Error!\",\n                                text: data.message,\n                                type: \"error\",\n                                icon: \"error\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                                // navigate('/motor-make')\n                            }, 1000);\n                        }\n                    });\n            }\n\n        }\n        catch (err) {\n            console.log(err)\n        }\n\n    }\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            travel_cover_type: '',\n            location: location,\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        console.log(value, \"multiselect value\")\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n    return (\n        <>\n\n            <div className=\"container\">\n                <div className=\"row\" >\n                    <div className=\"col-md-12\" >\n                        <div className=\"card\" >\n                            <div className=\"card-header\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-12\">\n                                        <h4 className=\"card-title\">Add Travel Plan Type </h4>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                                <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                    <thead>\n                                        <tr>\n                                            <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                            <th>Travel Cover Type </th>\n                                            <th>Location</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            rowsData.map((data, index) => {\n                                                return (\n                                                    <tr key={index} >\n                                                        <td>\n                                                            <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"travel_cover_type\" placeholder=\"Travel Cover Type\" autoComplete=\"off\" required />\n\n                                                        </td>\n\n                                                        <td>\n                                                            <Multiselect\n                                                                options={location}\n                                                                selectedValues={location}\n                                                                displayValue=\"label\"\n                                                                onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                placeholder=\"Select Location\"\n                                                                showCheckbox={true}\n                                                                closeOnSelect={false}\n                                                                required\n                                                            />\n                                                        </td>\n\n\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\n\nexport default Addtravelcovertypelist"],"names":["navigate","useNavigate","useEffect","locationList","travel_type","setTraveltype","useState","location","setLocation","selectedOption","setSelectedOption","travel_type_status","setTraveltypestatus","rowsData","setRowsData","errors","setErrors","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","handleChange1","index","title","console","log","rowsInput","_jsx","_Fragment","children","className","_jsxs","style","overflowX","width","onClick","addTableRows","travel_cover_type","map","rows","splice","deleteTableRows","type","onChange","evnt","handleChange","name","target","trim","prevErrors","placeholder","autoComplete","required","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","closeOnSelect","e","preventDefault","some","row","swal","text","icon","requestOptions","body","JSON","stringify","status","message","button","setTimeout","err"],"sourceRoot":""}