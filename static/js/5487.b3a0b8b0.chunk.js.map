{"version":3,"file":"static/js/5487.b3a0b8b0.chunk.js","mappings":"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","sources":["views/sponsortype/Sponsortypeadd.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { Container, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Multiselect from 'multiselect-react-dropdown';\n\nconst Sponsortypeadd = () => {\n    const navigate = useNavigate();\n\n    const [rowsData, setRowsData] = useState([]);\n    const [location, setLocation] = useState([]);\n    const [errors, setErrors] = useState({});\n\n    useEffect(() => {\n        locationList();\n    }, []);\n\n    const locationList = () => {\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`)\n            .then(response => response.json())\n            .then(data => {\n                const location_list = data.data.map(location => ({\n                    label: location.location_name,\n                    value: location._id\n                }));\n                setLocation(location_list);\n            })\n            .catch(error => console.error('Error fetching locations:', error));\n    }\n\n    // const addTableRow = () => {\n    //     setRowsData([...rowsData, { sponsortype: '', location: [] }]);\n    // }\n\n    const addTableRow = () => {\n        const rowsInput =\n        {\n            sponsortype: '',\n            location: location,\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n\n    const deleteTableRow = (index) => {\n        const updatedRowsData = [...rowsData];\n        updatedRowsData.splice(index, 1);\n        setRowsData(updatedRowsData);\n    }\n\n    // const handleChange = (index, fieldName, value) => {\n    //     console.log('index:', index, 'fieldName:', fieldName, 'value:', value);\n    //     const updatedRowsData = [...rowsData];\n    //     updatedRowsData[index][fieldName] = value;\n    //     setRowsData(updatedRowsData);\n    // }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        console.log(value, \"multiselect value\")\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        console.log('rowsData:', rowsData);\n\n        const hasEmptyFields = rowsData.some(row => row.sponsortype.trim() === '' || row.location.length === 0);\n        if (hasEmptyFields) {\n            swal({\n                title: \"Warning!\",\n                text: \"Please fill in all fields for each row.\",\n                type: \"warning\",\n                icon: \"warning\"\n            });\n            return;\n        }\n\n        try {\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(rowsData)\n            };\n            const response = await fetch(`https://insuranceapi-3o5t.onrender.com/api/addSponsorType`, requestOptions);\n            const data = await response.json();\n            if (data.status == 200) {\n                swal({\n                    text: data.message,\n                    icon: \"success\"\n                });\n                navigate('/SponsortypeView');\n            }\n            else if (data.status == 403) {\n                swal({\n                    text: data.message,\n                    icon: \"warning\"\n                });\n            }\n            else {\n                swal({\n                    text: data.message,\n                    icon: \"error\"\n                });\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    }\n\n    return (\n        <div className=\"container mb-5\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4 className=\"card-title\">Add Sponsor Type </h4>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <Link to=\"/SponsortypeView\" className=\"btn btn-primary\" style={{ float: 'right' }}>Back</Link>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body addmotorplans\">\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th><button className=\"btn btn-outline-success\" onClick={addTableRow}>+</button></th>\n                                        <th>Sponsor Type</th>\n                                        <th>Location</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {rowsData.map((row, index) => (\n                                        <tr key={index}>\n                                            <td>\n                                                <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRow(index))}>x</button>\n                                            </td>\n                                            <td>\n                                                <input\n                                                    type='text'\n                                                    className=\"form-control\"\n                                                    name='sponsortype'\n                                                    placeholder=\"Enter Sponsor Type\"\n                                                    required\n                                                    onChange={(evnt) => (handleChange(index, evnt))}\n                                                />\n                                            </td>\n                                            <td>\n                                                <Multiselect\n                                                    options={location}\n                                                    selectedValues={location}\n                                                    displayValue=\"label\"\n                                                    onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                    onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                    placeholder=\"Select Location\"\n                                                    showCheckbox={true}\n                                                    required\n                                                />\n                                            </td>\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"card-footer\">\n                            <button className=\"btn btn-outline-success\" style={{ float: \"right\" }} onClick={handleSubmit}>Submit</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Sponsortypeadd;\n"],"names":["Sponsortypeadd","navigate","useNavigate","rowsData","setRowsData","useState","location","setLocation","errors","setErrors","useEffect","locationList","fetch","then","response","json","data","location_list","map","label","location_name","value","_id","catch","error","console","handleChange1","index","title","log","rowsInput","_jsx","className","children","_jsxs","Link","to","style","float","onClick","addTableRow","sponsortype","row","updatedRowsData","splice","deleteTableRow","type","name","placeholder","required","onChange","evnt","handleChange","target","trim","prevErrors","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","async","e","preventDefault","some","length","swal","text","icon","requestOptions","method","headers","body","JSON","stringify","status","message"],"sourceRoot":""}