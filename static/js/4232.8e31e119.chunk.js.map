{"version":3,"file":"static/js/4232.8e31e119.chunk.js","mappings":"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","sources":["views/Medical/MedicalPlan/AdditionalCondition/AddAdditionalCondition.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { Container, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Multiselect from 'multiselect-react-dropdown';\nconst AddAdditionalCondition = () => {\n    const navigate = useNavigate();\n\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n    const [location, setLocation] = useState([]);\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        } else {\n            locationList();\n        }\n    }, [])\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n\n                setLocation(location_list);\n            });\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        try {\n\n\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.feature.trim() === '' || row.description.trim() === '';\n            });\n\n            if (hasEmptyFields) {\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return; // Exit the function if there are empty fields\n            }\n\n\n            // console.log(rowsData,\">>>>>>>>>>rowsData\")\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(rowsData)\n            };\n            fetch('https://insuranceapi-3o5t.onrender.com/api/add_Additional_Underwriting_condition', requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status == 200) {\n                        swal({\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\",\n                            button: false\n                        })\n                        navigate('/AdditionalConditions')\n                        setTimeout(() => {\n                            swal.close()\n                        }, \"1000\");\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\",\n                            button: false\n                        })\n                        setTimeout(() => {\n                            swal.close()\n                        }, \"1000\");\n                    }\n                });\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            feature: '',\n            description: '',\n            location: location,\n\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const HandleMultiselectChange = (selectedList, index) => {\n        const rowsInput = [...rowsData]\n        rowsInput[index]['location'] = selectedList\n        setRowsData(rowsInput)\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <h4 className=\"card-title\">Add Additional Conditionnnn</h4>\n                                </div>\n                            </div>\n                            <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                                <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                    <thead>\n                                        <tr>\n                                            <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                            <th>Feature</th>\n                                            <th>Description</th>\n                                            <th>Location</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            rowsData.map((data, index) => {\n                                                return (\n                                                    <tr key={index} >\n                                                        <td>\n                                                            <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"feature\" placeholder=\"Additional Condition\" autoComplete=\"off\" required />\n\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"description\" placeholder=\"Description\" autoComplete=\"off\" required />\n\n                                                        </td>\n                                                        <td><div className=\"form-group\">\n                                                            <Multiselect\n                                                                options={location}\n                                                                selectedValues={location}\n                                                                onSelect={(evnt) => (HandleMultiselectChange(evnt, index))}\n                                                                onRemove={(evnt) => (HandleMultiselectChange(evnt, index))}\n                                                                displayValue=\"label\"\n                                                                placeholder=\"Select Location\"\n                                                                closeOnSelect={false}\n                                                                avoidHighlightFirstOption={true}\n                                                                showCheckbox={true}\n                                                                style={{ chips: { background: \"#007bff\" } }}\n                                                                required\n                                                            />\n                                                        </div></td>\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddAdditionalCondition"],"names":["AddAdditionalCondition","navigate","useNavigate","rowsData","setRowsData","useState","errors","setErrors","location","setLocation","useEffect","token","localStorage","getItem","undefined","locationList","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","HandleMultiselectChange","selectedList","index","rowsInput","handleChange","evnt","name","target","trim","prevErrors","_jsx","className","children","_jsxs","style","overflowX","width","onClick","addTableRows","feature","description","map","rows","splice","deleteTableRows","type","onChange","placeholder","autoComplete","required","Multiselect","options","selectedValues","onSelect","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","chips","background","e","preventDefault","some","row","swal","title","text","icon","requestOptions","body","JSON","stringify","status","message","button","setTimeout","error","console","log"],"sourceRoot":""}