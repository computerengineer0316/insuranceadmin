{"version":3,"file":"static/js/1374.757f51dc.chunk.js","mappings":"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","sources":["views/Medical/MedicalPlan/TableBenefits/viewTableBenefits.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst ViewTableBenefits = () => {\n  const navigate = useNavigate();\n  const [tableBenefit, setTabaleBenefits] = useState([]);\n  const [enabledRows, setEnabledRows] = useState({});\n  const [formData, setFormData] = useState([]);\n\n  const customURL = window.location.href;\n  const params = new URLSearchParams(customURL.split('?')[1]);\n  const ParamValue = params.get('id');\n  const ParamType = \"medical\";\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    }\n    else {\n      const url = window.location.href;\n      const url1 = url.split(\"/\")[3];\n      const url2 = url1.split(\"?\")[1];\n      const url3 = url2.split(\"&\");\n      const id = url3[0].split(\"=\")[1];\n\n      getTableBenefits(id);\n    }\n  }, []);\n\n  const handleCheckboxChange = (rowId) => {\n    setEnabledRows((prevState) => ({\n      ...prevState,\n      [rowId]: !prevState[rowId],\n    }));\n\n    setFormData((prevData) => {\n      const newData = [...prevData];\n      const existingDataIndex = newData.findIndex((item) => item.itemId === rowId);\n\n      if (existingDataIndex !== -1) {\n        newData[existingDataIndex] = {\n          ...newData[existingDataIndex],\n          checked: !newData[existingDataIndex].checked,\n        };\n      }\n      else {\n        const newItem = {\n          itemId: rowId,\n          checked: true,\n          benefit: '',\n          itemdesc: '',\n          value: '',\n        };\n        const benefitsItem = tableBenefit.find((item) => item._id === rowId);\n        if (benefitsItem) {\n          newItem.benefit = benefitsItem.table_benefit;\n          newItem.itemdesc = benefitsItem.table_benefit_description;\n        }\n        newData.push(newItem);\n      }\n      return newData;\n    });\n  };\n\n  const getTableBenefits = async (id) => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_medical_benefits`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const tableBenefits = data.data;\n\n        const benefitsLenght = tableBenefits.length;\n\n        for (let i = 0; i < benefitsLenght; i++) {\n          medicalBenefitsData(tableBenefits[i], id)\n        }\n      });\n  }\n\n  const medicalBenefitsData = (MedicalBenefits, id) => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/single_medical_plan_details/${id}`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const medicalPlanDetails = data.data.medical_benefits;\n        const medicalPlanDetailslen = medicalPlanDetails.length;\n        for (let i = 0; i < medicalPlanDetailslen; i++) {\n          if (medicalPlanDetails[i].itemId == MedicalBenefits._id) {\n            MedicalBenefits['itemdesc'] = medicalPlanDetails[i].itemdesc;\n            MedicalBenefits['value'] = medicalPlanDetails[i].value;\n          }\n        }\n        setTabaleBenefits((prevData) => [...prevData, MedicalBenefits]);\n\n      });\n  };\n  const handleInputChange = (e, itemId) => {\n    console.log(itemId)\n    const { name, value } = e.target;\n    setFormData((prevData) => {\n      const newData = [...prevData];\n      const existingDataIndex = newData.findIndex((item) => item.itemId === itemId);\n      if (existingDataIndex !== -1) {\n        newData[existingDataIndex] = {\n          ...newData[existingDataIndex],\n          [name]: value,\n        };\n      }\n      else {\n        newData.push({\n          itemId,\n          [name]: value,\n        });\n      }\n      return newData;\n    });\n  };\n\n  const handleSubmit = () => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ id: ParamValue, type: ParamType, formData: formData }),\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/add_medical_benefits`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        window.location.href = '/viewMedicalBenefits?id=' + ParamValue;\n      }\n      );\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"card \">\n            <div className=\"card-header\">\n              <div className='row'>\n                <div className='col-md-6'>\n                  <h4>Medical Benefits</h4>\n                </div>\n\n                <div className=\"col-md-6\">\n                  <a href=\"/medicalplan\" className=\"btn btn-primary\" style={{ float: 'right' }}>Back</a>\n                </div>\n              </div>\n            </div>\n            <div className=\"card-body\">\n              <table className=\"table table-bordered\">\n                <thead>\n                  <tr>\n                    <th><strong>#</strong></th>\n                    <th><strong>Feature</strong></th>\n                    <th><strong>Description</strong></th>\n                    <th><strong>value</strong></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {tableBenefit.map((item) => (\n                    <tr key={item._id}>\n                      <td>\n                        <div className=\"checkboxs\">\n                          <input\n                            className=\"form-check-input\"\n                            type=\"checkbox\"\n                            id=\"flexCheckDefault\"\n                            defaultChecked={item.itemdesc && item.value}\n                            onChange={() => handleCheckboxChange(item._id)}\n                          />\n                        </div>\n                      </td>\n                      <td>{item.table_benefit}</td>\n                      <td>\n                        <div className=\"form-group\">\n                          <input\n                            type=\"text\"\n                            name=\"description\"\n                            className=\"form-control\"\n                            disabled={!enabledRows[item._id] && !item.itemdesc}\n                            onChange={(e) => handleInputChange(e, item._id)}\n                            defaultValue={item.itemdesc ? item.itemdesc : item.table_benefit_description}\n                          />\n                        </div>\n                      </td>\n                      <td>\n                        <div className=\"form-group\">\n                          <input\n                            type=\"text\"\n                            name=\"value\"\n                            className=\"form-control\"\n                            disabled={!enabledRows[item._id] && !item.value}\n                            onChange={(e) => handleInputChange(e, item._id)}\n                            defaultValue={item.value}\n                          />\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <div className=\"card-footer\">\n              <button className='btn btn-primary' onClick={handleSubmit} style={{ float: 'right' }}>Submit</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div >\n  )\n}\n\nexport default ViewTableBenefits"],"names":["ViewTableBenefits","navigate","useNavigate","tableBenefit","setTabaleBenefits","useState","enabledRows","setEnabledRows","formData","setFormData","customURL","window","location","href","ParamValue","URLSearchParams","split","get","useEffect","token","localStorage","getItem","undefined","id","getTableBenefits","async","fetch","method","headers","then","response","json","data","tableBenefits","benefitsLenght","length","i","medicalBenefitsData","MedicalBenefits","medicalPlanDetails","medical_benefits","medicalPlanDetailslen","itemId","_id","itemdesc","value","prevData","handleInputChange","e","console","log","name","target","newData","existingDataIndex","findIndex","item","push","_jsx","className","children","_jsxs","style","float","map","type","defaultChecked","onChange","handleCheckboxChange","rowId","prevState","checked","newItem","benefit","benefitsItem","find","table_benefit","table_benefit_description","disabled","defaultValue","onClick","handleSubmit","requestOptions","body","JSON","stringify"],"sourceRoot":""}