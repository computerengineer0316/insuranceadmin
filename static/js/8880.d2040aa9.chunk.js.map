{"version":3,"file":"static/js/8880.d2040aa9.chunk.js","mappings":"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","sources":["views/Yacht/Yacht_Plan/Yacht_Questions/View_Yacht_Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Modal, Button } from 'react-bootstrap'\nimport { useNavigate } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport swal from 'sweetalert'\nimport Multiselect from 'multiselect-react-dropdown'\n\nconst View_Yacht_Questions = () => {\n    const navigate = useNavigate()\n    const [YachtQuestions, setYachtQuestions] = useState([])\n    const [visibleedit, setVisibleedit] = useState(false)\n    const [visibleAdd, setVisibleAdd] = useState(false)\n    const [masterPermission, setMasterpermission] = useState([])\n    const [location, setLocation] = useState([])\n    const [editData, setEditData] = useState([])\n    const [formdata, setFormdata] = useState({})\n    const [pageCount, setPageCount] = useState(0)\n    const [page, setPage] = useState(1)\n    const [perPage] = useState(10);\n    const [defaultLocation, setDefaultLocation] = useState([])\n    const [editClaimQuestionYear, setEditClaimQuestionYear] = useState('')\n    const [experianceType, setExperianceType] = useState('')\n\n    const API = 'https://insuranceapi-3o5t.onrender.com/api'\n    useEffect(() => {\n        const token = localStorage.getItem('token')\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        } else {\n            getYacht_Questions_List()\n            locationList()\n            const userdata = JSON.parse(localStorage.getItem('user'))\n            const master_permission = userdata?.master_permission?.[0] || {}\n            setMasterpermission(master_permission)\n        }\n    }, [])\n    const getYacht_Questions_List = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        fetch(`${API}/getAllYachtQuestions?page=${page}&limit=${perPage}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    const total = data.count;\n                    const slice = total / perPage;\n                    const pages = Math.ceil(slice);\n                    setPageCount(pages);\n                    setYachtQuestions(data.data)\n                }\n            })\n    }\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n                handleChange1(location_list, 'location');\n            });\n    }\n    const HandleInputChange = (e) => {\n        const { name, value } = e.target\n        setFormdata({ ...formdata, [name]: value })\n    }\n    const handleChange1 = (selectedOption, name) => {\n        setFormdata({ ...formdata, [\"location\"]: selectedOption })\n    }\n    const AddYachtQuestions = () => {\n        console.log(\"sadfsfsfsf >>>>>>>> \", formdata)\n        const requestOptions = {\n            method: 'POST',\n\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formdata),\n        }\n        fetch(`${API}/addYachtQuestion`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 201) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: \"OK\",\n                    });\n                    setVisibleAdd(false)\n                    getYacht_Questions_List(page, perPage)\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: \"OK\",\n                    });\n                }\n            });\n    }\n\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected\n        setPage(selectedPage + 1)\n        // getMotorClaimsYearsLink(perPage, selectedPage + 1)\n    }\n    const editYachtQuestions = (id) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        fetch(`${API}/getYachtQuestionbyid?id=${id}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setEditData(data.data[0])\n                    console.log(\"edit data >>>>>>>> hiii\", data.data)\n                    const locationdt = data.data[0].location;\n                    const location_list = [];\n                    for (let i = 0; i < locationdt.length; i++) {\n                        const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                        location_list.push(location_obj);\n                    }\n                    setDefaultLocation(location_list);\n                    setEditClaimQuestionYear(data.data[0]?.name)\n                    setExperianceType(data.data[0]?.claim_experience === true ? \"1\" : \"2\")\n                    setVisibleedit(true)\n                }\n            })\n    }\n    const updateYachtStatus = (id, status) => {\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ status: status }),\n        }\n        fetch(`${API}/UpdateYachtQuestion?id=${id}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 201) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: \"OK\",\n                    });\n                    getYacht_Questions_List(page, perPage)\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: \"OK\",\n                    });\n                }\n            })\n    }\n    const UpdateYachtQuestions = () => {\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: editClaimQuestionYear,\n                claim_experience: experianceType,\n                location: defaultLocation\n            }),\n        }\n        fetch(`${API}/UpdateYachtQuestion?id=${editData?._id}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 201) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: \"OK\",\n                    });\n                    setVisibleedit(false)\n                    getYacht_Questions_List(page, perPage)\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: \"OK\",\n                    });\n                }\n            })\n    }\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        fetch(`${API}/deleteYachtMaster?id=${id}&type=YachtQuestions`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: \"OK\",\n                    });\n                    getYacht_Questions_List(page, perPage)\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: \"OK\",\n                    });\n                }\n            })\n    }\n\n    const startFrom = (page - 1) * perPage;\n    return (\n        <>\n            <Container>\n                <div className=\"card mb-4\">\n                    <div className=\"card-header\">\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <h4 className=\"card-title\">Yacht Questions</h4>\n                            </div>\n                            <div className=\"col-md-6\" style={{ textAlign: 'right' }}>\n                                <div className=\"text-right\">\n                                    <button\n                                        className=\"btn btn-primary\"\n                                        onClick={() => setVisibleAdd(true)}\n                                    >\n                                        Add Yacht Questions\n                                    </button>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n\n                    <div className=\"card-body\" style={{ overflow: 'scroll' }}>\n                        <table className=\"table table-bordered\">\n                            <thead className=\"thead-dark\">\n                                <tr className=\"table-info\">\n                                    <th scope=\"col\">#</th>\n\n                                    <th scope=\"col\">Question</th>\n                                    <th scope=\"col\">Experience Type</th>\n                                    <th scope=\"col\">Location</th>\n                                    {/* <th scope=\"col\">Status</th> */}\n                                    <th scope=\"col\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {YachtQuestions?.length > 0 ? (\n                                    YachtQuestions.map((item, index) => (\n                                        <tr key={index}>\n                                            <td>{index + 1}</td>\n                                            <td className='text-wrap'>{item.name}</td>\n                                            <td>{item.claim_experience == true ? \"Claims Experience\" : \"Operators Experience\"}</td>\n                                            <td>{item.location?.map((Val) => Val.location_name).join(\", \")}</td>\n\n                                            {/* <td>{item.status == true ? 'Active' : 'Inactive'}</td> */}\n                                            <td>\n                                                {/* {masterPermission.motor_claim_question?.includes('edit') && ( */}\n                                                {item.status === true ? (\n                                                    <button className=\"btn btn-danger mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updateYachtStatus(item._id, 0); }}>Deactivate</button>\n                                                ) : (\n                                                    <button className=\"btn btn-success mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updateYachtStatus(item._id, 1); }}>Activate</button>\n                                                )}\n\n                                                <button\n                                                    className=\"btn btn-primary\"\n                                                    onClick={() => editYachtQuestions(item._id)}\n                                                >\n                                                    Edit\n                                                </button>\n                                                {/* )} */}\n                                                <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                                            </td>\n                                        </tr>\n                                    ))\n                                ) : (\n                                    <tr>\n                                        <td colSpan=\"6\">No Data Found</td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                        <ReactPaginate\n                            previousLabel={'Previous'}\n                            nextLabel={'Next'}\n                            breakLabel={'...'}\n                            pageCount={pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={3}\n                            onPageChange={handlePageClick}\n                            containerClassName={'pagination justify-content-end'}\n                            pageClassName={'page-item'}\n                            pageLinkClassName={'page-link'}\n                            previousClassName={'page-item'}\n                            previousLinkClassName={'page-link'}\n                            nextClassName={'page-item'}\n                            nextLinkClassName={'page-link'}\n                            breakClassName={'page-item'}\n                            breakLinkClassName={'page-link'}\n                            activeClassName={'active'}\n                        />\n                    </div>\n                </div>\n            </Container>\n\n            <Modal size=\"lg\" show={visibleedit} onHide={() => setVisibleedit(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Yacht Questions </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form\n                                        //   method=\"PUT\"\n                                        // onSubmit={(e) => UpdateYachtQuestions(editData?._id, e)}\n                                        >\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <label className=\"form-label\">\n                                                        <strong>Edit Yacht Questions</strong>\n                                                    </label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        name=\"name\"\n                                                        type=\"text\"\n                                                        defaultValue={editData?.name}\n                                                        onChange={(e) => setEditClaimQuestionYear(e.target.value)}\n                                                        required\n                                                    />\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\">\n                                                        <strong>Experience Type</strong>\n                                                    </label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"experience_type\"\n                                                        required\n                                                        onChange={(e) => setExperianceType(e.target.value)}\n                                                    >\n                                                        <option value=\"\" hidden>Select Experience Type</option>\n                                                        <option selected={editData?.claim_experience === true} value=\"1\">Claims Experience</option>\n                                                        <option selected={editData?.claim_experience === false} value=\"2\">Operators Experience</option>\n                                                        {/* <option value=\"3\">Expert</option> */}\n                                                    </select>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\">\n                                                        <strong>Locations</strong>\n                                                    </label>\n                                                    <Multiselect\n                                                        options={location}\n                                                        selectedValues={defaultLocation}\n                                                        displayValue=\"label\"\n                                                        onSelect={(evnt) => (setDefaultLocation(evnt))}\n                                                        onRemove={(evnt) => (setDefaultLocation(evnt))}\n                                                        placeholder=\"Select Location\"\n                                                        showCheckbox={true}\n                                                        closeOnSelect={false}\n                                                        required\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <div\n                                                        type=\"submit\"\n                                                        onClick={() => UpdateYachtQuestions()}\n                                                        className=\"btn btn-primary mt-2 submit_all\"\n                                                        style={{ float: 'right' }}\n                                                    >\n                                                        Submit\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            <Modal size=\"lg\" show={visibleAdd} onHide={() => setVisibleAdd(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Yacht Questions </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form\n                                        //   method=\"PUT\"\n                                        // onSubmit={(e) => UpdateYachtQuestions(editData?._id, e)}\n                                        >\n                                            <div className=\"row\">\n                                                <div className=\"col-md-4\">\n                                                    <label className=\"form-label\">\n                                                        <strong>Add Yacht Questions</strong>\n                                                    </label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        name=\"question\"\n                                                        type=\"text\"\n                                                        onChange={(e) => HandleInputChange(e)}\n                                                        required\n                                                    />\n                                                </div>\n                                                <div className=\"col-md-4\">\n                                                    <label className=\"form-label\">\n                                                        <strong>Experience Type</strong>\n                                                    </label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"experience_type\"\n                                                        required\n                                                        onChange={(e) => HandleInputChange(e)}\n                                                    >\n                                                        <option value=\"\" hidden>Select Experience Type</option>\n                                                        <option value=\"1\">Claims Experience</option>\n                                                        <option value=\"2\">Operators Experience</option>\n                                                        {/* <option value=\"3\">Expert</option> */}\n                                                    </select>\n                                                </div>\n                                                <div className=\"col-md-4\">\n                                                    <label className=\"form-label\">\n                                                        <strong>Locations</strong>\n                                                    </label>\n                                                    <Multiselect\n                                                        options={location}\n                                                        selectedValues={location}\n                                                        displayValue=\"label\"\n                                                        onSelect={(evnt) => (handleChange1(evnt, 'location'))}\n                                                        onRemove={(evnt) => (handleChange1(evnt, 'location'))}\n                                                        placeholder=\"Select Location\"\n                                                        showCheckbox={true}\n                                                        closeOnSelect={false}\n                                                        required\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <div\n                                                        type=\"submit\"\n                                                        onClick={() => AddYachtQuestions()}\n                                                        className=\"btn btn-primary mt-2 submit_all\"\n                                                        style={{ float: 'right' }}\n                                                    >\n                                                        Submit\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n\nexport default View_Yacht_Questions\n"],"names":["View_Yacht_Questions","navigate","useNavigate","YachtQuestions","setYachtQuestions","useState","visibleedit","setVisibleedit","visibleAdd","setVisibleAdd","masterPermission","setMasterpermission","location","setLocation","editData","setEditData","formdata","setFormdata","pageCount","setPageCount","page","setPage","perPage","defaultLocation","setDefaultLocation","editClaimQuestionYear","setEditClaimQuestionYear","experianceType","setExperianceType","API","useEffect","token","localStorage","getItem","undefined","_userdata$master_perm","getYacht_Questions_List","locationList","userdata","JSON","parse","master_permission","fetch","method","headers","then","response","json","data","status","slice","count","pages","Math","ceil","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","handleChange1","HandleInputChange","e","name","target","selectedOption","updateYachtStatus","id","requestOptions","body","stringify","swal","title","text","message","icon","button","_jsxs","_Fragment","children","_jsx","Container","className","style","textAlign","onClick","overflow","scope","map","item","index","_item$location","claim_experience","Val","join","window","confirm","editYachtQuestions","_data$data$","_data$data$2","console","log","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","Modal","size","show","onHide","Header","closeButton","Title","Body","type","defaultValue","onChange","required","hidden","Multiselect","options","selectedValues","displayValue","onSelect","evnt","onRemove","placeholder","showCheckbox","closeOnSelect","UpdateYachtQuestions","float","Footer","Button","variant","AddYachtQuestions"],"sourceRoot":""}