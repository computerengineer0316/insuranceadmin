{"version":3,"file":"static/js/3880.afeeec0f.chunk.js","mappings":"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","sources":["views/Medical/medical_network/ViewmedicalNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Modal, Button } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport ReacNetworkginate from \"react-paginate\";\nimport filePath from '../../../webroot/sample-files/medical-network.xlsx';\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\n// import filePath from '../../../../webroot/sample-files/Maternity-Condition';\nimport Multiselect from 'multiselect-react-dropdown';\nimport DatePicker from \"react-datepicker\";  //https://www.npmjs.com/package/react-datepicker\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst ViewmedicalNetwork = () => {\n    const navigate = useNavigate();\n    const [data, setData] = useState([]);\n    const [perPage] = useState(10);\n    const [pageCount, seNetworkgeCount] = useState(0);\n    const [page, seNetworkge] = useState(1);\n    const [excelfile, setExcelfile] = useState(\"\");\n    const [usertype, setUsertype] = useState('');\n    const [usertype_status, setUsertypestatus] = useState('');\n    const [id, setId] = useState('');\n    const [visible, setVisible] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [visibleedit, setVisibleedit] = useState(false);\n    const [masterpermission, setMasterpermission] = useState([]);\n    const [selectedOption, setSelectedOption] = useState([]);\n    const [selectedTPA, setSelectedTPA] = useState(\"\");\n    const [location, setLocation] = useState([]);\n    const [medicalNetwork, setMedicalNetwork] = useState('');\n    const [medicalNetworktatus, setmedicalNetworktatus] = useState('');\n    const [medicalNetworkid, setMedicalNetworkid] = useState('');\n    const [medicalNetworkedit, setMedicalNetworkedit] = useState('');\n    const [activeMedicalTPA, setactiveMedicalTPA] = useState([])\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            getNetwork(page, perPage);\n            const userdata = JSON.parse(localStorage.getItem('user'));\n            const master_permission = userdata?.medical_permission?.[0] || {};\n            setMasterpermission(master_permission);\n            exportlistdata();\n            locationList();\n            activeMedicalTPAList();\n        }\n    }, [])\n\n    const activeMedicalTPAList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/activeMedicalTPA`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                setactiveMedicalTPA(locationdt)\n            });\n    }\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                setLocation(locationdt);\n                handleChange(locationdt);\n            });\n    }\n\n\n\n\n    const [maternitycondition, setMaternitycondition] = useState('');\n\n    const getNetwork = (page, perPage) => {\n        setData([]);\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalNetwork?limit=${perPage}&page=${page}`, requestOptions)\n            .then(response => response.json())\n            .then(\n                data => {\n                    const total = data.count;\n                    const slice = total / perPage;\n                    const pages = Math.ceil(slice);\n                    seNetworkgeCount(pages);\n                    const list = data.data;\n                    setData(list)\n                }\n            );\n    }\n\n    console.log(data)\n    const [exportlist, setExportlist] = useState([]);\n    const exportlistdata = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/medicalNetwork', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setExportlist(data.data);\n                console.log(data.data, \"export data\")\n\n            });\n    }\n    const fileType = 'xlsx'\n    const exporttocsv = () => {\n        const updatedData = exportlist?.map((item, index) => {\n            return {\n\n                'Name': item.name,\n                'TPA': item.TPAData?.map((val) => val.name).join(\", \"),\n                'Location': item.location.map((val) => val.location_name).join(\", \")\n            }\n        })\n        const ws = XLSX.utils.json_to_sheet(updatedData);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n        const newdata = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(newdata, \"Medical-Network\" + \".xlsx\")\n    }\n\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        seNetworkge(selectedPage + 1);\n        getNetwork(selectedPage + 1, perPage);\n    };\n\n\n    const updatestatus = async (id, status) => {\n\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalNetwork?id=${id}`, {\n            method: 'put',\n            body: JSON.stringify({ status: status }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        result = await result.json();\n        swal(\"Updated Succesfully\", \"\", \"success\");\n        getNetwork(page, perPage)\n    }\n\n    const collectExceldata = async (e) => {\n        e.preventDefault()\n        const fd = new FormData()\n        fd.append('file', excelfile)\n        let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_medical_network_excel\",\n            {\n                method: \"post\",\n                body: fd,\n            })\n        result = await result.json();\n        if (result.status == 200) {\n            setVisible(!visible)\n            swal({\n                text: result.message,\n                type: \"success\",\n                icon: \"success\",\n                button: false,\n            })\n            getNetwork(page, perPage);\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n        else {\n            setVisible(!visible)\n            swal({\n                title: \"Error!\",\n                text: result.message,\n                type: \"error\",\n                icon: \"error\",\n                button: \"ok\",\n            })\n            getNetwork(page, perPage);\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n    }\n\n\n    const addmaternitycondition = async (e) => {\n        e.preventDefault();\n\n        await fetch('https://insuranceapi-3o5t.onrender.com/api/maternity', {\n            method: 'post',\n            body: JSON.stringify({ condition: maternitycondition }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200) {\n                    setShowModal(false);\n                    swal({\n\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getNetwork(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getNetwork(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n\n\n\n\n    const getdetails = async (ParamValue) => {\n        setId(ParamValue);\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalNetworkBYId?id=${ParamValue}`, requestOptions);\n        result = await result.json();\n        console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\", result.data)\n        setMedicalNetwork(result.data[0]?.name);\n        setmedicalNetworktatus(result.data[0]?.status);\n        const locationid = result.data[0]?.locations;\n        const tpa = result.data[0]?.TPAData;\n        console.log(\"tpa>>>\", tpa)\n        setSelectedTPA(tpa?.[0]?._id)\n        setSelectedOption(locationid);\n        setVisibleedit(true);\n    }\n    const handleChange = (selectedOption) => {\n        setSelectedOption(selectedOption);\n    }\n\n\n\n    const [editmaternitycondition, setEdittermscondition] = useState('');\n\n    const updateNetwork = async (e) => {\n        e.preventDefault();\n        if (medicalNetwork == '') {\n            swal({\n\n                text: \"Please enter Network\",\n                type: \"warning\",\n                icon: \"warning\",\n                button: false,\n            })\n            getNetwork(page, perPage);\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n            return false;\n        }\n        if (selectedOption == '') {\n            swal({\n\n                text: \"Please select location\",\n                type: \"warning\",\n                icon: \"warning\",\n                button: false,\n            })\n            getNetwork(page, perPage);\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n            return false;\n        }\n        const data = new FormData(e.target);\n        const Network = data.get(\"name\");\n        const tpaid = data.get(\"TPAID\")\n        const Network_location = selectedOption;\n        const Network_location_len = Network_location.length;\n        const Network_location_str = [];\n        for (let i = 0; i < Network_location_len; i++) {\n            Network_location_str.push(Network_location[i]._id);\n        }\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalNetwork?id=${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify({\n                name: Network,\n                location: Network_location_str,\n                TPAID: tpaid\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200) {\n                    setVisibleedit(false)\n                    swal({\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getNetwork(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setVisibleedit(false)\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getNetwork(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n\n    }\n\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMedicalMaster/?id=${id}&type=Network`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getNetwork(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getNetwork(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n\n            })\n    }\n    const AddCondition = () => {\n        navigate(\"/AddmedicalNetwork\")\n    }\n    const startFrom = (page - 1) * perPage;\n\n    return (\n        <>\n            <Container>\n                <div className=\"card mb-4\">\n                    <div className=\"card-header\">\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <h4 className=\"card-title\">Network</h4>\n                            </div>\n                            <div className=\"col-md-6\">\n                                {masterpermission?.network?.includes('create') ?\n                                    <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddCondition(true)}>Add Network</button>\n                                    : ''}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"card-header\" style={{ textAlign: 'right' }}>\n                        {masterpermission?.network?.includes('download') ?\n                            <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }}\n                                href={filePath}\n                                download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n                            : ''}\n                        {masterpermission?.network?.includes('upload') ?\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n                            : ''}\n                        {masterpermission?.network?.includes('export') ?\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n                            : ''}\n                    </div>\n                    <div className=\"card-body\">\n                        <table className=\"table table-bordered\">\n                            <thead className=\"thead-dark\">\n                                <tr className=\"table-info\">\n                                    <th scope=\"col\">#</th>\n                                    {/* <th scope=\"col\">userId</th> */}\n                                    <th scope=\"col\">name</th>\n                                    <th scope=\"col\">location</th>\n                                    <th scope=\"col\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    data?.length > 0 ?\n                                        data.map((item, index) =>\n                                            <tr key={index}>\n                                                <td>{startFrom + index + 1}</td>\n                                                {/* <td>{item.userId}</td> */}\n                                                <td>{item.name}</td>\n                                                {/* <td>{new Date(item.startDate).toLocaleString()}</td> */}\n                                                <td>{item.locations.map((val) => val.location_name).join(\", \")}</td>\n                                                <td>\n                                                    {masterpermission?.network?.includes('edit') && (\n                                                        <button className=\"btn btn-primary\" onClick={() => getdetails(item._id)}>Edit</button>\n                                                    )}\n                                                    {' '}\n                                                    {masterpermission?.network?.includes('delete') && (\n                                                        <>\n                                                            {\n                                                                item.status === 1 ?\n                                                                    <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                                                    <button className=\"btn btn-success\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                                                            }\n                                                            <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                                                        </>\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        ) : <tr>\n                                            <td colSpan=\"6\">No Data Found</td>\n                                        </tr>\n                                }\n                            </tbody>\n                        </table>\n                        <ReacNetworkginate\n                            previousLabel={\"Previous\"}\n                            nextLabel={\"Next\"}\n                            breakLabel={\"...\"}\n                            pageCount={pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={3}\n                            onPageChange={handlePageClick}\n                            containerClassName={\"pagination justify-content-end\"}\n                            pageClassName={\"page-item\"}\n                            pageLinkClassName={\"page-link\"}\n                            previousClassName={\"page-item\"}\n                            previousLinkClassName={\"page-link\"}\n                            nextClassName={\"page-item\"}\n                            nextLinkClassName={\"page-link\"}\n                            breakClassName={\"page-item\"}\n                            breakLinkClassName={\"page-link\"}\n                            activeClassName={\"active\"}\n                        />\n                    </div>\n                </div>\n\n            </Container>\n            <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                    <CModalTitle>Upload Excel File</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div >\n                        {/* <label className=\"form-label\"><strong>Upload Excel File</strong></label> */}\n                        <input type=\"file\" className=\"form-control\" id=\"DHA\" defaultValue=\"\" required\n                            onChange={(e) => setExcelfile(e.target.files[0])} />\n                    </div>\n\n                </CModalBody>\n                <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n                        Close\n                    </CButton>\n                    <CButton color=\"primary\" onClick={collectExceldata} href={'/Viewtraveltype'}>Upload</CButton>\n                </CModalFooter>\n            </CModal>\n\n            <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Maternity Conditions</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n\n                                    <div className=\"card-body\">\n                                        <form>\n                                            <div className=\"row\">\n\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\"><strong>Add Maternity Condition</strong></label>\n\n                                                    <textarea className=\"form-control\" rows=\"3\" cols=\"10\" name=\"terms_constions\" placeholder=\"Enter Maternity Condition\" onChange={(e) => setMaternitycondition(e.target.value)} />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }} onClick={addmaternitycondition}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal size='lg' show={visibleedit} onHide={() => setVisibleedit(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Network</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updateNetwork} >\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n\n                                                    <label className=\"form-label\"><strong>Edit Network</strong></label>\n                                                    <input type='text' className=\"form-control\"\n                                                        name='name'\n                                                        placeholder='Name'\n                                                        defaultValue={medicalNetwork}\n                                                        required\n                                                    />\n                                                </div>\n                                                <div className=\"col-md-6\">\n\n                                                    <label className=\"form-label\"><strong>Edit TPA</strong></label>\n                                                    <select className=\"form-control\" defaultValue={selectedTPA} name=\"TPAID\" placeholder=\"TPAID\" autoComplete=\"off\" required >\n                                                        {\n\n                                                            activeMedicalTPA.length > 0 ? (<>\n\n\n                                                                {\n                                                                    activeMedicalTPA.map((item) => (\n                                                                        <option value={item._id} key={item._id}>{item.name}</option>\n                                                                    ))\n                                                                }\n\n                                                            </>) : <option>Select TPA</option>\n                                                        }\n                                                    </select>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\"><strong>Select Location</strong></label>\n\n                                                    <Multiselect\n                                                        options={location}\n                                                        selectedValues={selectedOption}\n                                                        onSelect={handleChange}\n                                                        onRemove={handleChange}\n                                                        displayValue=\"location_name\"\n                                                        placeholder=\"Select Location\"\n                                                        closeOnSelect={false}\n                                                        avoidHighlightFirstOption={true}\n                                                        showCheckbox={true}\n                                                        style={{ chips: { background: \"#007bff\" } }}\n                                                        required\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n\nexport default ViewmedicalNetwork;"],"names":["ViewmedicalNetwork","_masterpermission$net","_masterpermission$net2","_masterpermission$net3","_masterpermission$net4","navigate","useNavigate","data","setData","useState","perPage","pageCount","seNetworkgeCount","page","seNetworkge","excelfile","setExcelfile","usertype","setUsertype","usertype_status","setUsertypestatus","id","setId","visible","setVisible","showModal","setShowModal","visibleedit","setVisibleedit","masterpermission","setMasterpermission","selectedOption","setSelectedOption","selectedTPA","setSelectedTPA","location","setLocation","medicalNetwork","setMedicalNetwork","medicalNetworktatus","setmedicalNetworktatus","medicalNetworkid","setMedicalNetworkid","medicalNetworkedit","setMedicalNetworkedit","activeMedicalTPA","setactiveMedicalTPA","useEffect","token","localStorage","getItem","undefined","_userdata$medical_per","getNetwork","userdata","JSON","parse","master_permission","medical_permission","exportlistdata","locationList","activeMedicalTPAList","fetch","method","headers","then","response","json","locationdt","handleChange","maternitycondition","setMaternitycondition","slice","count","pages","Math","ceil","list","console","log","exportlist","setExportlist","updatestatus","async","status","result","body","stringify","swal","editmaternitycondition","setEdittermscondition","startFrom","_jsxs","_Fragment","children","_jsx","Container","className","network","includes","style","float","onClick","textAlign","backgroundColor","marginRight","href","filePath","download","exporttocsv","updatedData","map","item","index","_item$TPAData","name","TPAData","val","join","location_name","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","booktype","type","newdata","Blob","FileSaver","scope","length","_masterpermission$net5","_masterpermission$net6","locations","_result$data$","_result$data$2","_result$data$3","_result$data$4","_tpa$","ParamValue","locationid","tpa","_id","getdetails","window","confirm","title","text","message","icon","button","setTimeout","deleteItem","colSpan","ReacNetworkginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","defaultValue","required","onChange","target","files","CModalFooter","CButton","color","preventDefault","fd","FormData","append","Modal","size","show","onHide","Header","closeButton","Title","Body","rows","cols","placeholder","value","condition","Footer","Button","variant","action","onSubmit","Network","get","tpaid","Network_location","Network_location_len","Network_location_str","i","push","TPAID","autoComplete","Multiselect","options","selectedValues","onSelect","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","chips","background"],"sourceRoot":""}