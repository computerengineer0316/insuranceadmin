{"version":3,"file":"static/js/5511.824f5be2.chunk.js","mappings":"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","sources":["views/Medical/medical_plan_type/Viewmedicalplantype.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Modal, Button } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport filePath from '../../../webroot/sample-files/medical-plan-type.xlsx'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\n\n\nconst Viewmedicalplantype = () => {\n\n  const navigate = useNavigate();\n  const [data, setData] = useState([]);\n  const [perPage] = useState(5);\n  const [pageCount, setPageCount] = useState(0);\n  const [page, setPage] = useState(1);\n  const [excelfile, setExcelfile] = useState(\"\");\n  const [location, setLocation] = useState([]);\n  const [selectedOption, setSelectedOption] = useState([]);\n  const [medical_plan_type, setMedicalplantype] = useState('');\n  const [medical_plan_type_status, setMedicalplantypestatus] = useState();\n  const [medical_plan_type_id, setMedicalplantypeid] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [visibleedit, setVisibleedit] = useState(false);\n  const [medicalpermission, setMedicalpermission] = useState([]);\n  const [defaultLocation, setDefaultLocale] = useState([])\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    }\n    else {\n      getmedicalplantype(page, perPage);\n      locationList();\n      exportlistdata();\n      const userdata = JSON.parse(localStorage.getItem('user'));\n      const medical_permission = userdata?.medical_permission?.[0] || {};\n      setMedicalpermission(medical_permission);\n    }\n  }, [])\n\n  const getmedicalplantype = async (page, perPage) => {\n    setData([]);\n\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/get_medical_plan_type?page=${page}&limit=${perPage}`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const total = data.total;\n        const slice = total / perPage;\n        const pages = Math.ceil(slice);\n        setPageCount(pages);\n        const list = data.data;\n        console.log(\">>>>>>>>>>>>>> this is list\", list)\n        setData(list)\n\n      });\n  }\n  const [exportlist, setExportlist] = useState([]);\n  const exportlistdata = () => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch('https://insuranceapi-3o5t.onrender.com/api/get_medical_plan_type', requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        setExportlist(data.data);\n      });\n  }\n  const fileType = 'xlsx'\n  const exporttocsv = () => {\n    const updatedData = exportlist.map((item, index) => {\n      return {\n\n        'medical_plan_type': item.medical_plan_type,\n        'medical_plan_type_location': item.medical_plan_type_location.map((item) => item.location_name).join(\", \"),\n      }\n    })\n\n    const ws = XLSX.utils.json_to_sheet(updatedData);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n    const newdata = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(newdata, \"Medical-Plan-Type\" + \".xlsx\")\n  }\n\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    setPage(selectedPage + 1);\n    getmedicalplantype(selectedPage + 1, perPage);\n  };\n\n  const updatestatus = async (id, medical_plan_type_status) => {\n    let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/update_medical_plan_type_status', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ id, medical_plan_type_status })\n    })\n    result = await result.json();\n    swal(\"Success!\", \"Status Updated Successfully!\", \"success\");\n    getmedicalplantype(page, perPage);\n  }\n\n  const collectExceldata = async (e) => {\n    e.preventDefault()\n    const fd = new FormData()\n    fd.append('file', excelfile)\n    let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_medical_plan_type_excel \",\n      {\n        method: \"post\",\n        body: fd,\n      })\n    result = await result.json()\n    console.log(result, \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> data\")\n    if (result.status === 200) {\n      setVisible(!visible)\n      swal({\n        text: result.message,\n        type: \"success\",\n        icon: \"success\",\n        button: false,\n      })\n      getmedicalplantype(page, perPage);\n      setTimeout(() => {\n        swal.close()\n      }, 1000);\n    }\n    else {\n      setVisible(!visible)\n      swal({\n        title: \"Error!\",\n        text: result.message,\n        type: \"error\",\n        icon: \"error\",\n        button: \"ok\",\n      })\n      getmedicalplantype(page, perPage);\n      setTimeout(() => {\n        swal.close()\n      }, 1000);\n    }\n\n  }\n\n  const locationList = () => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const locationdt = data.data;\n        console.log(locationdt, \"all locations\")\n        setLocation(locationdt);\n        setSelectedOption(locationdt);\n\n      });\n  }\n\n  const addmedicalplantype = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const medical_plan_type = data.get('medical_plan_type');\n    const medical_plan_type_location = selectedOption;\n    const medical_plan_type_location_len = medical_plan_type_location.length;\n    const medical_plan_type_location_str = [];\n    for (let i = 0; i < medical_plan_type_location_len; i++) {\n      medical_plan_type_location_str.push(medical_plan_type_location[i]._id);\n    }\n\n    await fetch('https://insuranceapi-3o5t.onrender.com/api/add_medical_plan_type', {\n      method: 'post',\n      body: JSON.stringify({\n        medical_plan_type: medical_plan_type,\n        medical_plan_type_location: medical_plan_type_location_str,\n\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setShowModal(false);\n          swal({\n            text: data.message,\n            type: \"success\",\n            icon: \"success\",\n            button: false,\n          })\n          getmedicalplantype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          setShowModal(false);\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\",\n            button: false,\n          })\n          getmedicalplantype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n      });\n  }\n\n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n  }\n\n  const detailsbyid = async (ParamValue) => {\n    setMedicalplantypeid(ParamValue);\n    const requestOptions = {\n      method: \"post\",\n      body: JSON.stringify({ ParamValue }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_medical_plan_type_detailsbyid`, requestOptions);\n    result = await result.json();\n    setMedicalplantype(result.data[0]?.medical_plan_type);\n    setMedicalplantypestatus(result.data[0]?.medical_plan_type_status);\n    const locationid = result.data[0]?.plan_type_location;\n    console.log(locationid, \">>>>>>>>>>>>>>> id locations\")\n    setDefaultLocale(locationid);\n    setVisibleedit(true);\n  }\n\n\n\n  const updatemedicalplantypelist = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const medical_plan_type = data.get('medical_plan_type');\n    const medical_plan_type_location = selectedOption;\n    await fetch(`https://insuranceapi-3o5t.onrender.com/api/update_medical_plan_type_details`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        ParamValue: medical_plan_type_id,\n        medical_plan_type: medical_plan_type,\n        medical_plan_type_location: selectedOption,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setVisibleedit(false)\n          swal({\n            text: data.message,\n            type: \"success\",\n            icon: \"success\",\n            button: false,\n          })\n          getmedicalplantype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          setVisibleedit(false)\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\",\n            button: false,\n          })\n          getmedicalplantype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n      });\n  }\n  const deleteItem = (id) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMedicalMaster/?id=${id}&type=medicalPlanType`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        if (data.status === 200) {\n          swal({\n            title: \"Success!\",\n            text: data.message,\n            icon: \"success\",\n            button: false,\n          })\n          getmedicalplantype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            icon: \"error\",\n            button: false,\n          })\n          getmedicalplantype(page, perPage);\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n\n      })\n  }\n\n  const AddPlanType = () => {\n    navigate(\"/Addmedicalplantype\")\n  }\n\n\n  return (\n    <>\n      <Container>\n        <div className=\"card mb-4\">\n          <div className=\"card-header\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <h4 className=\"card-title\">Plan Type Details</h4>\n              </div>\n              <div className=\"col-md-6\">\n                {medicalpermission.plan_type?.includes('create') ?\n                  <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddPlanType()}>Add Plan Type</button>\n                  : ''}\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"card-header\" style={{ textAlign: 'right' }}>\n            {medicalpermission.plan_type?.includes('download') ?\n              <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={filePath} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n              : ''}\n            {medicalpermission.plan_type?.includes('upload') ?\n              <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n              : ''}\n            {medicalpermission.plan_type?.includes('export') ?\n              <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n              : ''}\n          </div> */}\n          <div className=\"card-body\">\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-dark\">\n                <tr className=\"table-info\">\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Type</th>\n                  <th scope=\"col\">Location</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  data?.length > 0 ?\n                    data.map((item, index) =>\n                      <tr key={index}>\n                        <td>{index + 1}</td>\n                        <td>{item.medical_plan_type}</td>\n                        <td>{item.medical_plan_type_location?.map((val) => val.location_name).join(\", \")}</td>\n                        <td>\n                          {medicalpermission.plan_type?.includes('edit') && (\n                            <button className=\"btn btn-primary\" onClick={() => detailsbyid(item._id)}>Edit</button>\n                          )}\n                          {' '}\n                          {medicalpermission.plan_type?.includes('delete') && (\n                            <>\n                              {\n                                item.medical_plan_type_status === 1 ?\n                                  <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                  <button className=\"btn btn-success\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                              }\n                              <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                            </>\n                          )}\n                        </td>\n\n                      </tr>\n                    ) : <tr>\n                      <td colSpan=\"6\">No Data Found</td>\n                    </tr>\n                }\n              </tbody>\n            </table>\n            <ReactPaginate\n              previousLabel={\"Previous\"}\n              nextLabel={\"Next\"}\n              breakLabel={\"...\"}\n              pageCount={pageCount}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={3}\n              onPageChange={handlePageClick}\n              containerClassName={\"pagination justify-content-end\"}\n              pageClassName={\"page-item\"}\n              pageLinkClassName={\"page-link\"}\n              previousClassName={\"page-item\"}\n              previousLinkClassName={\"page-link\"}\n              nextClassName={\"page-item\"}\n              nextLinkClassName={\"page-link\"}\n              breakClassName={\"page-item\"}\n              breakLinkClassName={\"page-link\"}\n              activeClassName={\"active\"}\n            />\n          </div>\n        </div>\n\n      </Container>\n\n      <CModal alignment='center' visible={visible} onClose={() => setVisible(false)}>\n        <CModalHeader onClose={() => setVisible(false)}>\n          <CModalTitle>Upload Excel File</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <div >\n            {/* <label className=\"form-label\"><strong>Upload Excel File</strong></label> */}\n            <input type=\"file\" className=\"form-control\" id=\"DHA\" defaultValue=\"\" required\n              onChange={(e) => setExcelfile(e.target.files[0])} />\n          </div>\n\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n            Close\n          </CButton>\n          <CButton color=\"primary\" onClick={collectExceldata} href={'/Viewtraveltype'}>Upload</CButton>\n        </CModalFooter>\n      </CModal>\n\n      <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Add Plan Type</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n\n                  <div className=\"card-body\">\n                    <form action=\"/\" method=\"POST\" onSubmit={addmedicalplantype}>\n                      <div className=\"row\">\n                        <div className=\"col-md-6\">\n\n                          <label className=\"form-label\"><strong>Add Plan Type</strong></label>\n                          <input type='text' className=\"form-control\"\n                            name='medical_plan_type'\n                            placeholder=\"Enter Plan Type\"\n                            defaultValue=\"\"\n                          />\n                        </div>\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Select Location</strong></label>\n\n                          <Multiselect\n                            options={location}\n                            selectedValues={selectedOption}\n                            displayValue=\"location_name\"\n                            onSelect={setSelectedOption}\n                            onRemove={setSelectedOption}\n                            placeholder=\"Select Location\"\n                            showCheckbox={true}\n                            required\n                          />\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-primary mt-2\" style={{ float: \"right\" }}>Submit</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal size='lg' show={visibleedit} onHide={() => setVisibleedit(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Plan Type</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n\n                  <div className=\"card-body\">\n                    <form action=\"/\" method=\"POST\" onSubmit={updatemedicalplantypelist}>\n                      <div className=\"row\">\n                        <div className=\"col-md-6\">\n\n                          <label className=\"form-label\"><strong>Edit Plan Type</strong></label>\n                          <input type='text' className=\"form-control\"\n                            name='medical_plan_type'\n                            placeholder='Name'\n                            defaultValue={medical_plan_type}\n                            onChange={(e) => setMedicalplantype(e.target.value)}\n                          />\n                        </div>\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Select Location</strong></label>\n\n                          <Multiselect\n                            options={location}\n                            selectedValues={defaultLocation}\n                            onSelect={setSelectedOption}\n                            onRemove={setSelectedOption}\n                            displayValue=\"location_name\"\n                            placeholder=\"Select Location\"\n                            closeOnSelect={false}\n                            avoidHighlightFirstOption={true}\n                            showCheckbox={true}\n                            style={{ chips: { background: \"#007bff\" } }}\n                            required\n                          />\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default Viewmedicalplantype"],"names":["Viewmedicalplantype","_medicalpermission$pl","navigate","useNavigate","data","setData","useState","perPage","pageCount","setPageCount","page","setPage","excelfile","setExcelfile","location","setLocation","selectedOption","setSelectedOption","medical_plan_type","setMedicalplantype","medical_plan_type_status","setMedicalplantypestatus","medical_plan_type_id","setMedicalplantypeid","visible","setVisible","showModal","setShowModal","visibleedit","setVisibleedit","medicalpermission","setMedicalpermission","defaultLocation","setDefaultLocale","useEffect","token","localStorage","getItem","undefined","_userdata$medical_per","getmedicalplantype","locationList","exportlistdata","userdata","JSON","parse","medical_permission","async","requestOptions","method","headers","fetch","then","response","json","slice","total","pages","Math","ceil","list","console","log","exportlist","setExportlist","updatestatus","id","result","body","stringify","swal","locationdt","_jsxs","_Fragment","children","_jsx","Container","className","plan_type","includes","style","float","onClick","scope","length","map","item","index","_item$medical_plan_ty","_medicalpermission$pl2","_medicalpermission$pl3","medical_plan_type_location","val","location_name","join","_result$data$","_result$data$2","_result$data$3","ParamValue","locationid","plan_type_location","detailsbyid","_id","window","confirm","status","title","text","message","icon","button","setTimeout","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","type","defaultValue","required","onChange","target","files","CModalFooter","CButton","color","preventDefault","fd","FormData","append","href","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","get","medical_plan_type_location_len","medical_plan_type_location_str","i","push","name","placeholder","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","Footer","Button","variant","value","closeOnSelect","avoidHighlightFirstOption","chips","background"],"sourceRoot":""}