{"version":3,"file":"static/js/7432.33950dd1.chunk.js","mappings":"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","sources":["views/Medical/medical_declaration/Viewmedicaldeclaration.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Modal, Button } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport filePath from '../../../webroot/sample-files/maternity-condition.xlsx';\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\n// import filePath from '../../../../webroot/sample-files/Maternity-Condition';\nimport Multiselect from 'multiselect-react-dropdown';\nimport DatePicker from \"react-datepicker\";  //https://www.npmjs.com/package/react-datepicker\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst Viewmedicaldeclaration = () => {\n    const navigate = useNavigate();\n    const [data, setData] = useState([]);\n    const [perPage] = useState(10);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [excelfile, setExcelfile] = useState(\"\");\n    const [usertype, setUsertype] = useState('');\n    const [usertype_status, setUsertypestatus] = useState('');\n    const [id, setId] = useState('');\n    const [visible, setVisible] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [visibleedit, setVisibleedit] = useState(false);\n    const [masterpermission, setMasterpermission] = useState([]);\n    const [selectedOption, setSelectedOption] = useState([]);\n    const [location, setLocation] = useState([]);\n    const [medicaldeclaration, setMedicalDeclaration] = useState('');\n    const [medicaldeclarationstatus, setMedicaldeclarationstatus] = useState('');\n    const [medicaldeclarationid, setMedicaldeclarationid] = useState('');\n    const [medicaldeclarationedit, setMedicaldeclarationedit] = useState('');\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            getdeclaration(page, perPage);\n            const userdata = JSON.parse(localStorage.getItem('user'));\n            const master_permission = userdata?.master_permission?.[0] || {};\n            setMasterpermission(master_permission);\n            exportlistdata();\n            locationList();\n        }\n    }, [])\n\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                setLocation(locationdt);\n                handleChange(locationdt);\n            });\n    }\n\n\n\n\n    const [maternitycondition, setMaternitycondition] = useState('');\n    const [details, setDetails] = useState([]);\n\n\n    const getdeclaration = (page, perPage) => {\n        setData([]);\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalDeclarations?limit=${perPage}&page=${page}`, requestOptions)\n            .then(response => response.json())\n            .then(\n                data => {\n                    const total = data.count;\n                    const slice = total / perPage;\n                    const pages = Math.ceil(slice);\n                    setPageCount(pages);\n                    const list = data.data;\n                    setData(list)\n                }\n            );\n    }\n\n    console.log(data)\n    const [exportlist, setExportlist] = useState([]);\n    const exportlistdata = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/get_maternity', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setExportlist(data.data);\n            });\n    }\n    const fileType = 'xlsx'\n    const exporttocsv = () => {\n        const updatedData = exportlist.map((item, index) => {\n            return {\n\n                'Condition': item.condition,\n            }\n        })\n        const ws = XLSX.utils.json_to_sheet(updatedData);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n        const newdata = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(newdata, \"Maternity-conditions\" + \".xlsx\")\n    }\n\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        getdeclaration(selectedPage + 1, perPage);\n    };\n\n\n    const updatestatus = async (id, status) => {\n\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalDeclaration?id=${id}`, {\n            method: 'put',\n            body: JSON.stringify({ status: status }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        result = await result.json();\n        swal(\"Updated Succesfully\", \"\", \"success\");\n        getdeclaration(page, perPage)\n    }\n\n    const collectExceldata = async (e) => {\n        e.preventDefault()\n        const fd = new FormData()\n        fd.append('file', excelfile)\n        let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_maternity_excel \",\n            {\n                method: \"post\",\n                body: fd,\n            })\n        result = await result.json();\n        if (result.status == 200) {\n            setVisible(!visible)\n            swal({\n                text: result.message,\n                type: \"success\",\n                icon: \"success\",\n                button: false,\n            })\n            getdeclaration(page, perPage);\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n        else {\n            setVisible(!visible)\n            swal({\n                title: \"Error!\",\n                text: result.message,\n                type: \"error\",\n                icon: \"error\",\n                button: \"ok\",\n            })\n            getdeclaration(page, perPage);\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n    }\n\n\n    const addmaternitycondition = async (e) => {\n        e.preventDefault();\n\n        await fetch('https://insuranceapi-3o5t.onrender.com/api/maternity', {\n            method: 'post',\n            body: JSON.stringify({ condition: maternitycondition }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200) {\n                    setShowModal(false);\n                    swal({\n\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getdeclaration(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getdeclaration(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n\n\n\n\n    const getdetails = async (ParamValue) => {\n        setId(ParamValue);\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalDeclaration?id=${ParamValue}`, requestOptions);\n        result = await result.json();\n        console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\", result.data)\n        setMedicalDeclaration(result.data[0]?.name);\n        setMedicaldeclarationstatus(result.data[0]?.status);\n        const locationid = result.data[0]?.locations;\n        console.log(locationid)\n        setSelectedOption(locationid);\n        setVisibleedit(true);\n    }\n\n    const handleChange = (selectedOption) => {\n        setSelectedOption(selectedOption);\n    }\n\n\n\n    const [editmaternitycondition, setEdittermscondition] = useState('');\n\n    const updatedeclaration = async (e) => {\n        e.preventDefault();\n        if (medicaldeclaration == '') {\n            swal({\n\n                text: \"Please enter declaration\",\n                type: \"warning\",\n                icon: \"warning\",\n                button: false,\n            })\n            getdeclaration(page, perPage);\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n            return false;\n        }\n        if (selectedOption == '') {\n            swal({\n\n                text: \"Please select location\",\n                type: \"warning\",\n                icon: \"warning\",\n                button: false,\n            })\n            getdeclaration(page, perPage);\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n            return false;\n        }\n        const data = new FormData(e.target);\n        const declaration = data.get(\"name\");\n        const declaration_location = selectedOption;\n        const declaration_location_len = declaration_location.length;\n        const declaration_location_str = [];\n        for (let i = 0; i < declaration_location_len; i++) {\n            declaration_location_str.push(declaration_location[i]._id);\n        }\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalDeclaration?id=${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify({\n                name: declaration,\n                location: declaration_location_str\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200) {\n                    setVisibleedit(false)\n                    swal({\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getdeclaration(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setVisibleedit(false)\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getdeclaration(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n\n    }\n\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMedicalMaster/?id=${id}&type=maternityConditions`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getdeclaration(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getdeclaration(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n\n            })\n    }\n    const AddCondition = () => {\n        navigate(\"/Addmedicaldeclaration\")\n    }\n    const startFrom = (page - 1) * perPage;\n\n    return (\n        <>\n            <Container>\n                <div className=\"card mb-4\">\n                    <div className=\"card-header\">\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <h4 className=\"card-title\">Declaration</h4>\n                            </div>\n                            <div className=\"col-md-6\">\n                                {masterpermission.usertype?.includes('create') ?\n                                    <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddCondition(true)}>Add Declaration</button>\n                                    : ''}\n                            </div>\n                        </div>\n                    </div>\n                    {/* <div className=\"card-header\" style={{ textAlign: 'right' }}>\n                        {masterpermission.usertype?.includes('download') ?\n                            <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }}\n                                href={filePath}\n                                download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n                            : ''}\n                        {masterpermission.usertype?.includes('upload') ?\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n                            : ''}\n                        {masterpermission.usertype?.includes('export') ?\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n                            : ''}\n                    </div> */}\n                    <div className=\"card-body\">\n                        <div className=\"table-responsive\">\n                            <table className=\"table table-bordered\">\n                                <thead className=\"thead-dark\">\n                                    <tr className=\"table-info\">\n                                        <th scope=\"col\">#</th>\n                                        {/* <th scope=\"col\">userId</th> */}\n                                        <th scope=\"col\">name</th>\n                                        <th scope=\"col\">location</th>\n                                        <th scope=\"col\">Action</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        data?.length > 0 ?\n                                            data.map((item, index) =>\n                                                <tr key={index}>\n                                                    <td>{startFrom + index + 1}</td>\n                                                    {/* <td>{item.userId}</td> */}\n                                                    <td className=\"text-wrap\">{item.name}</td>\n                                                    {/* <td>{new Date(item.startDate).toLocaleString()}</td> */}\n                                                    <td>{item.locations.map((val) => val.location_name).join(\", \")}</td>\n                                                    <td>\n                                                        {masterpermission.usertype?.includes('edit') && (\n                                                            <button className=\"btn btn-primary\" onClick={() => getdetails(item._id)}>Edit</button>\n                                                        )}\n                                                        {' '}\n                                                        {masterpermission.usertype?.includes('delete') && (\n                                                            <>\n                                                                {\n                                                                    item.status === true ?\n                                                                        <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, false) }}>Deactivate</button> :\n                                                                        <button className=\"btn btn-success\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, true) }}>Activate</button>\n                                                                }\n                                                                {/* <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button> */}\n                                                            </>\n                                                        )}\n                                                    </td>\n                                                </tr>\n                                            ) : <tr>\n                                                <td colSpan=\"6\">No Data Found</td>\n                                            </tr>\n                                    }\n                                </tbody>\n                            </table>\n                            <ReactPaginate\n                                previousLabel={\"Previous\"}\n                                nextLabel={\"Next\"}\n                                breakLabel={\"...\"}\n                                pageCount={pageCount}\n                                marginPagesDisplayed={2}\n                                pageRangeDisplayed={3}\n                                onPageChange={handlePageClick}\n                                containerClassName={\"pagination justify-content-end\"}\n                                pageClassName={\"page-item\"}\n                                pageLinkClassName={\"page-link\"}\n                                previousClassName={\"page-item\"}\n                                previousLinkClassName={\"page-link\"}\n                                nextClassName={\"page-item\"}\n                                nextLinkClassName={\"page-link\"}\n                                breakClassName={\"page-item\"}\n                                breakLinkClassName={\"page-link\"}\n                                activeClassName={\"active\"}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n            </Container>\n            <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                    <CModalTitle>Upload Excel File</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div >\n                        {/* <label className=\"form-label\"><strong>Upload Excel File</strong></label> */}\n                        <input type=\"file\" className=\"form-control\" id=\"DHA\" defaultValue=\"\" required\n                            onChange={(e) => setExcelfile(e.target.files[0])} />\n                    </div>\n\n                </CModalBody>\n                <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n                        Close\n                    </CButton>\n                    <CButton color=\"primary\" onClick={collectExceldata} href={'/Viewtraveltype'}>Upload</CButton>\n                </CModalFooter>\n            </CModal>\n\n            <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Maternity Conditions</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n\n                                    <div className=\"card-body\">\n                                        <form>\n                                            <div className=\"row\">\n\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\"><strong>Add Maternity Condition</strong></label>\n\n                                                    <textarea className=\"form-control\" rows=\"3\" cols=\"10\" name=\"terms_constions\" placeholder=\"Enter Maternity Condition\" onChange={(e) => setMaternitycondition(e.target.value)} />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }} onClick={addmaternitycondition}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal size='lg' show={visibleedit} onHide={() => setVisibleedit(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Declaration</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updatedeclaration} >\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n\n                                                    <label className=\"form-label\"><strong>Edit Declaration</strong></label>\n                                                    <input type='text' className=\"form-control\"\n                                                        name='name'\n                                                        placeholder='Name'\n                                                        defaultValue={medicaldeclaration}\n                                                        required\n                                                    />\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\"><strong>Select Location</strong></label>\n\n                                                    <Multiselect\n                                                        options={location}\n                                                        selectedValues={selectedOption}\n                                                        onSelect={handleChange}\n                                                        onRemove={handleChange}\n                                                        displayValue=\"location_name\"\n                                                        placeholder=\"Select Location\"\n                                                        closeOnSelect={false}\n                                                        avoidHighlightFirstOption={true}\n                                                        showCheckbox={true}\n                                                        style={{ chips: { background: \"#007bff\" } }}\n                                                        required\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n\nexport default Viewmedicaldeclaration;"],"names":["Viewmedicaldeclaration","_masterpermission$use","navigate","useNavigate","data","setData","useState","perPage","pageCount","setPageCount","page","setPage","excelfile","setExcelfile","usertype","setUsertype","usertype_status","setUsertypestatus","id","setId","visible","setVisible","showModal","setShowModal","visibleedit","setVisibleedit","masterpermission","setMasterpermission","selectedOption","setSelectedOption","location","setLocation","medicaldeclaration","setMedicalDeclaration","medicaldeclarationstatus","setMedicaldeclarationstatus","medicaldeclarationid","setMedicaldeclarationid","medicaldeclarationedit","setMedicaldeclarationedit","useEffect","token","localStorage","getItem","undefined","_userdata$master_perm","getdeclaration","userdata","JSON","parse","master_permission","exportlistdata","locationList","fetch","method","headers","then","response","json","locationdt","handleChange","maternitycondition","setMaternitycondition","details","setDetails","slice","count","pages","Math","ceil","list","console","log","exportlist","setExportlist","updatestatus","async","status","result","body","stringify","swal","editmaternitycondition","setEdittermscondition","startFrom","_jsxs","_Fragment","children","_jsx","Container","className","includes","style","float","onClick","scope","length","map","item","index","_masterpermission$use2","_masterpermission$use3","name","locations","val","location_name","join","_result$data$","_result$data$2","_result$data$3","ParamValue","locationid","getdetails","_id","window","confirm","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","type","defaultValue","required","onChange","target","files","CModalFooter","CButton","color","preventDefault","fd","FormData","append","text","message","icon","button","setTimeout","title","href","Modal","size","show","onHide","Header","closeButton","Title","Body","rows","cols","placeholder","value","condition","Footer","Button","variant","action","onSubmit","declaration","get","declaration_location","declaration_location_len","declaration_location_str","i","push","Multiselect","options","selectedValues","onSelect","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","chips","background"],"sourceRoot":""}