{"version":3,"file":"static/js/1112.d7e2db3c.chunk.js","mappings":"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","sources":["views/Medical/MedicalPlan/TableBenefits/AddTableBenefits.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { Container, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst AddTableBenefits = () => {\n    const navigate = useNavigate();\n\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n    }, [])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        try {\n\n\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.feature.trim() === '' || row.description.trim() === '';\n            });\n\n            if (hasEmptyFields) {\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return; // Exit the function if there are empty fields\n            }\n\n\n            // console.log(rowsData,\">>>>>>>>>>rowsData\")\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(rowsData)\n            };\n            fetch('https://insuranceapi-3o5t.onrender.com/api/add_table_benefits', requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status == 200) {\n                        swal({\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\",\n                            button: false\n                        })\n                        navigate('/tablebenefits')\n                        setTimeout(() => {\n                            swal.close()\n                        }, \"1000\");\n                    }\n                    else {\n                        console.log(data.status, \">>>>>>>>>>>status\")\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\",\n                            button: false\n                        })\n                        setTimeout(() => {\n                            swal.close()\n                        }, \"1000\");\n                    }\n                });\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            feature: '',\n            description: '',\n\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <h4 className=\"card-title\">Add Table Benefits</h4>\n                                </div>\n                            </div>\n                            <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                                <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                    <thead>\n                                        <tr>\n                                            <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                            <th>Feature</th>\n                                            <th>Description</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            rowsData.map((data, index) => {\n                                                return (\n                                                    <tr key={index} >\n                                                        <td>\n                                                            <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"feature\" placeholder=\"Medical Benefits\" autoComplete=\"off\" required />\n\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"description\" placeholder=\"Description\" autoComplete=\"off\" required />\n\n                                                        </td>\n\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddTableBenefits"],"names":["AddTableBenefits","navigate","useNavigate","rowsData","setRowsData","useState","errors","setErrors","useEffect","token","localStorage","getItem","undefined","handleChange","index","evnt","name","value","target","trim","prevErrors","rowsInput","_jsx","className","children","_jsxs","style","overflowX","width","onClick","addTableRows","feature","description","map","data","rows","splice","deleteTableRows","type","onChange","placeholder","autoComplete","required","e","preventDefault","some","row","swal","title","text","icon","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","status","message","button","setTimeout","console","log","error"],"sourceRoot":""}