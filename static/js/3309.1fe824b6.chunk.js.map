{"version":3,"file":"static/js/3309.1fe824b6.chunk.js","mappings":"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","sources":["views/business-entity-dashboard/BEPending.js","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactPaginate from \"react-paginate\";\nimport { useNavigate } from 'react-router-dom'\nimport { Container, Row, Modal, Button, Accordion } from 'react-bootstrap';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nBEPending.propTypes =\n{\n  filterOptions: PropTypes.shape({\n    location: PropTypes.string,\n    lob: PropTypes.string,\n    businessType: PropTypes.string,\n    agent: PropTypes.string,\n    dateRange: PropTypes\n  })\n};\n\nBEPending.propTypes = {\n  defaultOptions: PropTypes.shape({\n    defaultlocation: PropTypes.string,\n    defaultlob: PropTypes.string,\n    defaultbusinessType: PropTypes.string,\n    defaultagent: PropTypes.string,\n    defaultdateRange: PropTypes,\n    startdate: PropTypes,\n    enddate: PropTypes,\n  })\n};\n\nBEPending.propTypes =\n{\n  updateSharedData: PropTypes.func.isRequired,\n};\n\nfunction BEPending({ filterOptions, defaultOptions, updateSharedData }) {\n  const navigate = useNavigate();\n  const [newleaddata, setNewleadData] = useState([]);\n  const [leadstatus, setLeadStatus] = useState([]);\n  const [leaddetails, setLeadDetails] = useState([]);\n  const [line_of_business_name, setLineOfBusinessName] = useState([]);\n  const [perPage] = useState(5);\n  const [pageCount, setPageCount] = useState(0);\n  const [page, setPage] = useState(1);\n  const [showModal, setShowModal] = useState(false);\n  const [id, setId] = useState('');\n  const [lead_status, set_Lead_Status] = useState({});\n  const [direct_payment, set_Direct_Payment] = useState({});\n  const [dclist, setDcList] = useState([]);\n  const [assigndc, setAssignDc] = useState('');\n\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    }\n    else {\n      getnewleadslist(page, perPage);\n      getleadstatus();\n      Documentchaserlist();\n    }\n  }, [filterOptions]);\n\n  const getnewleadslist = async (page, perPage) => {\n    let newlocation = filterOptions.location\n    let newlob = filterOptions.lob\n    let newbusinessType = filterOptions.businessType\n    let newagent = filterOptions.agent\n    let dateRange = filterOptions.dateRange\n    let startdate = defaultOptions.startdate\n    let enddate = defaultOptions.enddate\n\n    if (newlocation == null || newlocation == undefined || !Array.isArray(newlocation) || newlocation.length === 0) {\n      // newlocation = defaultOptions.defaultlocation.map((item) => item.value);\n      newlocation = [];\n    }\n    else {\n      newlocation = newlocation.map((item) => item.value);\n    }\n\n    if (newlob == null || newlob == undefined || !Array.isArray(newlob) || newlob.length === 0) {\n      // newlob = defaultOptions.defaultlob.map((item) => item.value);\n      newlob = [];\n    }\n    else {\n      newlob = newlob.map((item) => item.value);\n    }\n\n    if (newbusinessType == null || newbusinessType == undefined || !Array.isArray(newbusinessType) || newbusinessType.length === 0) {\n      // newbusinessType = defaultOptions.defaultbusinessType.map((item) => item.value);\n      newbusinessType = [];\n\n    }\n    else {\n      newbusinessType = newbusinessType.map((item) => item.value);\n    }\n\n\n    if (newagent == null || newagent == undefined || !Array.isArray(newagent) || newagent.length === 0) {\n      newagent = defaultOptions.defaultagent.map((item) => item.value);\n    } else {\n      newagent = newagent.map((item) => item.value);\n    }\n\n    const token = localStorage.getItem('token');\n    const loginuser = JSON.parse(localStorage.getItem('user'));\n    const loginusertype = loginuser.usertype;\n\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify({\n        page: page,\n        limit: perPage,\n        location: newlocation,\n        lob: newlob,\n        business_type: newbusinessType,\n        newagent: newagent,\n        dateRange: dateRange,\n        startdate: startdate,\n        enddate: enddate\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n    };\n\n    if (loginusertype == \"646224eab201a6f07b2dff36\") {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_supervisor_leads?leadType=pendingPolicues`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          const total = data.total;\n          const slice = total / perPage;\n          const pages = Math.ceil(slice);\n          setPageCount(pages);\n          const list = data.data;\n          setNewleadData(list)\n        })\n        .catch((error) => {\n          console.log(error)\n        });\n    }\n\n    if (loginusertype == \"64622470b201a6f07b2dff22\") {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_supervisor_leads?leadType=pendingPolicues&dashboardType=salesAdvisorDashboard`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          const total = data.total;\n          const slice = total / perPage;\n          const pages = Math.ceil(slice);\n          setPageCount(pages);\n          const list = data.data;\n          setNewleadData(list)\n        })\n        .catch((error) => {\n          console.log(error)\n        });\n    }\n  }\n\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    setPage(selectedPage + 1);\n    getnewleadslist(selectedPage + 1, perPage, localStorage.getItem('lob'));\n  };\n\n  const getleadstatus = async () => {\n    const userdt = JSON.parse(localStorage.getItem('user'));\n    const usertype = userdt.usertype;\n    let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/get_lead_status_name?type=salesAdvisor', {\n      method: 'post',\n      body: JSON.stringify({ usertype: usertype }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    )\n    result = await result.json();\n    setLeadStatus(result.data)\n  }\n\n  const getleaddetails = async (ParamValue) => {\n    setId(ParamValue)\n    let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/get_new_lead_detailsbyid', {\n      method: 'post',\n      body: JSON.stringify({ ParamValue }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n\n    result = await result.json();\n    setLeadDetails(result.data[0])\n    setLineOfBusinessName(result.data[0].policy_type[0].line_of_business_name)\n    setShowModal(true);\n  }\n\n  const startFrom = (page - 1) * perPage;\n\n  const handleEmailClick = (email) => {\n    const mailtoLink = `mailto:${email}`;\n    window.open(mailtoLink);\n  }\n\n  const handleWhatsappClick = (phoneNumber) => {\n    const whatsappLink = `https://wa.me/${phoneNumber}`;\n    window.open(whatsappLink);\n  }\n\n  const Documentchaserlist = () => {\n    const requestOptions =\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/getDocumentChaser`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const agentdt = data.data;\n        const agent_len = agentdt.length;\n        const agent_list = [];\n        for (let i = 0; i < agent_len; i++) {\n          const agent_obj = { label: agentdt[i].name, value: agentdt[i]._id };\n          agent_list.push(agent_obj);\n        }\n        setDcList(agent_list);\n      });\n  }\n\n  const handleDirectPaymentChange = (itemId, checked) => {\n    set_Direct_Payment(prevState => ({\n      ...prevState,\n      [itemId]: checked\n    }));\n  };\n\n  const handleLeadStatusChange = (itemId, value) => {\n    set_Lead_Status(prevState => ({\n      ...prevState,\n      [itemId]: value\n    }));\n  };\n\n  const handledcagentchange = (itemId, value) => {\n    setAssignDc(prevState => ({\n      ...prevState,\n      [itemId]: value\n    }));\n  };\n\n  const getDcAgentName = (id) => {\n    const selectedDCItem = dclist.find((dcItem) => dcItem.value === id);\n    return selectedDCItem ? selectedDCItem.label : \"\";\n  };\n\n  const handlesubmit = (e) => {\n    e.preventDefault();\n    const userdt = JSON.parse(localStorage.getItem('user'));\n    const assigningagent = userdt._id;\n    const directPayment = JSON.stringify(direct_payment) === '{}' ? null : direct_payment;\n    const leadStatus = JSON.stringify(lead_status) === '{}' ? null : lead_status;\n\n    const assignDc = assigndc === '' ? null : assigndc;\n\n    const itemIds = new Set(Object.keys(directPayment || {}).concat(Object.keys(leadStatus || {}), Object.keys(assignDc || {})));\n    for (const itemId of itemIds) {\n      const directPaymentValue = direct_payment[itemId];\n      const leadStatusValue = lead_status[itemId];\n      const assignDcValue = assigndc[itemId];\n\n      const requestOptions = {\n        method: 'POST',\n        body: JSON.stringify({\n          id: itemId,\n          direct_payment: directPaymentValue,\n          lead_status: leadStatusValue,\n          forward_to: assignDcValue,\n          assigningagent: assigningagent\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      fetch(`https://insuranceapi-3o5t.onrender.com/api/update_new_lead_details`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data);\n          getnewleadslist(page, perPage);\n          updateSharedData(getnewleadslist(page, perPage));\n        }\n        );\n    }\n  }\n\n  return (\n    <>\n      <Accordion>\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header>\n            <div className=\"card-header new_leads\">\n              <strong>Pending For Issuance</strong>\n            </div>\n          </Accordion.Header>\n          <Accordion.Body className='scrollavcds' style={{ padding: '2px' }}>\n            <table className=\"table solid salesdashboards1234\">\n              <thead >\n                <tr className=\"table-info\">\n                  <th scope=\"col\">Sr#</th>\n                  <th scope=\"col\">Name</th>\n                  <th scope=\"col\">Phone No.</th>\n                  <th scope=\"col\">Email-ID</th>\n                  <th scope=\"col\">Assigned Date & Time</th>\n                  <th scope=\"col\">Aging (as of today)</th>\n                  <th scope=\"col\">Type of Policy</th>\n                  <th scope=\"col\">DP</th>\n                  {/* <th scope=\"col\">Lead Status</th>\n                  <th scope=\"col\">Forward To</th> */}\n                  <th scope=\"col\">Assigned Stage</th>\n                  <th scope=\"col\">Assigned To</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {newleaddata.length > 0 ? (\n                  newleaddata.map((item, index) => (\n\n                    <tr key={index}>\n                      <td>{startFrom + index + 1}</td>\n                      <td>{item.name}</td>\n                      <td><a href=\"#\" onClick={() => handleWhatsappClick(item.phoneno)}>{item.phoneno}</a></td>\n                      <td><a href=\"#\" onClick={() => handleEmailClick(item.email)}>{item.email}</a></td>\n                      <td>{item.assign_salesadvisor_timestamp ? new Date(item.assign_salesadvisor_timestamp).toString() : new Date(item.new_lead_timestamp).toString()}</td>\n                      <td>{item.assign_salesadvisor_timestamp ? moment(item.assign_salesadvisor_timestamp).fromNow() : moment(item.new_lead_timestamp).fromNow()}</td>\n                      <td>{item['policy_type'][0]['line_of_business_name']}</td>\n                      <td>\n                        <input\n                          type=\"checkbox\"\n                          name=\"direct_payment\"\n                          id=\"direct_payment\"\n                          defaultChecked={item.direct_payment == 'true'}\n                          onChange={(e) => handleDirectPaymentChange(item._id, e.target.checked)}\n                          required\n                          readOnly\n                        />\n                      </td>\n                      {/* <td><select name=\"lead_status\" id=\"lead_status\"\n                        onChange={(e) => handleLeadStatusChange(item._id, e.target.value)}\n                      >\n                        <option value=\"\" hidden>{item.lead_status}</option>\n                        {leadstatus.map((item, index) => (\n                          <option key={index} value={item.lead_status}>{item.lead_status}</option>\n                        ))}\n                      </select>\n                      </td> */}\n                      {/* <td><select name=\"lead_status\" id=\"lead_status\"\n                        onChange={(e) => handledcagentchange(item._id, e.target.value)}\n                      >\n                        <option value=\"\" hidden>\n                        {item.forward_to === \"\" ? 'Document Chaser' : getDcAgentName(item.forward_to)}\n                          </option>\n                        {dclist.map((item, index) => (\n                          <option key={index} value={item.value}>{item.label}</option>\n                        ))}\n                      </select>\n                      </td> */}\n                      {/* <td>{item.phoneno.substr(0, 6) + \"...\"}</td>  */}\n\n                      <td>\n                        {item.assigned_agent_info != \"\" ? (\n                          item.forward_to_info != \"\" ? (\n                            item.dc_forward_to_info != \"\" ? (\n                              item.dcforward_to_type_info[0]?.usertype || \"-\"\n                            ) : (\n                              item.forward_to_type_info[0]?.usertype || \"-\"\n                            )\n                          ) : (\n                            item.assigned_type_info[0]?.usertype || \"-\"\n                          )\n                        ) : (\n                          \"-\"\n                        )}\n                      </td>\n\n                      <td>\n                        {item.assigned_agent_info != \"\" ? (\n                          item.forward_to_info != \"\" ? (\n                            item.dc_forward_to_info != \"\" ? (\n                              item.dc_forward_to_info[0]?.name || \"-\"\n                            ) : (\n                              item.forward_to_info[0]?.name || \"-\"\n                            )\n                          ) : (\n                            item.assigned_agent_info[0]?.name || \"-\"\n                          )\n                        ) : (\n                          \"-\"\n                        )}\n                      </td>\n                      <td className='buttons_icons'>\n                        <button type=\"button\" className=\"btn btn-primary btn-sm \" onClick={() => getleaddetails(item._id)}><i className=\"fa-solid fa-eye\"></i></button>\n                      </td>\n                    </tr>\n\n                  ))\n\n                ) : (\n                  <tr>\n                    <td colSpan=\"12\" className=\"text-center\">\n                      <strong>No Records Found</strong>\n                    </td>\n                  </tr>\n                )\n                }\n              </tbody>\n            </table>\n            <section>\n              {/* <button className='save-btn' onClick={handlesubmit}>Save </button> */}\n              <ReactPaginate\n                previousLabel={\"Previous\"}\n                nextLabel={\"Next\"}\n                breakLabel={\"...\"}\n                pageCount={pageCount}\n                marginPagesDisplayed={1}\n                pageRangeDisplayed={1}\n                onPageChange={handlePageClick}\n                containerClassName={\"pagination justify-content-end\"}\n                pageClassName={\"page-item\"}\n                pageLinkClassName={\"page-link\"}\n                previousClassName={\"page-item\"}\n                previousLinkClassName={\"page-link\"}\n                nextClassName={\"page-item\"}\n                nextLinkClassName={\"page-link\"}\n                breakClassName={\"page-item\"}\n                breakLinkClassName={\"page-link\"}\n                activeClassName={\"active\"}\n              />\n            </section>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>\n\n      <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Lead Detail</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Container>\n            <Row>\n              <div className=\"col-md-6\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Name</label>\n                  <input type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" value={leaddetails.name} />\n                </div>\n              </div>\n              <div className=\"col-md-6\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <input type=\"text\" className=\"form-control\" id=\"email\" name=\"email\" value={leaddetails.email} />\n                </div>\n              </div>\n            </Row>\n            <Row>\n              <div className=\"col-md-6\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"phoneno\">Phone No.</label>\n                  <input type=\"text\" className=\"form-control\" id=\"phoneno\" name=\"phoneno\" value={leaddetails.phoneno} />\n                </div>\n              </div>\n              <div className=\"col-md-6\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"dob\">Line Of Business</label>\n                  <input type=\"text\" className=\"form-control\" id=\"lob\" name=\"lob\" value={line_of_business_name} />\n                </div>\n              </div>\n            </Row>\n          </Container>\n\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default BEPending","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["_ref","filterOptions","defaultOptions","updateSharedData","navigate","useNavigate","newleaddata","setNewleadData","useState","leadstatus","setLeadStatus","leaddetails","setLeadDetails","line_of_business_name","setLineOfBusinessName","perPage","pageCount","setPageCount","page","setPage","showModal","setShowModal","id","setId","lead_status","set_Lead_Status","direct_payment","set_Direct_Payment","dclist","setDcList","assigndc","setAssignDc","useEffect","token","localStorage","getItem","undefined","getnewleadslist","getleadstatus","Documentchaserlist","async","newlocation","location","newlob","lob","newbusinessType","businessType","newagent","agent","dateRange","startdate","enddate","Array","isArray","length","map","item","value","defaultagent","loginusertype","JSON","parse","usertype","requestOptions","method","body","stringify","limit","business_type","headers","fetch","then","response","json","data","slice","total","pages","Math","ceil","list","catch","error","console","log","result","startFrom","agentdt","agent_len","agent_list","i","agent_obj","label","name","_id","push","_jsxs","_Fragment","children","_jsx","Accordion","Item","eventKey","Header","className","Body","style","padding","scope","index","_item$dcforward_to_ty","_item$forward_to_type","_item$assigned_type_i","_item$dc_forward_to_i","_item$forward_to_info","_item$assigned_agent_","href","onClick","phoneNumber","whatsappLink","window","open","handleWhatsappClick","phoneno","email","mailtoLink","handleEmailClick","assign_salesadvisor_timestamp","Date","toString","new_lead_timestamp","moment","fromNow","type","defaultChecked","onChange","e","handleDirectPaymentChange","itemId","checked","target","prevState","required","readOnly","assigned_agent_info","forward_to_info","dc_forward_to_info","dcforward_to_type_info","forward_to_type_info","assigned_type_info","ParamValue","policy_type","getleaddetails","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","Modal","size","show","onHide","closeButton","Title","Container","Row","htmlFor","Footer","Button","variant","React","ref","bsPrefix","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","classes","forEach","brkPoint","propValue","cols","infix","classNames","displayName"],"sourceRoot":""}