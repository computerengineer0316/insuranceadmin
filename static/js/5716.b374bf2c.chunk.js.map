{"version":3,"file":"static/js/5716.b374bf2c.chunk.js","mappings":"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","sources":["views/repair-type/AddRepairtype.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { Container, Row } from 'react-bootstrap';\nimport Multiselect from 'multiselect-react-dropdown';\n\nconst AddRepairtype = () => {\n\n    const navigate = useNavigate()\n    useEffect(() => {\n        locationList()\n    }, [])\n\n\n    const [selectedOption, setSelectedOption] = useState();\n    const [repair_type_status, setRepairtypestatus] = useState('')\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n\n    // const addtravelcovertypelist = async (e) => {\n    //   e.preventDefault();\n    //   if (repair_type_name == '') {\n    //     swal(\"Please Enter Repair Type\", \"\", \"warning\");\n    //     return false;\n    //   } else if (selectedOption == undefined) {\n    //     swal(\"Please Select Location\", \"\", \"warning\");\n    //     return false;\n    //   }else if (repair_type_status == '') {\n    //     swal(\"Please Select Status\", \"\", \"warning\");\n    //     return false;\n    //   } \n    //   else {\n    //   const repair_type_location = selectedOption;\n    //   const repair_type_location_len = repair_type_location.length;\n    //   const repair_type_location_str = [];\n    //   for (let i = 0; i < repair_type_location_len; i++) {\n    //       repair_type_location_str.push(repair_type_location[i].value);\n    //   }\n    //   let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/add_repair_type', {\n    //     method: 'post',\n    //     body: JSON.stringify({ repair_type_name: repair_type_name, \n    //       repair_type_location: repair_type_location_str.toString(),\n    //       repair_type_status: repair_type_status }),\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //     },\n    //   })\n    //   result = await result.json();\n    //   swal(\"Added Succesfully\", \"\", \"success\");\n    //   console.log(result)\n    //   navigate('/ViewRepairtype')\n    // }\n    // }\n\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n    const [repair_type_name, setRepairtypename] = useState('')\n    const [location, setLocation] = useState([]);\n\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            repair_type_name: '',\n            location: location\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n\n\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n\n\n    const addtravelcovertypelist = async (e) => {\n        e.preventDefault();\n        try {\n\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.repair_type_name === '' || !row.location;\n            }\n            );\n\n            if (hasEmptyFields) {\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return false;\n            }\n            console.log(rowsData, \"rowsData\")\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(rowsData)\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/add_repair_type`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status == 200) {\n                        swal({\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\",\n                            button: false\n                        })\n                        navigate('/ViewRepairtype')\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\",\n                            button: false\n                        })\n                        navigate('/ViewRepairtype')\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                });\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"card\">\n                            <div className=\"card-header\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-12\">\n                                        <h4 className=\"card-title\">Add Repair Type</h4>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                                <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                    <thead>\n                                        <tr>\n                                            <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                            <th>Repair Type Name</th>\n                                            <th>Location</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            rowsData.map((data, index) => {\n                                                return (\n                                                    <tr key={index} >\n                                                        <td>\n                                                            <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"repair_type_name\" placeholder=\"Repair Type Name\" autoComplete=\"off\" required />\n\n                                                        </td>\n                                                        <td>\n                                                            <Multiselect\n                                                                options={location}\n                                                                selectedValues={location}\n                                                                displayValue=\"label\"\n                                                                onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                placeholder=\"Select Location\"\n                                                                showCheckbox={true}\n                                                                required\n                                                            />\n                                                        </td>\n\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button className=\"btn btn-outline-success\" onClick={addtravelcovertypelist}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport default AddRepairtype"],"names":["AddRepairtype","navigate","useNavigate","useEffect","locationList","selectedOption","setSelectedOption","useState","repair_type_status","setRepairtypestatus","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","setLocation","rowsData","setRowsData","errors","setErrors","repair_type_name","setRepairtypename","location","handleChange1","index","title","rowsInput","_jsx","_Fragment","children","className","_jsxs","style","overflowX","width","onClick","addTableRows","map","rows","splice","deleteTableRows","type","onChange","evnt","handleChange","name","target","trim","prevErrors","placeholder","autoComplete","required","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","async","e","preventDefault","some","row","swal","text","icon","console","log","requestOptions","body","JSON","stringify","status","message","button","setTimeout","err"],"sourceRoot":""}