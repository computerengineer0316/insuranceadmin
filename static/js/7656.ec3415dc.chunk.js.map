{"version":3,"file":"static/js/7656.ec3415dc.chunk.js","mappings":"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","sources":["views/Travel/travelregionlist/Addtravelregionlist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { Container, Row } from 'react-bootstrap';\nimport Multiselect from 'multiselect-react-dropdown';\n\n\nfunction Addtravelregionlist() {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        locationList();\n        countrylist();\n\n    }, [])\n\n    const [travel_type, setTraveltype] = useState('')\n    const [location, setLocation] = useState([]);\n    const [selectedOption, setSelectedOption] = useState();\n    const [travel_type_status, setTraveltypestatus] = useState()\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n    const [countrylistdata, setCountrylistdata] = useState([])\n    const [true1, setTrue] = useState(false)\n    useEffect(() => {\n\n    }, [true1])\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        try {\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.travel_region.trim() === '' || row.location == 0 || row.country == 0;\n            });\n\n            if (hasEmptyFields) {\n                // Display an error message or handle the validation error as needed\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return false; // Exit the function if there are empty fields\n            }\n            else {\n                console.log(rowsData, \"rowsData\")\n                const requestOptions = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(rowsData)\n                };\n\n                fetch(`https://insuranceapi-3o5t.onrender.com/api/add_travel_region_list`, requestOptions)\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.status == 200) {\n                            swal({\n                                text: data.message,\n                                type: \"success\",\n                                icon: \"success\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                                navigate('/Viewtravelregionlist')\n                            }, 1000);\n\n                        }\n\n                        else if (data.status != 200) {\n                            swal({\n                                title: \"Error!\",\n                                text: data.message,\n                                type: \"error\",\n                                icon: \"error\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                                // navigate('/motor-make')\n                            }, 1000);\n                        }\n                    });\n            }\n\n        }\n        catch (err) {\n            console.log(err)\n        }\n\n    }\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            travel_region: '',\n            location: location,\n            country: []\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n\n        const { name, value } = evnt.target\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        if (name == \"travel_region\" && value == \"worldwide\") {\n            setTrue(true)\n            handleChange1(index, countrylistdata, 'country')\n            rowsInput[index][name] = value\n\n\n        }\n        else {\n            rowsInput[index][name] = value\n            setRowsData(rowsInput)\n        }\n    }\n    const handleChange1 = (index, value, title) => {\n        console.log(value, \"multiselect value\")\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n\n    const countrylist = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getNationality`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200) {\n                    console.log(data.data, \"countrylist\")\n                    setCountrylistdata(data.data)\n                }\n            });\n    }\n\n\n\n\n    return (\n        <>\n\n            <div className=\"container\">\n                <div className=\"row\" >\n                    <div className=\"col-md-12\" >\n                        <div className=\"card\" >\n                            <div className=\"card-header\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-6\">\n                                        <h4 className=\"card-title\">Add Travel Region </h4>\n                                    </div>\n                                    <div className=\"col-md-6\">\n                                        <a href=\"/Viewtravelregionlist\" className=\"btn btn-primary\" style={{ float: 'right' }}>Back</a>\n                                    </div>\n                                </div>\n                            </div>\n                            {/* addmotorplans\"  style={{overflowX:'scroll'}} */}\n                            <div className=\"card-body\" >\n                                <div className=\"table-responsive\">\n                                    <table className=\" table table-bordered addmotorplans\" style={{ marginBottom: \"100px\" }}>\n                                        <thead className=\"thead-dark\">\n                                            <tr className=\"table-info\">\n                                                <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                                <th>Travel Region </th>\n                                                <th>Location</th>\n                                                <th>Country</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                rowsData.map((data, index) => {\n                                                    return (\n                                                        <tr key={index} >\n                                                            <td>\n                                                                <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                            </td>\n                                                            <td>\n                                                                <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"travel_region\" placeholder=\"Travel Region\" autoComplete=\"off\" required />\n\n                                                            </td>\n\n                                                            <td>\n                                                                <Multiselect\n                                                                    options={location}\n                                                                    selectedValues={location}\n                                                                    displayValue=\"label\"\n                                                                    onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                    onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                    placeholder=\"Select Location\"\n                                                                    showCheckbox={true}\n                                                                    closeOnSelect={false}\n                                                                    required\n\n                                                                />\n                                                            </td>\n\n                                                            <td>\n                                                                <Multiselect\n                                                                    options={countrylistdata} // Options to display in the dropdown\n                                                                    selectedValues={true1 === true ? countrylistdata : []}\n                                                                    displayValue=\"nationality_name\" // Property name to display in the dropdown options\n                                                                    onSelect={(evnt) => (handleChange1(index, evnt, 'country'))}\n                                                                    onRemove={(evnt) => (handleChange1(index, evnt, 'country'))}\n                                                                    placeholder=\"Select Country\"\n                                                                    showCheckbox={true}\n                                                                    closeOnSelect={false}\n                                                                    required\n                                                                    searchable={true}\n                                                                    showArrow={true}\n\n                                                                />\n                                                            </td>\n\n\n                                                        </tr>\n                                                    )\n                                                })\n                                            }\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport default Addtravelregionlist"],"names":["navigate","useNavigate","useEffect","locationList","countrylist","travel_type","setTraveltype","useState","location","setLocation","selectedOption","setSelectedOption","travel_type_status","setTraveltypestatus","rowsData","setRowsData","errors","setErrors","countrylistdata","setCountrylistdata","true1","setTrue","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","handleChange1","index","title","console","log","rowsInput","status","_jsx","_Fragment","children","className","_jsxs","href","style","float","marginBottom","onClick","addTableRows","travel_region","country","map","rows","splice","deleteTableRows","type","onChange","evnt","handleChange","name","target","trim","prevErrors","placeholder","autoComplete","required","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","closeOnSelect","searchable","showArrow","e","preventDefault","some","row","swal","text","icon","requestOptions","body","JSON","stringify","message","button","setTimeout","err"],"sourceRoot":""}