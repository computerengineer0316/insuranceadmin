{"version":3,"file":"static/js/1436.740b76cc.chunk.js","mappings":"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","sources":["views/Medical/NetworkList/NetWorkList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Modal, Button } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport ReacNetworkginate from \"react-paginate\";\nimport filePath from '../../../webroot/sample-files/medical-network-list.xlsx';\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\nimport Multiselect from 'multiselect-react-dropdown';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst\n    MedicalNetworkList = () => {\n        const navigate = useNavigate();\n        const [data, setData] = useState([]);\n        const [perPage] = useState(10);\n        const [pageCount, seNetworkgeCount] = useState(0);\n        const [page, seNetworkge] = useState(1);\n        const [excelfile, setExcelfile] = useState(\"\");\n        const [usertype, setUsertype] = useState('');\n        const [usertype_status, setUsertypestatus] = useState('');\n        const [id, setId] = useState('');\n        const [visible, setVisible] = useState(false);\n        const [showModal, setShowModal] = useState(false);\n        const [visibleedit, setVisibleedit] = useState(false);\n        const [masterpermission, setMasterpermission] = useState([]);\n        const [selectedOption, setSelectedOption] = useState([]);\n        const [SelectedNetworkids, setSelectedNetworkids] = useState([]);\n        const [Networkids, setNetworkids] = useState([]);\n        const [selectedTPA, setSelectedTPA] = useState(\"\");\n        const [selectedPlan, setSelectedPlan] = useState(\"\");\n        const [location, setLocation] = useState([]);\n        const [medicalNetwork, setMedicalNetwork] = useState('');\n        const [medicalNetworktatus, setmedicalNetworktatus] = useState('');\n        const [medicalNetworkid, setMedicalNetworkid] = useState('');\n        const [medicalNetworkedit, setMedicalNetworkedit] = useState('');\n        const [defaultPlancategories, setdefaultPlanCategories] = useState([])\n        const [activeMedicalTPA, setactiveMedicalTPA] = useState([])\n        const [ActiveMedicalNetwork, setActiveMedicalNetwork] = useState([])\n        const [planCategory, setPlanCategory] = useState('')\n        useEffect(() => {\n            const token = localStorage.getItem('token');\n            if (token === null || token === undefined || token === '') {\n                navigate('/login')\n            }\n            else {\n                getNetwork(page, perPage);\n                const userdata = JSON.parse(localStorage.getItem('user'));\n                const master_permission = userdata?.medical_permission?.[0] || {};\n                setMasterpermission(master_permission);\n                exportlistdata();\n                locationList();\n                activeMedicalTPAList();\n                getAllPlanCategories();\n                activeMedicalNetwork();\n            }\n        }, [])\n        const activeMedicalNetwork = () => {\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/activeMedicalNetwork`, requestOptions)\n                .then(response => response.json())\n                .then((data) => {\n                    setActiveMedicalNetwork(data.data)\n                });\n        }\n        const getAllPlanCategories = () => {\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/getAllPlanCategories`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    setdefaultPlanCategories(data.data)\n                    console.log(\">>>>>>>>plancategory>>>>\", data.data)\n                    setSelectedPlan(data?.data?.[0][\"_id\"])\n                });\n        }\n        const activeMedicalTPAList = () => {\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/activeMedicalTPA`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    const locationdt = data.data;\n                    setactiveMedicalTPA(locationdt)\n                });\n        }\n        const locationList = () => {\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    const locationdt = data.data;\n                    setLocation(locationdt);\n                    handleChange(locationdt);\n                });\n        }\n        const getNetwork = (page, perPage) => {\n            setData([]);\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalNetworkList?limit=${perPage}&page=${page}`, requestOptions)\n                .then(response => response.json())\n                .then(\n                    data => {\n                        const total = data.count;\n                        const slice = total / perPage;\n                        const pages = Math.ceil(slice);\n                        seNetworkgeCount(pages);\n                        const list = data.data;\n                        setData(list)\n                    }\n                );\n        }\n\n\n        const [exportlist, setExportlist] = useState([]);\n        const exportlistdata = () => {\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch('https://insuranceapi-3o5t.onrender.com/api/medicalNetworkList', requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    setExportlist(data.data);\n                });\n        }\n        const fileType = 'xlsx'\n        const exporttocsv = () => {\n            const updatedData = exportlist.map((item, index) => {\n                return {\n                    'Name': item.name,\n                    'Plan Category': item.plan_categories?.map((val) => val.plan_category_name).join(\", \"),\n                    'TPA': item.tpa?.map((val) => val.name).join(\", \"),\n                    'Network': item.medical_networks?.map((val) => val.name).join(\", \"),\n                    'Location': item.location?.map((val) => val.location_name).join(\", \"),\n                }\n            })\n            const ws = XLSX.utils.json_to_sheet(updatedData);\n            const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n            const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n            const newdata = new Blob([excelBuffer], { type: fileType });\n            FileSaver.saveAs(newdata, \"Medical-Netowork-list\" + \".xlsx\")\n        }\n\n        const handlePageClick = (e) => {\n            const selectedPage = e.selected;\n            seNetworkge(selectedPage + 1);\n            getNetwork(selectedPage + 1, perPage);\n        };\n\n\n        const updatestatus = async (id, status) => {\n\n            let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalNetworkList?id=${id}`, {\n                method: 'put',\n                body: JSON.stringify({ status: status }),\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })\n            result = await result.json();\n            swal(\"Updated Succesfully\", \"\", \"success\");\n            getNetwork(page, perPage)\n        }\n\n        const collectExceldata = async (e) => {\n            e.preventDefault()\n            const fd = new FormData()\n            fd.append('file', excelfile)\n            let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_medical_network_list_excel \",\n                {\n                    method: \"post\",\n                    body: fd,\n                })\n            result = await result.json();\n            if (result.status == 200) {\n                setVisible(!visible)\n                swal({\n                    text: result.message,\n                    type: \"success\",\n                    icon: \"success\",\n                    button: false,\n                })\n                getNetwork(page, perPage);\n                setTimeout(() => {\n                    swal.close()\n                }, 1000);\n            }\n            else {\n                setVisible(!visible)\n                swal({\n                    title: \"Error!\",\n                    text: result.message,\n                    type: \"error\",\n                    icon: \"error\",\n                    button: \"ok\",\n                })\n                getNetwork(page, perPage);\n                setTimeout(() => {\n                    swal.close()\n                }, 1000);\n            }\n        }\n\n\n        const getdetails = async (ParamValue) => {\n            setId(ParamValue);\n            const requestOptions = {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            };\n\n            let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalNetworkListBYId?id=${ParamValue}`, requestOptions);\n            result = await result.json();\n            setMedicalNetwork(result.data[0]?.name);\n            setmedicalNetworktatus(result.data[0]?.status);\n            const locationid = result.data[0]?.locations;\n            const tpa = result.data[0]?.TPAData;\n            setSelectedNetworkids(result.data[0].networkData ? result.data[0].networkData : []);\n            setPlanCategory(result.data[0]?.planCategory[0]?._id);\n            setSelectedTPA(tpa?.[0]?._id)\n            setSelectedOption(locationid);\n            setVisibleedit(true);\n        }\n        const handleChange = (selectedOption) => {\n            setSelectedOption(selectedOption);\n        }\n        const handleChangeSelectedNetworkids = (SelectedNetworkids) => {\n            setSelectedNetworkids(SelectedNetworkids);\n        }\n\n\n        const updateNetwork = async (e) => {\n            e.preventDefault();\n            if (medicalNetwork == '') {\n                swal({\n\n                    text: \"Please enter Network\",\n                    type: \"warning\",\n                    icon: \"warning\",\n                    button: false,\n                })\n                getNetwork(page, perPage);\n                setTimeout(() => {\n                    swal.close()\n                }, 1000);\n                return false;\n            }\n            if (selectedOption == '') {\n                swal({\n\n                    text: \"Please select location\",\n                    type: \"warning\",\n                    icon: \"warning\",\n                    button: false,\n                })\n                getNetwork(page, perPage);\n                setTimeout(() => {\n                    swal.close()\n                }, 1000);\n                return false;\n            }\n            if (SelectedNetworkids == '') {\n                swal({\n\n                    text: \"Please select Newtworks\",\n                    type: \"warning\",\n                    icon: \"warning\",\n                    button: false,\n                })\n                getNetwork(page, perPage);\n                setTimeout(() => {\n                    swal.close()\n                }, 1000);\n                return false;\n            }\n            const data = new FormData(e.target);\n            const planCategory = data.get(\"planCategory\")\n            const Network = data.get(\"name\");\n            const tpaid = data.get(\"TPAID\");\n            const Network_location = selectedOption;\n            const Network_location_len = Network_location.length;\n            const Network_location_str = [];\n            for (let i = 0; i < Network_location_len; i++) {\n                Network_location_str.push(Network_location[i]._id);\n            }\n            await fetch(`https://insuranceapi-3o5t.onrender.com/api/medicalNetworkList?id=${id}`, {\n                method: \"PUT\",\n                body: JSON.stringify({\n                    name: Network,\n                    location: Network_location_str,\n                    TPAID: tpaid,\n                    planCategory: planCategory,\n                    networkId: SelectedNetworkids.map(item => item?._id)\n                }),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status == 200) {\n                        setVisibleedit(false)\n                        swal({\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\",\n                            button: false,\n                        })\n                        getNetwork(page, perPage);\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                    else {\n                        setVisibleedit(false)\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\",\n                            button: false,\n                        })\n                        getNetwork(page, perPage);\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                });\n\n        }\n\n        const deleteItem = (id) => {\n            const requestOptions = {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMedicalMaster/?id=${id}&type=NetworkList`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status === 200) {\n                        swal({\n                            title: \"Success!\",\n                            text: data.message,\n                            icon: \"success\",\n                            button: false,\n                        })\n                        getNetwork(page, perPage);\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            icon: \"error\",\n                            button: false,\n                        })\n                        getNetwork(page, perPage);\n                        setTimeout(() => {\n                            swal.close()\n                        }, 1000);\n                    }\n\n                })\n        }\n        const AddCondition = () => {\n            navigate(\"/AddmedicalNetworkList\")\n        }\n        const startFrom = (page - 1) * perPage;\n        console.log(\"SelectedNetworkids\", SelectedNetworkids)\n\n        const getLinkListByTPAid = (id) => {\n            const requestOptions = {\n                method: \"GET\",\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/getTpaLinkNetwork?tpaId=${id}`, requestOptions)\n                .then(response => response.json())\n                .then((data) => {\n                    handleChangeSelectedNetworkids(data.data)\n\n                })\n                .catch(error => console.log('error', error));\n        }\n        return (\n            <>\n                <Container>\n                    <div className=\"card mb-4\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4 className=\"card-title\">Network List</h4>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    {masterpermission?.networklist?.includes('create') ?\n                                        <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddCondition(true)}>Add Network List</button>\n                                        : ''}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-header\" style={{ textAlign: 'right' }}>\n                            {masterpermission.networklist?.includes('download') ?\n                                <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }}\n                                    href={filePath}\n                                    download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n                                : ''}\n                            {masterpermission.networklist?.includes('upload') ?\n                                <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n                                : ''}\n                            {masterpermission.networklist?.includes('export') ?\n                                <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n                                : ''}\n                        </div>\n                        <div className=\"card-body\">\n                            <table className=\"table table-bordered\">\n                                <thead className=\"thead-dark\">\n                                    <tr className=\"table-info\">\n                                        <th scope=\"col\">#</th>\n                                        {/* <th scope=\"col\">userId</th> */}\n                                        <th scope=\"col\">name</th>\n                                        <th scope=\"col\">location</th>\n                                        <th scope=\"col\">Action</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        data?.length > 0 ?\n                                            data.map((item, index) =>\n                                                <tr key={index}>\n                                                    <td>{startFrom + index + 1}</td>\n                                                    {/* <td>{item.userId}</td> */}\n                                                    <td>{item.name}</td>\n                                                    {/* <td>{new Date(item.startDate).toLocaleString()}</td> */}\n                                                    <td>{item.locations.map((val) => val.location_name).join(\", \")}</td>\n                                                    <td>\n                                                        {masterpermission?.networklist?.includes('edit') && (\n                                                            <button className=\"btn btn-primary\" onClick={() => getdetails(item._id)}>Edit</button>\n                                                        )}\n                                                        {' '}\n                                                        {masterpermission?.networklist?.includes('delete') && (\n                                                            <>\n                                                                {\n                                                                    item.status === 1 ?\n                                                                        <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                                                        <button className=\"btn btn-success\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                                                                }\n                                                                <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                                                            </>\n                                                        )}\n                                                    </td>\n                                                </tr>\n                                            ) : <tr>\n                                                <td colSpan=\"6\">No Data Found</td>\n                                            </tr>\n                                    }\n                                </tbody>\n                            </table>\n                            <ReacNetworkginate\n                                previousLabel={\"Previous\"}\n                                nextLabel={\"Next\"}\n                                breakLabel={\"...\"}\n                                pageCount={pageCount}\n                                marginPagesDisplayed={2}\n                                pageRangeDisplayed={3}\n                                onPageChange={handlePageClick}\n                                containerClassName={\"pagination justify-content-end\"}\n                                pageClassName={\"page-item\"}\n                                pageLinkClassName={\"page-link\"}\n                                previousClassName={\"page-item\"}\n                                previousLinkClassName={\"page-link\"}\n                                nextClassName={\"page-item\"}\n                                nextLinkClassName={\"page-link\"}\n                                breakClassName={\"page-item\"}\n                                breakLinkClassName={\"page-link\"}\n                                activeClassName={\"active\"}\n                            />\n                        </div>\n                    </div>\n\n                </Container>\n                <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n                    <CModalHeader onClose={() => setVisible(false)}>\n                        <CModalTitle>Upload Excel File</CModalTitle>\n                    </CModalHeader>\n                    <CModalBody>\n                        <div >\n                            {/* <label className=\"form-label\"><strong>Upload Excel File</strong></label> */}\n                            <input type=\"file\" className=\"form-control\" id=\"DHA\" defaultValue=\"\" required\n                                onChange={(e) => setExcelfile(e.target.files[0])} />\n                        </div>\n\n                    </CModalBody>\n                    <CModalFooter>\n                        <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n                            Close\n                        </CButton>\n                        <CButton color=\"primary\" onClick={collectExceldata} href={'/Viewtraveltype'}>Upload</CButton>\n                    </CModalFooter>\n                </CModal>\n\n\n                <Modal size='lg' show={visibleedit} onHide={() => setVisibleedit(false)}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Edit Network List</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"card\">\n                                        <div className=\"card-body\">\n                                            <form action=\"/\" method=\"POST\" onSubmit={updateNetwork} >\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-6\">\n\n                                                        <label className=\"form-label\"><strong>Name</strong></label>\n                                                        <input type='text' className=\"form-control\"\n                                                            name='name'\n                                                            placeholder='Name'\n                                                            defaultValue={medicalNetwork}\n                                                            required\n                                                        />\n                                                    </div>\n                                                    <div className=\"col-md-6\">\n\n                                                        <label className=\"form-label\"><strong>TPA</strong></label>\n                                                        <select\n                                                            onChange={(e) => getLinkListByTPAid(e.target.value)}\n                                                            className=\"form-control\" defaultValue={selectedTPA} name=\"TPAID\" placeholder=\"TPAID\" autoComplete=\"off\" required >\n                                                            {\n                                                                activeMedicalTPA.length > 0 ? (<>\n                                                                    {\n                                                                        activeMedicalTPA.map((item) => (\n                                                                            <option value={item._id} key={item._id}>{item.name}</option>\n                                                                        ))\n                                                                    }\n\n                                                                </>) : <React.Fragment></React.Fragment>\n                                                            }\n                                                        </select>\n                                                    </div>\n\n                                                    <div className=\"col-md-6\">\n                                                        <label className=\"form-label\"><strong>Plan Category</strong></label>\n                                                        <select name='planCategory'\n\n                                                            className=\"form-control\">\n                                                            {\n                                                                defaultPlancategories.length > 0 ? (<>\n                                                                    {\n                                                                        defaultPlancategories.map((item) => (\n                                                                            <option key={item._id} value={item._id} selected={item._id == planCategory ? true : false}>{item.plan_category_name}</option>\n                                                                        ))\n                                                                    }\n                                                                </>) : <React.Fragment></React.Fragment>\n                                                            }\n                                                        </select>\n\n                                                    </div>\n\n                                                    <div className=\"col-md-6\">\n                                                        <label className=\"form-label\"><strong>Select Networks</strong></label>\n\n                                                        <Multiselect\n                                                            options={ActiveMedicalNetwork}\n                                                            selectedValues={SelectedNetworkids}\n                                                            onSelect={handleChangeSelectedNetworkids}\n                                                            onRemove={handleChangeSelectedNetworkids}\n                                                            displayValue=\"name\"\n                                                            placeholder=\"Select Networks\"\n                                                            closeOnSelect={false}\n                                                            avoidHighlightFirstOption={true}\n                                                            showCheckbox={true}\n                                                            style={{ chips: { background: \"#007bff\" } }}\n                                                            required\n                                                        />\n                                                    </div>\n                                                    <div className=\"col-md-6\">\n                                                        <label className=\"form-label\"><strong>Select Location</strong></label>\n\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={selectedOption}\n                                                            onSelect={handleChange}\n                                                            onRemove={handleChange}\n                                                            displayValue=\"location_name\"\n                                                            placeholder=\"Select Location\"\n                                                            closeOnSelect={false}\n                                                            avoidHighlightFirstOption={true}\n                                                            showCheckbox={true}\n                                                            style={{ chips: { background: \"#007bff\" } }}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </div>\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-12\">\n                                                        <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                    </div>\n                                                </div>\n                                            </form>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        )\n    }\n\nexport default\n    MedicalNetworkList;"],"names":["MedicalNetworkList","_masterpermission$net","_masterpermission$net2","_masterpermission$net3","_masterpermission$net4","navigate","useNavigate","data","setData","useState","perPage","pageCount","seNetworkgeCount","page","seNetworkge","excelfile","setExcelfile","usertype","setUsertype","usertype_status","setUsertypestatus","id","setId","visible","setVisible","showModal","setShowModal","visibleedit","setVisibleedit","masterpermission","setMasterpermission","selectedOption","setSelectedOption","SelectedNetworkids","setSelectedNetworkids","Networkids","setNetworkids","selectedTPA","setSelectedTPA","selectedPlan","setSelectedPlan","location","setLocation","medicalNetwork","setMedicalNetwork","medicalNetworktatus","setmedicalNetworktatus","medicalNetworkid","setMedicalNetworkid","medicalNetworkedit","setMedicalNetworkedit","defaultPlancategories","setdefaultPlanCategories","activeMedicalTPA","setactiveMedicalTPA","ActiveMedicalNetwork","setActiveMedicalNetwork","planCategory","setPlanCategory","useEffect","token","localStorage","getItem","undefined","_userdata$medical_per","getNetwork","userdata","JSON","parse","master_permission","medical_permission","exportlistdata","locationList","activeMedicalTPAList","getAllPlanCategories","activeMedicalNetwork","fetch","method","headers","then","response","json","_data$data","console","log","locationdt","handleChange","slice","count","pages","Math","ceil","list","exportlist","setExportlist","updatestatus","async","status","result","body","stringify","swal","handleChangeSelectedNetworkids","startFrom","_jsxs","_Fragment","children","_jsx","Container","className","networklist","includes","style","float","onClick","textAlign","backgroundColor","marginRight","href","filePath","download","exporttocsv","updatedData","map","item","index","_item$plan_categories","_item$tpa","_item$medical_network","_item$location","name","plan_categories","val","plan_category_name","join","tpa","medical_networks","location_name","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","booktype","type","newdata","Blob","FileSaver","scope","length","_masterpermission$net5","_masterpermission$net6","locations","_result$data$","_result$data$2","_result$data$3","_result$data$4","_result$data$5","_result$data$5$planCa","_tpa$","ParamValue","locationid","TPAData","networkData","_id","getdetails","window","confirm","title","text","message","icon","button","setTimeout","deleteItem","colSpan","ReacNetworkginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","defaultValue","required","onChange","target","files","CModalFooter","CButton","color","preventDefault","fd","FormData","append","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","get","Network","tpaid","Network_location","Network_location_len","Network_location_str","i","push","TPAID","networkId","placeholder","catch","error","getLinkListByTPAid","value","autoComplete","React","Multiselect","options","selectedValues","onSelect","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","chips","background","Footer","Button","variant"],"sourceRoot":""}