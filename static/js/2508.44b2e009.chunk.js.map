{"version":3,"file":"static/js/2508.44b2e009.chunk.js","mappings":"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","sources":["views/Group-Medical/Group-Medical-Plans/GroupMedicalPlanTable.js","views/Group-Medical/Group-Medical-Plans/AddGroupMedicalPlan.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from 'react';\nimport Multiselect from \"multiselect-react-dropdown\";\n\nfunction GroupMedicalPlanTable({ rowsData, deleteTableRows, handleChange, handleChange1 }) {\n    const [companyList, setCompanyList] = useState([]);\n    const [location, setLocation] = useState([]);\n    // const [tpa, setTPAs] = useState([]);\n    // const [network, setNetworks] = useState([]);\n    // const [networkList, setNetworkList] = useState([]);\n    useEffect(() => {\n        company_list();\n        locationList();\n        // activeMedicalTPAList();\n        // activeMedicalNetwork();\n        // MedicalNetworkList();\n    }, [])\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n    const company_list = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/company_list`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setCompanyList(data.data);\n            });\n    }\n    // const activeMedicalTPAList = () => {\n    //     const requestOptions = {\n    //         method: 'GET',\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //         },\n    //     };\n    //     fetch(`https://insuranceapi-3o5t.onrender.com/api/activeMedicalTPA`, requestOptions)\n    //         .then(response => response.json())\n    //         .then(data => {\n    //             const locationdt = data.data;\n    //             setTPAs(locationdt)\n    //         });\n    // }\n    // const activeMedicalNetwork = () => {\n    //     const requestOptions = {\n    //         method: 'GET',\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //         },\n    //     };\n    //     fetch(`https://insuranceapi-3o5t.onrender.com/api/activeMedicalNetwork`, requestOptions)\n    //         .then(response => response.json())\n    //         .then((data) => {\n    //             setNetworks(data.data)\n    //         });\n    // }\n    // const MedicalNetworkList = () => {\n    //     const requestOptions = {\n    //         method: 'GET',\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //         },\n    //     };\n    //     fetch(`https://insuranceapi-3o5t.onrender.com/api/activeMedicalNetworkList`, requestOptions)\n    //         .then(response => response.json())\n    //         .then((data) => {\n    //             setNetworkList(data.data)\n    //         });\n    // }\n    return (\n        rowsData.map((row, index) => {\n            return (\n                <tr key={index}>\n                    <td>\n                        <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                    </td>\n                    <td>\n                        <input type=\"text\" name=\"plan_name\" value={row.plan_name} onChange={(e) => handleChange(e, index)} className=\"form-control\" />\n                    </td>\n                    <td>\n                        <select className=\"form-control\" name=\"company_id\" onChange={(e) => (handleChange(e, index))}>\n                            <option hidden value=\"\">Select Insurance Company</option>\n                            {companyList.map((item, index) => (\n                                <option key={index} value={item._id}>{item.company_name}</option>\n                            ))}\n                        </select>\n                    </td>\n                    <td>\n                        {/* <select className=\"form-control\" name=\"tpa\" onChange={(e) => (handleChange(e, index))}>\n                            <option value=\"\">Select TPA</option>\n                            {tpa.map((item, index) => (\n                                <option key={index} value={item._id}>{item.name}</option>\n                            ))}\n                        </select> */}\n                        <input type='date' className='form-control' name='from_date' onChange={(e) => handleChange(e, index)} />\n                    </td>\n                    <td>\n                        {/* <select className=\"form-control\" name=\"network\" onChange={(e) => (handleChange(e, index))}>\n                            <option value=\"\">Select Network</option>\n                            {network.map((item, index) => (\n                                <option key={index} value={item._id}>{item.name}</option>\n                            ))}\n                        </select> */}\n                        <input type=\"date\" className=\"form-control\" name=\"to_date\" onChange={(e) => handleChange(e, index)} />\n                    </td>\n                    {/* <td> */}\n                    {/* <select className=\"form-control\" name=\"network_list\" onChange={(evnt) => (handleChange(index, evnt))}>\n                            <option value=\"\">Select Network List</option>\n                            {networkList.map((item, index) => (\n                                <option key={index} value={item._id}>{item.name}</option>\n                            ))}\n                        </select> */}\n                    {/* <Multiselect\n                            options={networkList}\n                            onSelect={(evnt) => (handleChange1(index, evnt, 'network_list'))}\n                            onRemove={(evnt) => (handleChange1(index, evnt, 'network_list'))}\n                            displayValue=\"name\"\n                            placeholder=\"Select Location\"\n                            closeOnSelect={false}\n                            avoidHighlightFirstOption={true}\n                            showCheckbox={true}\n                            style={{ chips: { background: \"#007bff\" } }}\n                            required\n                        />\n                    </td> */}\n                    <td>\n                        <Multiselect\n                            options={location}\n                            selectedValues={location}\n                            onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                            onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                            displayValue=\"label\"\n                            placeholder=\"Select Location\"\n                            closeOnSelect={false}\n                            avoidHighlightFirstOption={true}\n                            showCheckbox={true}\n                            style={{ chips: { background: \"#007bff\" } }}\n                            required\n                        />\n                    </td>\n                </tr>\n            )\n        })\n    )\n}\n\nexport default GroupMedicalPlanTable\n","import React, { useEffect } from 'react';\nimport TablePlan from './GroupMedicalPlanTable';\nimport { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport swal from 'sweetalert';\n\nconst AddGroupMedicalPlan = () => {\n    const navigate = useNavigate();\n    const [rowsData, setRowsData] = useState([]);\n    const [location, setLocation] = useState([]);\n    const errorArray = {\n        plan_name: 'Plan Name ',\n        company_id: 'Company',\n        from_date: 'From Date',\n        to_date: 'To Date',\n        location: 'Location'\n    }\n    useEffect(() => {\n        const token = localStorage.getItem(\"token\");\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        } else {\n            locationList();\n        }\n    }, [])\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n    const addTableRows = () => {\n        setRowsData([...rowsData, {\n            plan_name: '',\n            company_id: '',\n            from_date: '',\n            to_date: '',\n            location: location\n        }])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (evnt, index) => {\n        const { name, value } = evnt.target\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n\n        setRowsData(rowsInput)\n    }\n    const handleSubmit = async () => {\n        const objectsWithEmptyValues = [];\n\n        rowsData.forEach((rowData, rowIndex) => {\n            const emptyKeys = Object.keys(rowData).filter((key) => {\n                const value = rowData[key];\n\n                if (typeof value === 'string' && value.trim() === '') {\n\n                    if (key == \"plan_name\" || key == \"company_id\"\n                        || key == \"tpa\" || key == \"network\") {\n                        return true\n                    }\n                } else if (key == 'location' || key == 'network_list') {\n                    if (!value.length) {\n                        return true;\n                    }\n                }\n                return false; // Ignore this key - it is not empty\n            });\n\n            if (emptyKeys.length > 0) {\n                console.log(emptyKeys, \">> emptyKeys\");\n                // Store information about the object and its empty keys\n                objectsWithEmptyValues.push({\n                    index: rowIndex,\n                    emptyKeys: emptyKeys,\n                });\n            }\n        });\n\n        if (objectsWithEmptyValues.length > 0) {\n\n            objectsWithEmptyValues.forEach((objectInfo) => {\n                const errval = objectInfo.emptyKeys[0];\n                swal({\n                    title: \"warning!\",\n                    text: `${errorArray[errval]}`,\n                    type: \"warning\",\n                    icon: \"warning\",\n                }).then(function () {\n                    return false;\n                });\n\n            });\n        } else {\n            const requestOptions =\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ rowsData })\n            };\n            await fetch('https://insuranceapi-3o5t.onrender.com/api/addgroupmedicalplan', requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status === 200) {\n                        swal({\n                            title: \"Success!\",\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\"\n                        }).then(function () {\n                            navigate('/ViewGroupMedicalPlans')\n                        });\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\"\n                        }).then(function () {\n                            navigate('/ViewGroupMedicalPlans');\n                        });\n                    }\n                })\n                .catch(err => console.log(err))\n        }\n    }\n    return (\n        <div className=\"container mb-5\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4 className=\"card-title\">Add Group Medical Plan</h4>\n                                </div>\n                                <div className='col-md-6'>\n                                    <button className='btn btn-primary' onClick={() => navigate('/ViewGroupMedicalPlans')} style={{ float: 'right' }}>Back</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body addmotorplans \" style={{ overflowX: 'scroll' }}>\n                            <table className=\"table table-bordered table-responsive\" style={{ width: \"1500px\" }}>\n                                <thead>\n                                    <tr>\n                                        <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                        <th className='text-danger '>Customer Name</th>\n                                        <th className='text-danger'>Insurance Company</th>\n                                        <th className='text-danger'>From Date</th>\n                                        <th className='text-danger'>To Date</th>\n                                        {/* <th className='text-danger'>Network List</th> */}\n                                        <th className='text-danger'>Location</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <TablePlan\n                                        rowsData={rowsData}\n                                        deleteTableRows={deleteTableRows}\n                                        handleChange={handleChange}\n                                        handleChange1={handleChange1}\n\n                                    />\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"card-footer\">\n                            <button disabled={!rowsData.length} className=\"btn btn-outline-success\" style={{ float: \"right\" }} onClick={handleSubmit}>Submit</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddGroupMedicalPlan\n"],"names":["_ref","rowsData","deleteTableRows","handleChange","handleChange1","companyList","setCompanyList","useState","location","setLocation","useEffect","company_list","locationList","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","map","row","index","_jsxs","children","_jsx","className","onClick","type","name","plan_name","onChange","e","hidden","item","company_name","Multiselect","options","selectedValues","onSelect","evnt","onRemove","displayValue","placeholder","closeOnSelect","avoidHighlightFirstOption","showCheckbox","style","chips","background","required","AddGroupMedicalPlan","navigate","useNavigate","setRowsData","errorArray","company_id","from_date","to_date","token","localStorage","getItem","undefined","float","overflowX","width","addTableRows","TablePlan","rows","splice","target","rowsInput","title","disabled","async","objectsWithEmptyValues","forEach","rowData","rowIndex","emptyKeys","Object","keys","filter","key","trim","console","log","objectInfo","errval","swal","text","icon","requestOptions","body","JSON","stringify","status","message","catch","err"],"sourceRoot":""}