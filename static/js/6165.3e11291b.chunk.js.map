{"version":3,"file":"static/js/6165.3e11291b.chunk.js","mappings":"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","sources":["views/manager-supervisor_dashboard/AdminList.js","views/manager-supervisor_dashboard/dashboard/PaymentPending.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nAdminsList.propTypes = {\n  lob: PropTypes.string.isRequired,\n};\n\nfunction AdminsList({ userType, sendData, sendUsertype, lob }) {\n  const [admins, setAdmins] = useState([]);\n  const [assigned_agent, setAssigned_agent] = useState('');\n  const usertype = userType;\n  const userdata = JSON.parse(localStorage.getItem('user'));\n\n  console.log('usertype data>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', userdata)\n\n  const assignedagentdata = (e) => {\n    setAssigned_agent(e.target.value);\n    sendData(e.target.value)\n    sendUsertype(usertype)\n  }\n\n  useEffect(() => {\n    if (userdata?.usertype == '64622470b201a6f07b2dff22') {\n      fetch('https://insuranceapi-3o5t.onrender.com/api/adminlist', {\n        method: 'POST',\n        body: JSON.stringify({ usertype, lob }),\n        headers: {\n          'Content-Type': 'application/json',\n          // 'Authorization': 'Bearer ' + localStorage.getItem('token'),\n        },\n      })\n        .then(response => response.json())\n        .then(data => {\n          if (Array.isArray(data.data)) {\n            console.log(data.data, \"admins data >>>>>>>>>>>>>>>>>>>>>>>>>>> \")\n            setAdmins(data.data);\n          }\n          else {\n            console.error('Invalid data format for admins:', data);\n          };\n        })\n        .catch(error => {\n          console.error('Error fetching admins:', error);\n        });\n    } else if (userdata?.usertype == '646224deb201a6f07b2dff32' || userdata?.usertype == \"6462250eb201a6f07b2dff3a\"\n      || userdata?.usertype == \"646224eab201a6f07b2dff36\" || userdata?.usertype == \"646224deb201a6f07b2dff32\" ||\n      userdata?.usertype == '64622526b201a6f07b2dff3e') {\n      fetch('https://insuranceapi-3o5t.onrender.com/api/get_assigned_staff', {\n        method: 'POST',\n        body: JSON.stringify({ usertype, lob }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + localStorage.getItem('token'),\n        },\n      })\n        .then(response => response.json())\n        .then(data => {\n          if (Array.isArray(data.data)) {\n            let dt = data.data\n            let dtaArr = []\n            for (let i = 0; i < dt.length; i++) {\n              dtaArr.push(dt[i].filteredSA);\n            }\n            console.log(data.data, \"supervisor assigined staff data >>>>>>>>>>>>>>||||||||||||||||||||||||>>>>>>>>>>>>>>> \")\n            setAdmins(dtaArr);\n          }\n          else {\n            console.error('Invalid data format for admins:', data);\n          };\n        })\n        .catch(error => {\n          console.error('Error fetching admins:', error);\n        });\n    }\n  }, [userType]);\n\n  console.log('admins>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', admins)\n\n  return (\n    <select onChange={assignedagentdata}>\n      <option hidden>select</option>\n      {admins.map((admin) => (\n        <option key={admin._id} value={admin._id}>{admin.name}</option>\n      ))}\n    </select>\n  );\n};\n\nAdminsList.propTypes = {\n  userType: PropTypes.string.isRequired,\n  leadid: PropTypes.string.isRequired,\n  sendData: PropTypes.func.isRequired,\n  sendUsertype: PropTypes.func.isRequired,\n};\nexport default AdminsList;","import React, { useCallback } from 'react'\nimport ReactPaginate from \"react-paginate\";\nimport { useState, useEffect } from 'react';\nimport { Form, useNavigate } from 'react-router-dom'\nimport { Container, Row, Modal, Button, Accordion, Col, Table } from 'react-bootstrap';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport swal from 'sweetalert';\nimport AdminsList from '../AdminList'\n\n\n\nPaymentPending.propTypes =\n{\n  filterOptions: PropTypes.shape({\n    location: PropTypes.string,\n    lob: PropTypes.string,\n    businessType: PropTypes.string,\n    agent: PropTypes.string,\n    dateRange: PropTypes\n\n  })\n};\n\nPaymentPending.propTypes = {\n  defaultOptions: PropTypes.shape({\n    defaultlocation: PropTypes.string,\n    defaultlob: PropTypes.string,\n    defaultbusinessType: PropTypes.string,\n    defaultagent: PropTypes.string,\n    defaultdateRange: PropTypes,\n    startdate: PropTypes,\n    enddate: PropTypes,\n    userType: PropTypes,\n    selectedSupervisor: PropTypes\n\n  })\n};\n\n\nfunction PaymentPending({ filterOptions, defaultOptions }) {\n\n  const navigate = useNavigate();\n  const [newleaddata, setNewleadData] = useState([]);\n  const [leadstatus, setLeadStatus] = useState([]);\n  const [leaddetails, setLeadDetails] = useState([]);\n  const [line_of_business_name, setLineOfBusinessName] = useState([]);\n  const [perPage] = useState(5);\n  const [pageCount, setPageCount] = useState(0);\n  const [page, setPage] = useState(1);\n  const [showModal, setShowModal] = useState(false);\n  const [admins, setAdmins] = useState([]);\n  const [agentid, setAgentId] = useState([]);\n  const [usertype, setUsertype] = useState([]);\n  const [notificationCount, setNotificationCount] = useState(0)\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    } else {\n      getleadslist(page, perPage);\n    }\n  }, [filterOptions]);\n\n\n  const getleadslist = async (page, perPage) => {\n    const userdata = JSON.parse(localStorage.getItem('user'));\n    let newlocation = filterOptions.location\n    let newlob = filterOptions.lob\n    let newbusinessType = filterOptions.businessType\n    let newagent = filterOptions.agent\n    let dateRange = filterOptions.dateRange\n    let startdate = defaultOptions.startdate\n    let enddate = defaultOptions.enddate\n    let assign_staff = userdata.assign_staff;\n    let usertype = defaultOptions.userType;\n    let selectedsupervisor = defaultOptions.selectedSupervisor;\n\n    if (newlocation == null || newlocation == undefined || !Array.isArray(newlocation) || newlocation.length === 0) {\n      newlocation = defaultOptions.defaultlocation.map((item) => item.value);\n      // newlocation = [];\n    }\n    else {\n      newlocation = newlocation.map((item) => item.value);\n    }\n\n    if (newlob == null || newlob == undefined || !Array.isArray(newlob) || newlob.length === 0) {\n      newlob = defaultOptions.defaultlob.map((item) => item.value);\n      // newlob = [];\n    }\n    else {\n      newlob = newlob.map((item) => item.value);\n    }\n\n    if (newbusinessType == null || newbusinessType == undefined || !Array.isArray(newbusinessType) || newbusinessType.length === 0) {\n      newbusinessType = defaultOptions.defaultbusinessType.map((item) => item.value);\n      // newbusinessType = [];\n\n    }\n    else {\n      newbusinessType = newbusinessType.map((item) => item.value);\n    }\n    if (newagent == null || newagent == undefined || !Array.isArray(newagent) || newagent.length === 0) {\n      newagent = defaultOptions.defaultagent.map((item) => item.value);\n    }\n    else {\n      newagent = newagent.map((item) => item.value);\n    }\n\n    const token = localStorage.getItem('token');\n    const loginuser = JSON.parse(localStorage.getItem('user'));\n    const loginusertype = loginuser.usertype;\n\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify(\n        {\n          page: page,\n          limit: perPage,\n          location: newlocation,\n          lob: newlob,\n          business_type: newbusinessType,\n          newagent: newagent,\n          dateRange: dateRange,\n          startdate: startdate,\n          enddate: enddate,\n          assign_staff: assign_staff,\n          userType: usertype,\n          selectedSupervisor: selectedsupervisor,\n        }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n    };\n    if (loginusertype == \"6462250eb201a6f07b2dff3a\" || loginusertype == \"646224eab201a6f07b2dff36\"\n      || loginusertype == \"646224deb201a6f07b2dff32\" || loginusertype == '64622526b201a6f07b2dff3e') {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_supervisor_leads?assignType=PaymentPending&dashboardType=supervisorDashboard`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          const total = data.total;\n          setNotificationCount(total)\n          const slice = total / perPage;\n          const pages = Math.ceil(slice);\n          setPageCount(pages);\n          const list = data.data;\n          setNewleadData(list)\n        })\n        .catch((error) => {\n          console.log(error)\n        });\n    }\n    if (loginusertype == \"64622470b201a6f07b2dff22\") {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_supervisor_leads?assignType=PaymentPending&dashboardType=supervisorDashboard`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          const total = data.total;\n          setNotificationCount(total)\n          const slice = total / perPage;\n          const pages = Math.ceil(slice);\n          setPageCount(pages);\n          const list = data.data;\n          setNewleadData(list)\n        })\n        .catch((error) => {\n          console.log(error)\n        });\n    }\n  }\n\n  console.log(newleaddata)\n\n\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    setPage(selectedPage + 1);\n    getleadslist(selectedPage + 1, perPage, localStorage.getItem('lob'));\n  };\n\n\n  const handleEmailClick = (email) => {\n    const mailtoLink = `mailto:${email}`;\n    window.open(mailtoLink);\n  }\n\n  const handleWhatsappClick = (phoneNumber) => {\n    const whatsappLink = `https://wa.me/${phoneNumber}`;\n    window.open(whatsappLink);\n  }\n\n  const startFrom = (page - 1) * perPage;\n\n  const sendData = (data) => {\n    setAgentId(data)\n  }\n\n  const sendUsertype = (data1) => {\n    setUsertype(data1)\n  }\n\n  const details = (id, lob) => {\n\n    if (lob === 'Motor') {\n      window.open(`/MotorLeaddetails?id=${id}`, '_blank')\n    }\n    if (lob === 'Travel') {\n      window.open(`/MotorLeaddetails?id=${id}`, '_blank')\n    }\n    if (lob === 'Medical') {\n      window.open(`/MotorLeaddetails?id=${id}`, '_blank')\n    }\n    if (lob === 'Home') {\n      window.open(`/MotorLeaddetails?id=${id}`, '_blank')\n    }\n    if (lob === 'Yacht') {\n      window.open(`/MotorLeaddetails?id=${id}`, '_blank')\n    }\n\n  }\n\n\n\n  const handleassignedsubmit = async (leadid) => {\n    const userdata = JSON.parse(localStorage.getItem('user'));\n    const token = localStorage.getItem('token');\n    const loginusertype = userdata.usertype;\n    let login_user_id = userdata['_id'];\n\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify({\n        agentid: agentid,\n        id: leadid,\n        usertype: usertype,\n        login_user_id: login_user_id,\n\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n    };\n\n    if (loginusertype == \"6462250eb201a6f07b2dff3a\" || loginusertype == \"646224eab201a6f07b2dff36\"\n      || loginusertype == \"646224deb201a6f07b2dff32\" || loginusertype == '64622526b201a6f07b2dff3e') {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/reassigned_agent?dashboardType=MultiSupervisorDashboard`, requestOptions)\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.status == 200) {\n            alert(data.message)\n            getleadslist(page, perPage)\n          }\n        })\n        .catch((error) => {\n          console.log(error)\n        });\n    }\n\n    if (loginusertype == \"64622470b201a6f07b2dff22\") {\n      await fetch(`https://insuranceapi-3o5t.onrender.com/api/reassigned_agent?dashboardType=supervisorDashboard`, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          if (data.status == 200) {\n            alert(data.message)\n            getleadslist(page, perPage);\n          }\n        })\n        .catch((error) => {\n          console.log(error)\n        });\n    }\n  }\n\n  return (\n    <>\n      <Accordion>\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header>\n            <div style={{ position: 'relative' }} className=\"card-header new_leads\">\n              <strong>Payment Pending</strong>\n              {notificationCount > 0 ? <div className='dashboardNotify'><h6>{notificationCount}</h6></div> : ''}\n            </div>\n          </Accordion.Header>\n          <Accordion.Body className='scrollavcds' style={{ padding: '2px' }}>\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-dark\">\n                <tr className=\"table-info\">\n                  <th scope=\"col\">Sr#</th>\n                  <th scope=\"col\">Name</th>\n                  <th scope=\"col\">Phone No.</th>\n                  <th scope=\"col\">Email-ID</th>\n                  <th scope=\"col\">Nationality</th>\n                  <th scope=\"col\">Assigned Agent</th>\n                  <th scope=\"col\">Assigned Agent Type</th>\n                  <th scope=\"col\">Policy Type</th>\n                  {/* <th scope=\"col\">Reasons</th> */}\n                  <th scope=\"col\">LMP Pol.No.</th>\n                  {/* <th scope=\"col\">Policy No.</th> */}\n                  <th scope=\"col\">Premium</th>\n                  <th scope=\"col\">Reassign</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n\n                {newleaddata.length > 0 ? (\n                  newleaddata.map((item, index) => (\n\n                    <tr key={index}>\n                      <td>{startFrom + index + 1}</td>\n                      <td>{item.name}</td>\n                      <td><a href=\"#\" onClick={() => handleWhatsappClick(item.phoneno)}>{item.phoneno}</a></td>\n                      <td><a href=\"#\" onClick={() => handleEmailClick(item.email)}>{item.email}</a></td>\n                      <td>{item.nationality}</td>\n                      {/* <td>{item.assigned_agent != [] ?\n                              \n                              (item.forward_to_info != [] ? \n                                    \n                                    (item.dc_forward_to_info != [] ? \n                                        \n                                        item.dc_forward_to_info[0]?.name : \n                                        \n                                          item.forward_to_info[0]?.name) : \n                                            \n                                            item.assigned_agent_info[0]?.name) : \n                                              \n                                              []\n                                                \n                                                }</td> */}\n                      <td>\n                        {item.assigned_agent_info != \"\" ? (\n                          item.forward_to_info != \"\" ? (\n                            item.dc_forward_to_info != \"\" ? (\n                              item.dc_forward_to_info[0]?.name || \"-\"\n                            ) : (\n                              item.forward_to_info[0]?.name || \"-\"\n                            )\n                          ) : (\n                            item.assigned_agent_info[0]?.name || \"-\"\n                          )\n                        ) : (\n                          \"-\"\n                        )}\n                      </td>\n\n                      <td>\n                        {item.assigned_type_info != \"\" ? (\n                          item.forward_to_type_info != \"\" ? (\n                            item.dcforward_to_type_info != \"\" ? (\n                              item.dcforward_to_type_info[0]?.usertype || \"-\"\n                            ) : (\n                              item.forward_to_type_info[0]?.usertype || \"-\"\n                            )\n                          ) : (\n                            item.assigned_type_info[0]?.usertype || \"-\"\n                          )\n                        ) : (\n                          \"-\"\n                        )}\n                      </td>\n\n                      <td>{item['policy_type'][0]['line_of_business_name']}</td>\n                      {/* <td>Reason</td> */}\n                      <td>{item.lead_id}</td>\n                      {/* <td>#5678</td> */}\n                      <td>{(item.final_price ? \"AED \" + item.final_price : item.finalPriceRefferd)}</td>\n                      <td>\n                        {/* <AdminsList\n                              userType={\n                                item.assigned_agent_info != \"\" ?\n                                  (item.forward_to_info != \"\" ?\n                                    (item.dc_forward_to_info != \"\" ? item.dcforward_to_type_info?.[0]?._id : item.forward_to_type_info?.[0]?._id)\n                                    : item.assigned_type_info?.[0]?._id)\n                                  : \"646224eab201a6f07b2dff36\"\n                              }\n                              leadid={item._id} sendData={sendData} sendUsertype={sendUsertype} lob={item.type_of_policy} /> */}\n\n                        <AdminsList\n                          userType={\"646224eab201a6f07b2dff36\"}\n                          leadid={item._id} sendData={sendData} sendUsertype={sendUsertype} lob={item.type_of_policy} />\n                      </td>\n                      <td className='buttons_icons'>\n                        <button className=\"btn btn-primary btn-sm \" onClick={() => details(item._id, item.policy_type[0]?.line_of_business_name)}><i className='fa fa-eye'></i></button>\n                        <button type=\"button\" className=\"btn btn-primary btn-sm \" onClick={() => handleassignedsubmit(item._id)}>Update</button>\n\n\n                      </td>\n                    </tr>\n\n                  ))\n                ) : (\n                  <tr>\n                    <td colSpan=\"12\" className=\"text-center\">\n                      <strong>No Records Found</strong>\n                    </td>\n                  </tr>\n                )\n\n                }\n              </tbody>\n            </table>\n            <section>\n              {/* <button className='save-btn' onClick={handleassignedsubmit}>Save </button> */}\n              <ReactPaginate\n                previousLabel={\"Previous\"}\n                nextLabel={\"Next\"}\n                breakLabel={\"...\"}\n                pageCount={pageCount}\n                marginPagesDisplayed={1}\n                pageRangeDisplayed={1}\n                onPageChange={handlePageClick}\n                containerClassName={\"pagination justify-content-end\"}\n                pageClassName={\"page-item\"}\n                pageLinkClassName={\"page-link\"}\n                previousClassName={\"page-item\"}\n                previousLinkClassName={\"page-link\"}\n                nextClassName={\"page-item\"}\n                nextLinkClassName={\"page-link\"}\n                breakClassName={\"page-item\"}\n                breakLinkClassName={\"page-link\"}\n                activeClassName={\"active\"}\n              />\n            </section>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>\n    </>\n  )\n}\n\nexport default PaymentPending;"],"names":["_ref","userType","sendData","sendUsertype","lob","admins","setAdmins","useState","assigned_agent","setAssigned_agent","usertype","userdata","JSON","parse","localStorage","getItem","console","log","useEffect","fetch","method","body","stringify","headers","then","response","json","data","Array","isArray","error","catch","dt","dtaArr","i","length","push","filteredSA","_jsxs","onChange","e","target","value","children","_jsx","hidden","map","admin","_id","name","filterOptions","defaultOptions","navigate","useNavigate","newleaddata","setNewleadData","leadstatus","setLeadStatus","leaddetails","setLeadDetails","line_of_business_name","setLineOfBusinessName","perPage","pageCount","setPageCount","page","setPage","showModal","setShowModal","agentid","setAgentId","setUsertype","notificationCount","setNotificationCount","token","undefined","getleadslist","async","newlocation","location","newlob","newbusinessType","businessType","newagent","agent","dateRange","startdate","enddate","assign_staff","selectedsupervisor","selectedSupervisor","item","defaultlocation","defaultlob","defaultbusinessType","defaultagent","loginusertype","requestOptions","limit","business_type","total","slice","pages","Math","ceil","list","startFrom","data1","_Fragment","Accordion","Item","eventKey","Header","style","position","className","Body","padding","scope","index","_item$dc_forward_to_i","_item$forward_to_info","_item$assigned_agent_","_item$dcforward_to_ty","_item$forward_to_type","_item$assigned_type_i","href","onClick","phoneNumber","whatsappLink","window","open","handleWhatsappClick","phoneno","email","mailtoLink","handleEmailClick","nationality","assigned_agent_info","forward_to_info","dc_forward_to_info","assigned_type_info","forward_to_type_info","dcforward_to_type_info","lead_id","final_price","finalPriceRefferd","AdminsList","leadid","type_of_policy","_item$policy_type$","id","policy_type","type","login_user_id","status","alert","message","handleassignedsubmit","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName"],"sourceRoot":""}