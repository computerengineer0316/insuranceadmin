{"version":3,"file":"static/js/8902.0517cae2.chunk.js","mappings":"uQAMA,MAkNA,EAlNyBA,KACrB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,OAC9CG,EAAqBC,IAAuBJ,EAAAA,EAAAA,UAAS,KACrDK,EAAuBC,IAAyBN,EAAAA,EAAAA,UAAS,KACzDO,EAAmBC,IAAqBR,EAAAA,EAAAA,UAAS,KAExDS,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAQC,aAAaC,QAAQ,SACnC,GAAc,OAAVF,QAA4BG,IAAVH,GAAiC,KAAVA,EACzCd,EAAS,cAER,CACD,MAGMkB,EAHMC,OAAOjB,SAASkB,KACXC,MAAM,KAAK,GACVA,MAAM,KAAK,GACbA,MAAM,KAAK,GAC3BT,EAAkBM,GAClBI,IACAC,EAAoBL,EACxB,IACD,IAEH,MAAMI,EAAeA,KAOjBE,MAAM,0DANiB,CACnBC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAInBC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IACF,MAAMC,EAAaD,EAAKA,KAClBE,EAAeD,EAAWE,OAC1BC,EAAgB,GACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAcG,IAAK,CACnC,MAAMC,EAAe,CAAEC,MAAON,EAAWI,GAAGG,cAAeC,MAAOR,EAAWI,GAAGK,KAEhFN,EAAcO,KAAKL,EACvB,CACAjC,EAAY+B,EAAc,GAC5B,EAGJX,EAAuBL,IAOzBM,MAAM,yEAAyEN,IANxD,CACnBO,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAInBC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IACF,MAAMY,EAAyBZ,EAAKA,KACpCtB,EAAoBkC,EAAuBnC,qBAC3C,MACMoC,EADaD,EAAuBE,wBACXvB,MAAM,KAC/BwB,EAAkBF,EAAYV,OAC9BK,EAAgB,GACtB,IAAK,IAAIH,EAAI,EAAGA,EAAIU,EAAiBV,IAAK,CACtC,MAAMW,EAAiB,CACnBrB,OAAQ,MACRC,QAAS,CACL,eAAgB,qBAGxBF,MAAM,iEAAiEmB,EAAYR,KAAMW,GACpFnB,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,IACHQ,EAAcG,KAAKX,EAAKA,KAAKQ,eAE7B,GAD0BA,EAAcL,SACdY,EAAiB,CACvC,MACME,EADoBT,EAAcU,KAAK,KACD3B,MAAM,KAC5C4B,EAAwBF,EAAkBd,OAC1CiB,EAAwB,GAC9B,IAAK,IAAIf,EAAI,EAAGA,EAAIc,EAAuBd,IAAK,CAC5C,MAAMgB,EAA4B,CAAEd,MAAOU,EAAkBZ,GAAII,MAAOI,EAAYR,IACpFe,EAAsBT,KAAKU,EAC/B,CACA7C,EAAkB4C,EACtB,IAEZ,CACAxC,EAAsBgC,EAAuBjC,sBAAsB,GACrE,EAGJ2C,EAAgB/C,IAClBC,EAAkBD,EAAe,EAwDrC,OACIgD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACjBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UACxBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAC,2BAE/BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,MAAA,QAAMC,OAAO,IAAIhC,OAAO,OAAOiC,SA9DjCC,IAClBA,EAAEC,iBACF,MAAM9B,EAAO,IAAI+B,SAASF,EAAEG,QACtBvD,EAAsBuB,EAAKiC,IAAI,uBAC/BnB,EAA0BvC,EAC1B2D,EAA8BpB,EAAwBX,OACtDgC,EAA6B,GACnC,IAAK,IAAI9B,EAAI,EAAGA,EAAI6B,EAA6B7B,IAC7C8B,EAA2BxB,KAAKG,EAAwBT,GAAGI,OAE/D,MAAM9B,EAAwBqB,EAAKiC,IAAI,UACjCjB,EAAiB,CACnBrB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBwC,KAAMC,KAAKC,UAAU,CACjB7D,oBAAqBA,EACrBqC,wBAAyBqB,EAA2BI,WACpD5D,sBAAuBA,EACvBE,kBAAmBA,KAG3Ba,MAAM,mEAAoEsB,GACrEnB,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IACkB,MAAhBA,EAAKwC,OACLC,IAAAA,KAAU,CACNC,MAAO,WACPC,KAAM3C,EAAK4C,QACXC,KAAM,UACNC,kBAAmB,OACpBjD,MAAMkD,IACDA,EAAOC,aACP9E,EAAS,kBACb,IAIJuE,IAAAA,KAAU,CACNC,MAAO,SACPC,KAAM3C,EAAK4C,QACXC,KAAM,QACNC,kBAAmB,OACpBjD,MAAMkD,IACDA,EAAOC,aACP9E,EAAS,kBACb,GAER,GACF,EAYoEuD,SAAA,EAClDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,yBAC9BF,EAAAA,EAAAA,KAAA,SAAO0B,KAAK,OAAOzB,UAAU,eAAe0B,YAAY,sBAAsBC,KAAK,sBAAsBC,aAAa,MAAMC,aAAc5E,EAAqB6E,UAAQ,UAG/K/B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,cAC9BF,EAAAA,EAAAA,KAACgC,EAAAA,QAAW,CACRC,QAASpF,EACTqF,eAAgBlF,EAChBmF,SAAUpC,EACVqC,SAAUrC,EACVsC,aAAa,QACbV,YAAY,kBACZW,eAAe,EACfC,2BAA2B,EAC3BC,cAAc,EACdC,MAAO,CAAEC,MAAO,CAAEC,WAAY,YAC9BZ,UAAQ,aAKxB/B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,YAC9BC,EAAAA,EAAAA,MAAA,UAAQF,UAAU,eAAe2B,KAAK,SAASG,UAAQ,EAAA7B,SAAA,EACnDF,EAAAA,EAAAA,KAAA,UAAQd,MAAM,GAAEgB,SAAC,mBACjBF,EAAAA,EAAAA,KAAA,UAAQd,MAAM,IAAI0D,SAAmC,GAAzBxF,EAA0C8C,SAAC,YACvEF,EAAAA,EAAAA,KAAA,UAAQd,MAAM,IAAI0D,SAAmC,GAAzBxF,EAA0C8C,SAAC,wBAKvFF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,KAAA,UAAQ0B,KAAK,SAASzB,UAAU,uBAAuBwC,MAAO,CAAEI,MAAO,SAAU3C,SAAC,4BAQ5G,C","sources":["views/nature-of-plan/EditNatureOfPlan.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Swal from \"sweetalert2\";\nimport Multiselect from \"multiselect-react-dropdown\";\n\nconst EditNatureOfPlan = () => {\n    const navigate = useNavigate();\n    const [location, setLocation] = useState([]);\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [nature_of_plan_name, setNatureOfPlanName] = useState('');\n    const [nature_of_plan_status, setNatureOfPlanStatus] = useState('');\n    const [nature_of_plan_id, setNatureOfPlanId] = useState('');\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            const url = window.location.href;\n            const url1 = url.split(\"/\")[3];\n            const url2 = url1.split(\"?\")[1];\n            const id = url2.split(\"=\")[1];\n            setNatureOfPlanId(id);\n            locationList();\n            natureOfPlanDetails(id);\n        }\n    }, []);\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n\n    const natureOfPlanDetails = (id) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_nature_of_plan_details/${id}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const nature_of_plan_details = data.data;\n                setNatureOfPlanName(nature_of_plan_details.nature_of_plan_name);\n                const locationid = nature_of_plan_details.nature_of_plan_location;\n                const location_id = locationid.split(\",\");\n                const location_id_len = location_id.length;\n                const location_name = [];\n                for (let i = 0; i < location_id_len; i++) {\n                    const requestOptions = {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                    };\n                    fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location_by_id/${location_id[i]}`, requestOptions)\n                        .then((response) => response.json())\n                        .then((data) => {\n                            location_name.push(data.data.location_name);\n                            const location_name_len = location_name.length;\n                            if (location_name_len === location_id_len) {\n                                const location_name_str = location_name.join(\",\");\n                                const location_name_arr = location_name_str.split(\",\");\n                                const location_name_arr_len = location_name_arr.length;\n                                const location_name_arr_obj = [];\n                                for (let i = 0; i < location_name_arr_len; i++) {\n                                    const location_name_arr_obj_obj = { label: location_name_arr[i], value: location_id[i] };\n                                    location_name_arr_obj.push(location_name_arr_obj_obj);\n                                }\n                                setSelectedOption(location_name_arr_obj);\n                            }\n                        });\n                }\n                setNatureOfPlanStatus(nature_of_plan_details.nature_of_plan_status);\n            });\n    }\n\n    const handleChange = (selectedOption) => {\n        setSelectedOption(selectedOption);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const data = new FormData(e.target);\n        const nature_of_plan_name = data.get('nature_of_plan_name');\n        const nature_of_plan_location = selectedOption;\n        const nature_of_plan_location_len = nature_of_plan_location.length;\n        const nature_of_plan_location_id = [];\n        for (let i = 0; i < nature_of_plan_location_len; i++) {\n            nature_of_plan_location_id.push(nature_of_plan_location[i].value);\n        }\n        const nature_of_plan_status = data.get('status');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                nature_of_plan_name: nature_of_plan_name,\n                nature_of_plan_location: nature_of_plan_location_id.toString(),\n                nature_of_plan_status: nature_of_plan_status,\n                nature_of_plan_id: nature_of_plan_id\n            })\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/update_nature_of_plan`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    Swal.fire({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        confirmButtonText: \"Ok\",\n                    }).then((result) => {\n                        if (result.isConfirmed) {\n                            navigate(\"/nature-of-plan\");\n                        }\n                    });\n                }\n                else {\n                    Swal.fire({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        confirmButtonText: \"Ok\",\n                    }).then((result) => {\n                        if (result.isConfirmed) {\n                            navigate(\"/nature-of-plan\");\n                        }\n                    });\n                }\n            });\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h4 className=\"card-title\">Edit Nature Of Plan</h4>\n                        </div>\n                        <div className=\"card-body\">\n                            <form action=\"/\" method=\"POST\" onSubmit={handleSubmit}>\n                                <div className=\"row\">\n                                    <div className=\"col-md-6\">\n                                        <div className=\"form-group\">\n                                            <label className=\"form-label\">Nature Of Plan Name</label>\n                                            <input type=\"text\" className=\"form-control\" placeholder=\"Nature Of Plan Name\" name=\"nature_of_plan_name\" autoComplete=\"off\" defaultValue={nature_of_plan_name} required />\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-6\">\n                                        <div className=\"form-group\">\n                                            <label className=\"form-label\">Location</label>\n                                            <Multiselect\n                                                options={location}\n                                                selectedValues={selectedOption}\n                                                onSelect={handleChange}\n                                                onRemove={handleChange}\n                                                displayValue=\"label\"\n                                                placeholder=\"Select Location\"\n                                                closeOnSelect={false}\n                                                avoidHighlightFirstOption={true}\n                                                showCheckbox={true}\n                                                style={{ chips: { background: \"#007bff\" } }}\n                                                required\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-md-6\">\n                                        <div className=\"form-group\">\n                                            <label className=\"form-label\">Status</label>\n                                            <select className=\"form-control\" name=\"status\" required>\n                                                <option value=\"\">Select Status</option>\n                                                <option value=\"1\" selected={nature_of_plan_status == 1 ? true : false}>Active</option>\n                                                <option value=\"0\" selected={nature_of_plan_status == 0 ? true : false}>Inactive</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-md-12\">\n                                        <button type=\"submit\" className=\"btn btn-primary mt-2\" style={{ float: \"right\" }}>Update</button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EditNatureOfPlan\n"],"names":["EditNatureOfPlan","navigate","useNavigate","location","setLocation","useState","selectedOption","setSelectedOption","nature_of_plan_name","setNatureOfPlanName","nature_of_plan_status","setNatureOfPlanStatus","nature_of_plan_id","setNatureOfPlanId","useEffect","token","localStorage","getItem","undefined","id","window","href","split","locationList","natureOfPlanDetails","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","nature_of_plan_details","location_id","nature_of_plan_location","location_id_len","requestOptions","location_name_arr","join","location_name_arr_len","location_name_arr_obj","location_name_arr_obj_obj","handleChange","_jsx","className","children","_jsxs","action","onSubmit","e","preventDefault","FormData","target","get","nature_of_plan_location_len","nature_of_plan_location_id","body","JSON","stringify","toString","status","Swal","title","text","message","icon","confirmButtonText","result","isConfirmed","type","placeholder","name","autoComplete","defaultValue","required","Multiselect","options","selectedValues","onSelect","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","style","chips","background","selected","float"],"sourceRoot":""}