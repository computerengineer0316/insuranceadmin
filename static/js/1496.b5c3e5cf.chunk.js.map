{"version":3,"file":"static/js/1496.b5c3e5cf.chunk.js","mappings":"uQAMA,MAsUA,EAtUqBA,KACjB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAiBC,IAAoBC,EAAAA,EAAAA,UAAS,KAC9CC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,KAC1CK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,KAChCO,EAAaC,IAAkBR,EAAAA,EAAAA,UAAS,KAGxCS,EAAUC,IAAeV,EAAAA,EAAAA,UAAS,CAAC,CACtCW,YAAa,GACbC,IAAK,GACLC,QAAS,GACTC,eAAgB,GAChBhB,gBAAiBA,EACjBiB,cAAeZ,MAGnBa,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAQC,aAAaC,QAAQ,SACnC,GAAc,OAAVF,QAA4BG,IAAVH,GAAiC,KAAVA,EACzCrB,EAAS,cAER,CACD,MAGMyB,EAHMC,OAAOC,SAASC,KACXC,MAAM,KAAK,GACVA,MAAM,KAAK,GACbA,MAAM,KAAK,GAC3B1B,EAAiBsB,GACjBK,IACAC,IACAC,IACAC,GACJ,IACD,IACH,MAmBMC,EAAeA,CAACC,EAAOC,KACzB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAKG,OACjB,OAARF,GACAG,EAAmBF,EAAOH,GAE9B,MAAMM,EAAY,IAAI5B,GACtB4B,EAAUN,GAAOE,GAAQC,EACzBG,EAAUN,GAAwB,gBAAIjC,EAEtCY,EAAY2B,EAAU,EAEpBC,EAAkBA,CAACP,EAAOG,EAAOK,KACnC,MAAMF,EAAY,IAAI5B,GACtB4B,EAAUN,GAAOQ,GAASL,EAC1BxB,EAAY2B,EAAU,EAEpBX,EAAeA,KAOjBc,MAAM,qEANiB,CACnBC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAInBC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IACF5C,EAAgB4C,EAAKA,KAAK,GAC5B,EAGJnB,EAAkBA,KAOpBa,MAAM,0DANiB,CACnBC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAInBC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKI,IACF,IAAID,EAAOC,EAAOD,KAClB,MAAM/B,EAAgB,GACtB,IAAK,IAAIiC,EAAI,EAAGA,GAAQ,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMG,QAAQD,IAAK,CACnC,MAAME,EAAM,CAAEC,MAAOL,EAAKE,GAAGI,cAAelB,MAAOY,EAAKE,GAAGK,KAC3DtC,EAAcuC,KAAKJ,EACvB,CACA,MAAMb,EAAY,IAAI5B,GACtB4B,EAAU,GAAkB,cAAItB,EAChCL,EAAY2B,GACZjC,EAAgBW,EAAc,GAEhC,EAEJqB,EAAqBA,CAACf,EAAIU,KAO5BS,MAAM,sEAAsEnB,IANrD,CACnBoB,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAInBC,MAAKC,GAAYA,EAASC,SAC1BF,MAAMG,IACH,IAAIT,EAAY,IAAI5B,GACpB4B,EAAUN,GAAgB,QAAIe,EAAKA,KAAK,GAAGO,IAC3C3C,EAAY2B,EAAU,IAEzBkB,OAAMC,GAASC,QAAQC,IAAI,QAASF,IAAO,EAG9C5B,EAAaA,KAOfY,MAAM,8DANiB,CACnBC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAInBC,MAAKC,GAAYA,EAASC,SAC1BF,MAAMG,IACHxC,EAAWwC,EAAKA,KAAK,GAEvB,EAEJjB,EAAiBA,KAOnBW,MAAM,kEANiB,CACnBC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAInBC,MAAKC,GAAYA,EAASC,SAC1BF,MAAMG,IACHtC,EAAesC,EAAKA,KAAK,GAC3B,EA+CV,OACIa,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACjBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAC,uBAE/BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBF,EAAAA,EAAAA,KAAA,KAAGnC,KAAM,iCAAiC1B,IAAmB8D,UAAU,kBAAkBG,MAAO,CAAEC,MAAO,SAAUH,SAAC,iBAIhIC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,+BAA+BK,QAlLpDC,KACjB,MAAMC,EAAU1D,EAASA,EAASwC,OAAS,GACrCZ,EACN,CACI1B,YAAoB,OAAPwD,QAAO,IAAPA,OAAO,EAAPA,EAASxD,YACtBC,IAAY,OAAPuD,QAAO,IAAPA,OAAO,EAAPA,EAASvD,IACdC,QAAgB,OAAPsD,QAAO,IAAPA,OAAO,EAAPA,EAAStD,QAClBC,eAAuB,OAAPqD,QAAO,IAAPA,OAAO,EAAPA,EAASrD,eACzBhB,gBAAwB,OAAPqE,QAAO,IAAPA,OAAO,EAAPA,EAASrE,gBAC1BiB,cAAsB,OAAPoD,QAAO,IAAPA,OAAO,EAAPA,EAASpD,eAG5BL,EAAY,IAAID,EAAU4B,GAAW,EAsKsDwB,SAAC,MAE/D,OAARpD,QAAQ,IAARA,OAAQ,EAARA,EAAU2D,KAAI,CAACC,EAAMtC,KAEd+B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,SACIW,SAAWtC,GAASF,EAAaC,EAAOC,GACxCuC,KAAK,OAAOtC,KAAK,cAAc2B,UAAU,eACzCY,aAAc/D,EAASsB,GAAOpB,YAC9B8D,YAAY,SAASC,UAAQ,UAGzCf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPC,EAAAA,EAAAA,MAAA,UAAQY,UAAQ,EAACd,UAAU,eAAeU,SAAWtC,GAASF,EAAaC,EAAOC,GAC9EC,KAAK,iBACLuC,aAAc/D,EAASsB,GAAOjB,eAAe+C,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,UAAQgB,QAAM,EAACzC,MAAM,GAAE2B,SAAC,yBAEpB5D,EAAamE,KAAI,CAACC,EAAMO,KAEhBjB,EAAAA,EAAAA,KAAA,UAAmBzB,MAAOmC,EAAKhB,IAAIQ,SAAEQ,EAAKQ,eAA7BD,cAOrCjB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,SACPC,EAAAA,EAAAA,MAAA,UAAQY,UAAQ,EAACd,UAAU,eAAeU,SAAWtC,GAASF,EAAaC,EAAOC,GAAOC,KAAK,MAAMuC,aAAc/D,EAASsB,GAAOnB,IAAIiD,SAAA,EAClIF,EAAAA,EAAAA,KAAA,UAAQgB,QAAM,EAACzC,MAAM,GAAE2B,SAAC,eAEpBxD,EAAQ+D,KAAI,CAACC,EAAMO,KAEXjB,EAAAA,EAAAA,KAAA,UAAmBzB,MAAOmC,EAAKhB,IAAIQ,SAAEQ,EAAKpC,MAA7B2C,iBAWzCd,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,aACPC,EAAAA,EAAAA,MAAA,UAAQY,UAAQ,EAACd,UAAU,eAAeU,SAAWtC,GAASF,EAAaC,EAAOC,GAAOC,KAAK,UAAUuC,aAAc/D,EAASsB,GAAOlB,QAAQgD,SAAA,EAC1IF,EAAAA,EAAAA,KAAA,UAAQgB,QAAM,EAACzC,MAAM,GAAE2B,SAAC,mBAEpBtD,EAAY6D,KAAI,CAACC,EAAMtC,KAEf4B,EAAAA,EAAAA,KAAA,UAAoBmB,SAAoB,IAAV/C,EAAaG,MAAOmC,EAAKhB,IAAIQ,SAAEQ,EAAKpC,MAArDF,cAOrC4B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAACoB,EAAAA,QAAW,CACRC,QAAS7E,EACT8E,eAAgB9E,EAChB+E,SAAWlD,GAAUM,EAAgBP,EAAOC,EAAM,iBAClDmD,SAAWnD,GAAUM,EAAgBP,EAAOC,EAAM,iBAClDoD,aAAa,QACbX,YAAY,kBACZY,eAAe,EACfC,2BAA2B,EAC3BC,cAAc,EACdC,WAAW,EACXzB,MAAO,CAAE0B,MAAO,CAAEC,WAAY,uBAK9C/B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAyBG,MAAO,CAAEC,MAAO,SAAWC,QAASA,IA5P3FlC,KACrB,MAAM4D,EAAO,IAAIlF,GACjBkF,EAAKC,OAAO7D,EAAO,GACnBrB,EAAYiF,EAAK,EAyPsGE,CAAgB9D,GAAQ8B,SAAC,SAEhHF,EAAAA,EAAAA,KAAA,MAAII,MAAO,CAAE+B,UAAW,sBAtFG/D,MA6FvC4B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAChBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,KAAA,UAAQoC,UAAWtF,EAASwC,OAAuBgB,QAASA,IAjKrE+B,WACnB,IAAIC,EAAiB,CAEjBxD,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBwD,KAAMC,KAAKC,UAAU3F,IAGzB+B,MAAM,0EAA2EyD,GAC5EtD,MAAKC,GAAYA,EAASC,SAC1BF,MAAKI,IACF,IAAID,EAAOC,EACQ,KAAfD,EAAKuD,QACLC,IAAK,CACD/D,MAAO,WACPgE,KAAMzD,EAAK0D,QACXjC,KAAM,UACNkC,KAAM,UACNC,QAAQ,IAEZC,YAAW,KACPL,IAAAA,QACA1G,EAAS,iCAAiCE,IAAkB,GAC7D,OAEHwG,IAAK,CACD/D,MAAO,SACPgE,KAAMzD,EAAK0D,QACXjC,KAAM,QACNkC,KAAM,QACNC,QAAQ,IAEZC,YAAW,KACPL,IAAAA,OAAY,GAEb,KAEP,IAEH/C,OAAMC,GAASC,QAAQC,IAAI,QAASF,IAAO,EAwH8CoD,GAAkBhD,UAAU,uBAAuBG,MAAO,CAAEC,MAAO,SAAUH,SAAC,0BAStK,C","sources":["views/Group-Medical/GroupMedPlanRates/AddPlanRates.js"],"sourcesContent":["import React from 'react';\nimport Multiselect from 'multiselect-react-dropdown';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\n\nconst AddPlanRates = () => {\n    const navigate = useNavigate();\n    const [medical_plan_id, setMedicalPlanId] = useState('');\n    const [planCategory, setPlanCategory] = useState([]);\n    const [locationData, setLocationData] = useState([]);\n    const [TPAData, setTPAData] = useState([]);\n    const [networkData, setNetworkData] = useState([]);\n\n\n    const [rowsData, setRowsData] = useState([{\n        policy_name: '',\n        TPA: '',\n        network: '',\n        planCatagoryId: '',\n        medical_plan_id: medical_plan_id,\n        locationArray: locationData\n\n    }])\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            const url = window.location.href;\n            const url1 = url.split(\"/\")[3];\n            const url2 = url1.split(\"?\")[1];\n            const id = url2.split(\"=\")[1];\n            setMedicalPlanId(id);\n            Plancategory()\n            getLocationdata()\n            getTPAData()\n            getNetworkData()\n        }\n    }, []);\n    const addTableRows = () => {\n        const lastitm = rowsData[rowsData.length - 1];\n        const rowsInput =\n        {\n            policy_name: lastitm?.policy_name,\n            TPA: lastitm?.TPA,\n            network: lastitm?.network,\n            planCatagoryId: lastitm?.planCatagoryId,\n            medical_plan_id: lastitm?.medical_plan_id,\n            locationArray: lastitm?.locationArray\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n        if (name == \"TPA\") {\n            getLinkListByTPAid(value, index)\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        rowsInput[index][\"medical_plan_id\"] = medical_plan_id\n\n        setRowsData(rowsInput)\n    }\n    const handleChange123 = (index, value, title) => {\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n    const Plancategory = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getGroupMedicalCategory`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setPlanCategory(data.data);\n            });\n    }\n\n    const getLocationdata = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(result => {\n                let data = result.data;\n                const locationArray = [];\n                for (let i = 0; i < data?.length; i++) {\n                    const obj = { label: data[i].location_name, value: data[i]._id };\n                    locationArray.push(obj);\n                }\n                const rowsInput = [...rowsData]\n                rowsInput[0][\"locationArray\"] = locationArray\n                setRowsData(rowsInput)\n                setLocationData(locationArray)\n\n            });\n    }\n    const getLinkListByTPAid = (id, index) => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/getTpaLinkNetwork?tpaId=${id}`, requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n                let rowsInput = [...rowsData]\n                rowsInput[index][\"network\"] = data.data[0]._id\n                setRowsData(rowsInput)\n            })\n            .catch(error => console.log('error', error));\n    }\n\n    const getTPAData = () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        fetch(\"https://insuranceapi-3o5t.onrender.com/api/activeMedicalTPA\", requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n                setTPAData(data.data)\n\n            })\n    }\n    const getNetworkData = () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        fetch(\"https://insuranceapi-3o5t.onrender.com/api/activeMedicalNetwork\", requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n                setNetworkData(data.data)\n            })\n    }\n    const addRatePrimium = async () => {\n        var requestOptions = {\n\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(rowsData),\n        };\n\n        fetch(\"https://insuranceapi-3o5t.onrender.com/api/add_Group_Medical_Plan_rates\", requestOptions)\n            .then(response => response.json())\n            .then(result => {\n                let data = result\n                if (data.status == 201) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false\n                    })\n                    setTimeout(() => {\n                        swal.close()\n                        navigate(`/ViewGroupMedicalPlanPrice?id=${medical_plan_id}`)\n                    }, 1000);\n                } else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false\n                    })\n                    setTimeout(() => {\n                        swal.close()\n                        // navigate('/ViewGroupMedicalPlanPrice?id=' + travel_plan_id)\n                    }, 1000);\n\n                }\n            })\n            .catch(error => console.log('error', error));\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className='row'>\n                                <div className='col-md-6'>\n                                    <h4 className=\"card-title\">Add TPA/Network</h4>\n                                </div>\n                                <div className='col-md-6'>\n                                    <a href={`/ViewGroupMedicalPlanPrice?id=${medical_plan_id}`} className=\"btn btn-primary\" style={{ float: \"right\" }}>Back</a>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body\">\n                            {/* ////////////////////////////////// */}\n                            <button className=\"btn btn-outline-success my-1\" onClick={addTableRows}>+</button>\n                            {/* <form action=\"/\" method=\"POST\" onSubmit={()=>handleSubmit()}> */}\n                            {rowsData?.map((item, index) => {\n                                return (\n                                    <div className=\"row mb-3\" key={index}>\n                                        <div className='row'>\n                                            <div className=\"col-md-4\">\n                                                <div className=\"form-group mb-3\">\n                                                    <label>Policy Name</label>\n                                                    <input\n                                                        onChange={(evnt) => handleChange(index, evnt)}\n                                                        type=\"text\" name=\"policy_name\" className=\"form-control\"\n                                                        defaultValue={rowsData[index].policy_name}\n                                                        placeholder=\"Enter \" required />\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-4\">\n                                                <div className=\"form-group mb-3\">\n                                                    <label>Plan Category</label>\n                                                    <select required className=\"form-control\" onChange={(evnt) => handleChange(index, evnt)}\n                                                        name=\"planCatagoryId\"\n                                                        defaultValue={rowsData[index].planCatagoryId} >\n                                                        <option hidden value=\"\">Select Plan Category</option>\n                                                        {\n                                                            planCategory.map((item, indx) => {\n                                                                return (\n                                                                    <option key={indx} value={item._id}>{item.category_name}</option>\n                                                                )\n                                                            })\n                                                        }\n                                                    </select>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-4\">\n                                                <div className=\"form-group mb-3\">\n                                                    <label>TPA</label>\n                                                    <select required className=\"form-control\" onChange={(evnt) => handleChange(index, evnt)} name=\"TPA\" defaultValue={rowsData[index].TPA} >\n                                                        <option hidden value=\"\">Select TPA</option>\n                                                        {\n                                                            TPAData.map((item, indx) => {\n                                                                return (\n                                                                    <option key={indx} value={item._id}>{item.name}</option>\n                                                                )\n                                                            })\n                                                        }\n                                                    </select>\n                                                </div>\n                                            </div>\n\n\n                                        </div>\n\n                                        <div className='row'>\n                                            <div className=\"col-md-4\">\n                                                <div className=\"form-group mb-3\">\n                                                    <label>Network</label>\n                                                    <select required className=\"form-control\" onChange={(evnt) => handleChange(index, evnt)} name=\"network\" defaultValue={rowsData[index].network} >\n                                                        <option hidden value=\"\">Select network</option>\n                                                        {\n                                                            networkData.map((item, index) => {\n                                                                return (\n                                                                    <option key={index} selected={index === 0} value={item._id}>{item.name}</option>\n                                                                )\n                                                            })\n                                                        }\n                                                    </select>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-4\">\n                                                <div className=\"form-group mb-3\">\n                                                    <label>Location</label>\n                                                    <Multiselect\n                                                        options={locationData}\n                                                        selectedValues={locationData}\n                                                        onSelect={(evnt) => (handleChange123(index, evnt, 'locationArray'))}\n                                                        onRemove={(evnt) => (handleChange123(index, evnt, 'locationArray'))}\n                                                        displayValue=\"label\"\n                                                        placeholder=\"Select Location\"\n                                                        closeOnSelect={false}\n                                                        avoidHighlightFirstOption={true}\n                                                        showCheckbox={true}\n                                                        showArrow={true}\n                                                        style={{ chips: { background: \"#007bff\" } }}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-md-12 my-2\">\n                                            <div className=\"btn btn-outline-danger\" style={{ float: \"right\" }} onClick={() => (deleteTableRows(index))}>x</div>\n                                        </div>\n                                        <hr style={{ borderTop: '2px solid #111' }}></hr>\n                                    </div>\n\n                                )\n                            })\n\n                            }\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <button disabled={!rowsData.length ? true : false} onClick={() => addRatePrimium()} className=\"btn btn-primary mt-2\" style={{ float: \"right\" }}>Submit</button>\n                                </div>\n                            </div>\n                            {/* ///////////////////////////////// */}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default AddPlanRates\n"],"names":["AddPlanRates","navigate","useNavigate","medical_plan_id","setMedicalPlanId","useState","planCategory","setPlanCategory","locationData","setLocationData","TPAData","setTPAData","networkData","setNetworkData","rowsData","setRowsData","policy_name","TPA","network","planCatagoryId","locationArray","useEffect","token","localStorage","getItem","undefined","id","window","location","href","split","Plancategory","getLocationdata","getTPAData","getNetworkData","handleChange","index","evnt","name","value","target","getLinkListByTPAid","rowsInput","handleChange123","title","fetch","method","headers","then","response","json","data","result","i","length","obj","label","location_name","_id","push","catch","error","console","log","_jsx","className","children","_jsxs","style","float","onClick","addTableRows","lastitm","map","item","onChange","type","defaultValue","placeholder","required","hidden","indx","category_name","selected","Multiselect","options","selectedValues","onSelect","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","showArrow","chips","background","rows","splice","deleteTableRows","borderTop","disabled","async","requestOptions","body","JSON","stringify","status","swal","text","message","icon","button","setTimeout","addRatePrimium"],"sourceRoot":""}