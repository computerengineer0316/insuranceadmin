{"version":3,"file":"static/js/3477.2695a850.chunk.js","mappings":"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","sources":["views/email_templates/ViewAllMail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Modal, Button } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\n// import * as FileSaver from 'file-saver';\n// import * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\nimport axios from 'axios';\n\nconst ViewAllMail = () => {\n    const navigate = useNavigate();\n    const [perPage] = useState(10);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [reason_type, setReasonType] = useState([]);\n    const [typeDetails, setTypeDetails] = useState([]);\n    const [id, setId] = useState([]);\n    const [showModal, setShowModal] = useState(false);\n    const [visible, setVisible] = useState(false);\n    const [location, setLocation] = useState([]);\n    const [defaultlocation, setDefaultLocation] = useState([]);\n    const [masterpermission, setMasterPermission] = useState([]);\n    useEffect(() => {\n\n        getAllMails(page, perPage);\n\n    }, [])\n\n\n\n    const getAllMails = async (page, perPage) => {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n                },\n            };\n            await fetch(`https://insuranceapi-3o5t.onrender.com/api/getEmails?page=${page}&limit=${perPage}`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data, \"result\");\n                    const total = data?.total;\n                    const slice = total / perPage;\n                    const pages = Math.ceil(slice);\n                    setPageCount(pages);\n                    const list = data?.data;\n                    console.log(list, \"list\");\n                    setReasonType(list);\n\n                });\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const handlesubmit = async (e) => {\n        e.preventDefault();\n\n        const data = new FormData(e.target);\n        const template_type = data.get('template_type');\n        await fetch('https://insuranceapi-3o5t.onrender.com/api/addEmailType', {\n            method: 'POST',\n            body: JSON.stringify({\n                name: template_type,\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n            }\n        }).then(res => res.json())\n            .then(data => {\n                console.log(data);\n                if (data.status == 201) {\n\n                    swal({\n                        text: \"Reason Type Updated Successfully!\",\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    });\n                    setShowModal(false);\n                    getAllMails(page, perPage);\n                    setTimeout(() => {\n                        swal.close();\n                    }, 2000);\n                } else {\n                    swal(\"Oops!\", \"Something went wrong!\", \"error\");\n                }\n            })\n\n    }\n\n\n\n    const updateReasonType = async (e) => {\n        e.preventDefault();\n        const data = new FormData(e.target);\n        const template_type = data.get('template_type');\n\n        console.log(template_type);\n        console.log(id);\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/editEmailType/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                name: template_type,\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            }\n        }).then(res => res.json())\n            .then(data => {\n                console.log(data);\n                if (data.status == 200) {\n                    swal({\n                        text: \"Template Type Updated Successfully!\",\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    });\n                    setVisible(false);\n                    getAllMails(page, perPage);\n                    setTimeout(() => {\n                        swal.close();\n                    }\n                        , 1000);\n                } else {\n                    swal({\n                        text: \"Something went wrong!\",\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    });\n                    setTimeout(() => {\n                        swal.close();\n                    }\n                        , 1000);\n                }\n            })\n    }\n\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        getAllMails(selectedPage + 1, perPage);\n    };\n\n    const startFrom = (page - 1) * perPage;\n\n\n\n\n\n    return (\n        <>\n            <Container>\n                <div className=\"card mb-4\">\n                    <div className=\"card-header\">\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <h4 className=\"card-title\">Mails</h4>\n                            </div>\n                            <div className=\"col-md-6\">\n\n                                {/* <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => setShowModal(true)}>Add Types</button> */}\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"card-header\" style={{ textAlign: 'right' }}>\n\n                    </div>\n                    <div className=\"card-body\">\n                        <table className=\"table table-bordered\">\n                            <thead className=\"thead-dark\">\n                                <tr className=\"table-info\">\n                                    <th scope=\"col\">#</th>\n                                    <th scope=\"col\">Subject</th>\n                                    <th scope=\"col\">Sent By</th>\n                                    <th scope=\"col\">Received By</th>\n                                    <th scope=\"col\">CreatedAt</th>\n                                    <th scope=\"col\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    reason_type?.length > 0 ?\n                                        reason_type.map((item, index) =>\n                                            <tr key={index}>\n                                                <td>{startFrom + index + 1}</td>\n                                                <td>{item?.subject}</td>\n                                                <td>{item?.sent_by}</td>\n                                                <td>{item?.received_by?.map((val) => val.email).join(', ')}</td>\n                                                <td>{item?.createdAt}</td>\n\n                                                <td>\n                                                    <button className=\"btn btn-primary\" onClick={() => navigate(`/ViewMail?id=${item?._id}`)}>View</button>{' '}\n                                                </td>\n                                            </tr>\n                                        ) : <tr>\n                                            <td colSpan=\"7\">No Data Found</td>\n                                        </tr>\n                                }\n                            </tbody>\n                        </table>\n                        <ReactPaginate\n                            previousLabel={\"Previous\"}\n                            nextLabel={\"Next\"}\n                            breakLabel={\"...\"}\n                            pageCount={pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={3}\n                            onPageChange={handlePageClick}\n                            containerClassName={\"pagination justify-content-end\"}\n                            pageClassName={\"page-item\"}\n                            pageLinkClassName={\"page-link\"}\n                            previousClassName={\"page-item\"}\n                            previousLinkClassName={\"page-link\"}\n                            nextClassName={\"page-item\"}\n                            nextLinkClassName={\"page-link\"}\n                            breakClassName={\"page-item\"}\n                            breakLinkClassName={\"page-link\"}\n                            activeClassName={\"active\"}\n                        />\n                    </div>\n                </div>\n            </Container>\n            {/* <CModal size='lg' visible={showModal} onHide={() => setShowModal(false)}>\n                <CModalHeader onClose={() => setShowModal(false)} >\n                    <CModalTitle>Add Template Type</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={handlesubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n\n                                                    <label className=\"form-label\"><strong>Add Type</strong></label>\n                                                    <input type='text' className=\"form-control\"\n                                                        name='template_type'\n                                                        placeholder=\"Enter Reason Type\"\n                                                        defaultValue=\"\"\n                                                        required\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </CButton>\n                </CModalFooter>\n            </CModal> */}\n\n            {/* <Modal size='lg' show={visible} onHide={() => setVisible(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Template Type</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updateReasonType}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n\n                                                    <label className=\"form-label\"><strong>Edit Type</strong></label>\n                                                    <input type='text' className=\"form-control\"\n                                                        name='template_type'\n                                                        placeholder='Template Type'\n                                                        defaultValue={typeDetails?.name}\n                                                        required\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setVisible(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal> */}\n        </>\n    )\n}\n\nexport default ViewAllMail\n"],"names":["ViewAllMail","navigate","useNavigate","perPage","useState","pageCount","setPageCount","page","setPage","reason_type","setReasonType","typeDetails","setTypeDetails","id","setId","showModal","setShowModal","visible","setVisible","location","setLocation","defaultlocation","setDefaultLocation","masterpermission","setMasterPermission","useEffect","getAllMails","async","requestOptions","method","headers","localStorage","getItem","fetch","then","response","json","data","console","log","slice","total","pages","Math","ceil","list","error","startFrom","_jsx","_Fragment","children","Container","_jsxs","className","style","textAlign","scope","length","map","item","index","_item$received_by","subject","sent_by","received_by","val","email","join","createdAt","onClick","_id","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName"],"sourceRoot":""}