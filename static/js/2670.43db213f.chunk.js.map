{"version":3,"file":"static/js/2670.43db213f.chunk.js","mappings":"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","sources":["views/Yacht/Yacht_Plan/Year_Code/Add_Year_Code.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Form, json, useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\n\nconst YearCode = () => {\n    const navigate = useNavigate();\n    const [location, setLocation] = useState([]);\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            locationList();\n        }\n    }, []);\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n                setLocation(location_list);\n            });\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        try {\n            const hasEmptyFields = rowsData.some((row) => {\n                return !row.location;\n            });\n\n            if (hasEmptyFields) {\n                // Display an error message or handle the validation error as needed\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return false; // Exit the function if there are empty fields\n            }\n            else {\n                const requestOptions = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(rowsData)\n                };\n                fetch(`https://insuranceapi-3o5t.onrender.com/api/addYatchYear`, requestOptions)\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.status == 201) {\n                            swal({\n                                text: data.message,\n                                type: \"success\",\n                                icon: \"success\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                                navigate('/ViewYachtYearCode')\n                            }, 1000);\n\n                        }\n                        else if (data.status != 200) {\n                            swal({\n                                title: \"Error!\",\n                                text: data.message,\n                                type: \"error\",\n                                icon: \"error\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                                navigate('/ViewYachtYearCode')\n                            }, 1000);\n                        }\n                    });\n\n            }\n        }\n        catch (err) {\n            console.log(err)\n        }\n\n    }\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            yearDesc: '',\n            location: location,\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n    const handleImageChange = (indx, file) => {\n        //  file[\"logoindex\"] = indx\n        rowsData[indx][\"logo\"] = file;\n        // const AllLogos = [...logos]\n        // AllLogos.push(file)\n        // setLogos(AllLogos)\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\" >\n                <div className=\"col-md-12\" >\n                    <div className=\"card\" >\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <h4 className=\"card-title\">Add Yacht Year Code</h4>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                            <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                <thead>\n                                    <tr>\n                                        <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                        <th>Year Code</th>\n                                        <th>Location</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        rowsData.map((data, index) => {\n                                            return (\n                                                <tr key={index} >\n                                                    <td>\n                                                        <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                    </td>\n                                                    <td>\n                                                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"yearDesc\" placeholder=\"Year Code\" autoComplete=\"off\" required />\n\n                                                    </td>\n                                                    <td>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={location}\n                                                            displayValue=\"label\"\n                                                            onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                            onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                            placeholder=\"Select Location\"\n                                                            showCheckbox={true}\n                                                            closeOnSelect={false}\n                                                            required\n                                                        />\n                                                    </td>\n\n\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"card-footer\">\n                            <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default YearCode\n"],"names":["YearCode","navigate","useNavigate","location","setLocation","useState","rowsData","setRowsData","errors","setErrors","useEffect","token","localStorage","getItem","undefined","locationList","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","handleChange1","index","title","rowsInput","_jsx","className","children","_jsxs","style","overflowX","width","onClick","addTableRows","yearDesc","map","rows","splice","deleteTableRows","type","onChange","evnt","handleChange","name","target","trim","prevErrors","placeholder","autoComplete","required","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","closeOnSelect","e","preventDefault","some","row","swal","text","icon","requestOptions","body","JSON","stringify","status","message","button","setTimeout","err","console","log"],"sourceRoot":""}