{"version":3,"file":"static/js/4772.60811c81.chunk.js","mappings":"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","sources":["views/user-type/ViewUsertype.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Modal, Button } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport filePath from '../../webroot/sample-files/user-type.xlsx'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert';\n\nconst ViewUsertype = () => {\n  const navigate = useNavigate();\n  const [data, setData] = useState([]);\n  const [perPage] = useState(10);\n  const [pageCount, setPageCount] = useState(0);\n  const [page, setPage] = useState(1);\n  const [excelfile, setExcelfile] = useState(\"\");\n  const [usertype, setUsertype] = useState('');\n  const [usertype_status, setUsertypestatus] = useState('');\n  const [id, setId] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [visibleedit, setVisibleedit] = useState(false);\n  const [masterpermission, setMasterpermission] = useState([]);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token === null || token === undefined || token === '') {\n      navigate('/login')\n    }\n    else {\n      getusertypelist(page, perPage);\n      const userdata = JSON.parse(localStorage.getItem('user'));\n      const master_permission = userdata?.master_permission?.[0] || {};\n      setMasterpermission(master_permission);\n    }\n  }, [])\n\n  const getusertypelist = (page, perPage) => {\n    try {\n      setData([]);\n      const requestOptions = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      fetch(`https://insuranceapi-3o5t.onrender.com/api/get_user_type/${page}/${perPage}`, requestOptions)\n        .then(response => response.json())\n        .then(\n          data => {\n            const total = data.total;\n            const slice = total / perPage;\n            const pages = Math.ceil(slice);\n            setPageCount(pages);\n            const list = data.data;\n            setData(list)\n          }\n        );\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const fileType = 'xlsx'\n  const exporttocsv = () => {\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n    const newdata = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(newdata, \"User-type\" + \".xlsx\")\n  }\n\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    setPage(selectedPage + 1);\n    getusertypelist(selectedPage + 1, perPage);\n  };\n\n\n  const updatestatus = async (id, usertype_status) => {\n\n    let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/update_user_type_status', {\n      method: 'post',\n      body: JSON.stringify({ id, usertype_status }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    result = await result.json();\n    swal(\"Updated Succesfully\", \"\", \"success\");\n    getusertypelist(page, perPage)\n  }\n\n  const collectExceldata = async (e) => {\n    e.preventDefault()\n    const fd = new FormData()\n    fd.append('file', excelfile)\n    let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_user_type_excel \",\n      {\n        method: \"post\",\n        body: fd,\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setVisible(!visible)\n          swal({\n            title: \"Wow!\",\n            text: data.message,\n            type: \"success\",\n            icon: \"success\"\n          }).then(function () {\n            getusertypelist(page, perPage);\n          });\n        }\n        else {\n          setVisible(!visible)\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\"\n          }).then(function () {\n            getusertypelist(page, perPage);\n          });\n        }\n      });\n  }\n\n\n  const addusertype = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const usertype = data.get('usertype');\n    const usertype_status = data.get('usertype_status');\n    await fetch('https://insuranceapi-3o5t.onrender.com/api/add_user_type', {\n      method: 'post',\n      body: JSON.stringify({ usertype: usertype }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setShowModal(false);\n          swal({\n            title: \"Wow!\",\n            text: data.message,\n            type: \"success\",\n            icon: \"success\"\n          }).then(function () {\n            getusertypelist(page, perPage);\n          });\n        }\n        else {\n          setShowModal(false);\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\"\n          }).then(function () {\n            getusertypelist(page, perPage);\n          });\n        }\n      });\n  }\n\n  const getdetails = async (ParamValue) => {\n    setId(ParamValue)\n    let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/get_user_type_detailsbyid', {\n      method: 'post',\n      body: JSON.stringify({ ParamValue }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n\n    result = await result.json();\n    setUsertype(result.data.usertype)\n    setUsertypestatus(result.data.usertype_status)\n    setVisibleedit(true);\n\n  }\n\n  const updateusertype = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const usertype = data.get('usertype');\n    const usertype_status = data.get('usertype_status');\n\n    await fetch('https://insuranceapi-3o5t.onrender.com/api/update_user_type_details', {\n      method: 'post',\n      body: JSON.stringify({ ParamValue: id, usertype: usertype }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status == 200) {\n          setVisibleedit(false)\n          swal({\n            title: \"Wow!\",\n            text: data.message,\n            type: \"success\",\n            icon: \"success\"\n          }).then(function () {\n            getusertypelist(page, perPage);\n          });\n        }\n        else {\n          setVisibleedit(false)\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            type: \"error\",\n            icon: \"error\"\n          }).then(function () {\n            getusertypelist(page, perPage);\n\n          });\n        }\n      });\n  }\n\n  const deleteItem = (id) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMasterData/?id=${id}&type=userType`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        if (data.status === 200) {\n          swal({\n            title: \"Success!\",\n            text: data.message,\n            icon: \"success\",\n            button: false,\n          })\n          getusertypelist(page, perPage);\n\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n        else {\n          swal({\n            title: \"Error!\",\n            text: data.message,\n            icon: \"error\",\n            button: false,\n          })\n          getusertypelist(page, perPage);\n\n          setTimeout(() => {\n            swal.close()\n          }, 1000);\n        }\n\n      })\n  }\n  const startFrom = (page - 1) * perPage;\n\n  return (\n    <>\n      <Container>\n        <div className=\"card mb-4\">\n          <div className=\"card-header\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <h4 className=\"card-title\">Usertype</h4>\n              </div>\n              <div className=\"col-md-6\">\n                {masterpermission.usertype?.includes('create') ?\n                  <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => setShowModal(true)}>Add Usertype</button>\n                  : ''}\n              </div>\n            </div>\n          </div>\n          <div className=\"card-header\" style={{ textAlign: 'right' }}>\n            {masterpermission.usertype?.includes('download') ?\n              <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={filePath} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n              : ''}\n            {masterpermission.usertype?.includes('upload') ?\n              <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n              : ''}\n            {masterpermission.usertype?.includes('export') ?\n              <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n              : ''}\n          </div>\n          <div className=\"card-body\">\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-dark\">\n                <tr className=\"table-info\">\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">User Type</th>\n                  <th scope=\"col\">Status</th>\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  data?.length > 0 ?\n                    data.map((item, index) =>\n                      <tr key={index}>\n                        <td>{startFrom + index + 1}</td>\n                        <td>{item.usertype}</td>\n                        <td>{item.usertype_status == 1 ? 'Active' : 'Inactive'}</td>\n                        <td>\n                          {masterpermission.usertype?.includes('edit') && (\n                            <button className=\"btn btn-primary\" onClick={() => getdetails(item._id)}>Edit</button>\n                          )}\n                          {' '}\n                          {masterpermission.usertype?.includes('delete') && (\n                            <>\n                              {\n                                item.usertype_status === 1 ?\n                                  <button className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                  <button className=\"btn btn-success\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                              }\n                              <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                            </>\n                          )}\n                        </td>\n                      </tr>\n                    ) : <tr>\n                      <td colSpan=\"6\">No Data Found</td>\n                    </tr>\n                }\n              </tbody>\n            </table>\n            <ReactPaginate\n              previousLabel={\"Previous\"}\n              nextLabel={\"Next\"}\n              breakLabel={\"...\"}\n              pageCount={pageCount}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={3}\n              onPageChange={handlePageClick}\n              containerClassName={\"pagination justify-content-end\"}\n              pageClassName={\"page-item\"}\n              pageLinkClassName={\"page-link\"}\n              previousClassName={\"page-item\"}\n              previousLinkClassName={\"page-link\"}\n              nextClassName={\"page-item\"}\n              nextLinkClassName={\"page-link\"}\n              breakClassName={\"page-item\"}\n              breakLinkClassName={\"page-link\"}\n              activeClassName={\"active\"}\n            />\n          </div>\n        </div>\n\n      </Container>\n      <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n        <CModalHeader onClose={() => setVisible(false)}>\n          <CModalTitle>Upload Excel File</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <div >\n            {/* <label className=\"form-label\"><strong>Upload Excel File</strong></label> */}\n            <input type=\"file\" className=\"form-control\" id=\"DHA\" defaultValue=\"\" required\n              onChange={(e) => setExcelfile(e.target.files[0])} />\n          </div>\n\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n            Close\n          </CButton>\n          <CButton color=\"primary\" onClick={collectExceldata} href={'/Viewtraveltype'}>Upload</CButton>\n        </CModalFooter>\n      </CModal>\n\n      <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Add User Type</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n\n                  <div className=\"card-body\">\n                    <form action=\"/\" method=\"POST\" onSubmit={addusertype}>\n                      <div className=\"row\">\n                        <div className=\"col-md-6\">\n\n                          <label className=\"form-label\"><strong>Add User Type</strong></label>\n                          <input type='text' className=\"form-control\"\n                            name='usertype'\n                            placeholder='Enter User Type'\n                            defaultValue=\"\"\n                            required\n                            autoComplete=\"off\"\n                          />\n                        </div>\n\n                        {/* <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Status</strong></label>.\n                          <select className=\"form-control\" name=\"usertype_status\" >\n                            <option value=\"\" hidden>Select Status</option>\n                            <option value=\"1\">Active</option>\n                            <option value=\"0\">InActive</option>\n                          </select>\n                        </div> */}\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal size='lg' show={visibleedit} onHide={() => setVisibleedit(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit User Type</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    <form action=\"/\" method=\"POST\" onSubmit={updateusertype}>\n                      <div className=\"row\">\n                        <div className=\"col-md-6\">\n                          <label className=\"form-label\"><strong>Edit user type</strong></label>\n                          <input type='text' className=\"form-control\"\n                            name='usertype'\n                            placeholder='Enter user type'\n                            defaultValue={usertype}\n                            autoComplete=\"off\"\n                            required\n                          />\n                        </div>\n                        {/* <div className=\"col-md-6\">\n\n                          <label className=\"form-label\"><strong>Status</strong></label>\n                          <select className=\"form-control\" name=\"usertype_status\" required>\n                            <option value=\"\">Select Status</option>\n                            <option value=\"1\" selected={usertype_status == 1 ? true : false}>Active</option>\n                            <option value=\"0\" selected={usertype_status == 0 ? true : false}>InActive</option>\n                          </select>\n                        </div> */}\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setVisibleedit(false)}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default ViewUsertype"],"names":["ViewUsertype","_masterpermission$use","_masterpermission$use2","_masterpermission$use3","_masterpermission$use4","navigate","useNavigate","data","setData","useState","perPage","pageCount","setPageCount","page","setPage","excelfile","setExcelfile","usertype","setUsertype","usertype_status","setUsertypestatus","id","setId","visible","setVisible","showModal","setShowModal","visibleedit","setVisibleedit","masterpermission","setMasterpermission","useEffect","token","localStorage","getItem","undefined","_userdata$master_perm","getusertypelist","userdata","JSON","parse","master_permission","fetch","method","headers","then","response","json","slice","total","pages","Math","ceil","list","error","console","log","updatestatus","async","result","body","stringify","swal","startFrom","_jsxs","_Fragment","children","_jsx","Container","className","includes","style","float","onClick","textAlign","backgroundColor","marginRight","href","filePath","download","exporttocsv","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","booktype","type","newdata","Blob","FileSaver","scope","length","map","item","index","_masterpermission$use5","_masterpermission$use6","ParamValue","getdetails","_id","window","confirm","status","title","text","message","icon","button","setTimeout","deleteItem","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","defaultValue","required","onChange","target","files","CModalFooter","CButton","color","preventDefault","fd","FormData","append","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","get","name","placeholder","autoComplete","Footer","Button","variant"],"sourceRoot":""}