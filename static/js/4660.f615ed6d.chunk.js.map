{"version":3,"file":"static/js/4660.f615ed6d.chunk.js","mappings":"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","sources":["views/Home/AdditionalConditions/ViewHomeAdditionalConditions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { Modal, Button } from 'react-bootstrap';\n// import filePath from '../../../../webroot/sample-files/Underwritiong_condition_sample.xlsx';\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport ReactPaginate from \"react-paginate\";\nimport swal from 'sweetalert';\nimport Multiselect from 'multiselect-react-dropdown';\n\nconst HomeAdditionalConditions = () => {\n    const navigate = useNavigate();\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            getAdditionalHomeConditions(page, perPage);\n            exportlistdata();\n            locationList();\n        }\n    }, []);\n\n    const [excelfile, setExcelfile] = useState(\"\");\n    const [perPage] = useState(10);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [HomeAdditionalConditions, setGeneralWritingConditions] = useState([]);\n    const [visible, setVisible] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [editshowModal, setEditShowModal] = useState(false);\n    const [UnderwringConditionId, setUderwritingConditionId] = useState('');\n    const [underwritingConditionValues, setUderwritingConditionValues] = useState({});\n    const [exportlist, setExportlist] = useState([]);\n    const [location, setLocation] = useState([]);\n    const [selectedOption, setSelectedOption] = useState([]);\n\n    const getAdditionalHomeConditions = async (page, perPage) => {\n        setGeneralWritingConditions([]);\n        const requestOptions =\n        {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/homeAdditionalConditions?page=${page}&limit=${perPage}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const total = data.total;\n                const slice = total / perPage;\n                const pages = Math.ceil(slice);\n                setPageCount(pages);\n                setGeneralWritingConditions(data.data);\n            });\n    }\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        getAdditionalHomeConditions(selectedPage + 1, perPage);\n    };\n\n    const updatestatus = async (id, status) => {\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/homeAdditionalCondition?id=${id}`, {\n            method: 'put',\n            body: JSON.stringify({ status }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        result = await result.json();\n        swal(\"Updated Succesfully\", \"\", \"success\");\n        getAdditionalHomeConditions(page, perPage)\n    }\n\n\n    const updateSubmit = (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        const condition = formData.get('underwriting_label');\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ condition, location: selectedOption }),\n\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/homeAdditionalCondition?id=${UnderwringConditionId}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setEditShowModal(false);\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getAdditionalHomeConditions(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }\n                        , 1000);\n                }\n                else {\n                    setEditShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getAdditionalHomeConditions(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n    const exportlistdata = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/get_Underwriting_condition', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setExportlist(data.data);\n            });\n    }\n    const fileType = 'xlsx'\n    const exporttocsv = () => {\n        const updatedData = exportlist.map((item, index) => {\n            return {\n\n                'Condition': item.condition,\n            }\n        })\n        const ws = XLSX.utils.json_to_sheet(updatedData);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n        const newdata = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(newdata, \"underwriting-conditions\" + \".xlsx\")\n    }\n\n    const collectExceldata = async (e) => {\n        e.preventDefault()\n        const fd = new FormData()\n        fd.append('file', excelfile)\n        let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_underwriting_condition_excel\",\n            {\n                method: \"POST\",\n                body: fd,\n            });\n        result = await result.json();\n        if (result.status == 200) {\n            setVisible(!visible)\n            swal({\n                text: result.message,\n                type: \"success\",\n                icon: \"success\",\n                button: false,\n            })\n            getAdditionalHomeConditions(page, perPage)\n\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n        else {\n            setVisible(!visible)\n            swal({\n                title: \"Error!\",\n                text: result.message,\n                type: \"error\",\n                icon: \"error\",\n                button: false,\n            })\n            getAdditionalHomeConditions(page, perPage)\n\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n    }\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const loc = locationdt?.map((val) => ({ value: val._id, label: val.location_name }));\n                setLocation(loc)\n                handleChange(loc);\n            });\n    }\n    const handleChange = (selectedOption) => {\n        setSelectedOption(selectedOption);\n    };\n    const detailsbyid = async (ParamValue) => {\n        setUderwritingConditionId(ParamValue)\n        const requestOptions = {\n            method: \"get\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/homeAdditionalCondition?id=${ParamValue}`, requestOptions);\n        result = await result.json();\n        console.log(result.data, \">>>>resultdata\")\n        setUderwritingConditionValues(result.data[0]);\n        const locations = result.data[0].location;\n        const loc = locations?.map((val) => ({ value: val._id, label: val.location_name }));\n        setSelectedOption(loc);\n        setEditShowModal(true);\n    };\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteHomeMaster/?id=${id}&type=HomeAdditionalCondition`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    getAdditionalHomeConditions(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    getAdditionalHomeConditions(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n\n            })\n    }\n\n    const AddUnderWriting = () => {\n        navigate(\"/AddHomeAdditionalConditions\")\n    }\n    const startFrom = (page - 1) * perPage;\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card \">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4 className=\"card-title\">Home Additional Conditions</h4>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddUnderWriting()}>Add Additional Home Conditions</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-header\" style={{ textAlign: 'right' }}>\n                            <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={'filePath'} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n                        </div>\n                        <div className=\"card-body\" style={{ overflow: \"scroll\" }}>\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th><strong>#</strong></th>\n                                        <th><strong>Condition</strong></th>\n                                        <th><strong>Location</strong></th>\n                                        <th><strong>Action</strong></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {HomeAdditionalConditions.length > 0 ?\n                                        HomeAdditionalConditions.map((item, index) =>\n                                            <tr key={index}>\n                                                <td>{startFrom + index + 1}</td>\n                                                <td style={{ textAlign: 'left' }}>{item.condition}</td>\n                                                <td>{item.location?.map((Val) => Val.location_name).join(\", \")}</td>\n                                                <td>\n                                                    <button className=\"btn btn-primary\" onClick={() => detailsbyid(item._id)}>Edit</button>&nbsp;&nbsp;\n                                                    {\n                                                        item.status === 1 ?\n                                                            <button className=\"btn btn-danger mr-5\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                                            <button className=\"btn btn-success mr-5\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                                                    }\n                                                    <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                                                </td>\n                                            </tr>\n                                        ) : <tr>\n                                            <td colSpan=\"4\">No Data Found</td>\n                                        </tr>\n                                    }\n                                </tbody>\n                            </table>\n                            <ReactPaginate\n                                previousLabel={\"Previous\"}\n                                nextLabel={\"Next\"}\n                                breakLabel={\"...\"}\n                                pageCount={pageCount}\n                                marginPagesDisplayed={2}\n                                pageRangeDisplayed={3}\n                                onPageChange={handlePageClick}\n                                containerClassName={\"pagination justify-content-end\"}\n                                pageClassName={\"page-item\"}\n                                pageLinkClassName={\"page-link\"}\n                                previousClassName={\"page-item\"}\n                                previousLinkClassName={\"page-link\"}\n                                nextClassName={\"page-item\"}\n                                nextLinkClassName={\"page-link\"}\n                                breakClassName={\"page-item\"}\n                                breakLinkClassName={\"page-link\"}\n                                activeClassName={\"active\"}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                    <CModalTitle>Upload Excel File</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div>\n                        <input type=\"file\" className=\"form-control\" onChange={(e) => setExcelfile(e.target.files[0])} required />\n                    </div>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setVisible(false)}>Close</CButton>\n                    <CButton color=\"primary\" onClick={collectExceldata}>Upload</CButton>\n                </CModalFooter>\n            </CModal>\n\n\n            <Modal size='lg' show={editshowModal} onHide={() => setEditShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Update General Writing Condition</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updateSubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Update General Writing Conditions</strong></label>\n                                                        <input type='text' className=\"form-control\" name='underwriting_label' placeholder='Enter Condition Label' defaultValue={underwritingConditionValues.condition} autoComplete='off' required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Select Location</strong></label>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={selectedOption}\n                                                            onSelect={handleChange}\n                                                            onRemove={handleChange}\n                                                            displayValue=\"label\"\n                                                            placeholder=\"Select Location\"\n                                                            closeOnSelect={false}\n                                                            avoidHighlightFirstOption={true}\n                                                            showCheckbox={true}\n                                                            style={{ chips: { background: \"#007bff\" } }}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary\" style={{ float: \"right\" }}>Update</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setEditShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n        </div>\n    )\n}\n\nexport default HomeAdditionalConditions\n"],"names":["HomeAdditionalConditions","navigate","useNavigate","useEffect","token","localStorage","getItem","undefined","getAdditionalHomeConditions","page","perPage","exportlistdata","locationList","excelfile","setExcelfile","useState","pageCount","setPageCount","setPage","setGeneralWritingConditions","visible","setVisible","showModal","setShowModal","editshowModal","setEditShowModal","UnderwringConditionId","setUderwritingConditionId","underwritingConditionValues","setUderwritingConditionValues","exportlist","setExportlist","location","setLocation","selectedOption","setSelectedOption","async","fetch","method","headers","then","response","json","data","slice","total","pages","Math","ceil","updatestatus","id","status","result","body","JSON","stringify","swal","locationdt","loc","map","val","value","_id","label","location_name","handleChange","startFrom","_jsxs","className","children","_jsx","style","float","onClick","textAlign","backgroundColor","marginRight","href","download","exporttocsv","updatedData","item","index","condition","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","booktype","type","newdata","Blob","FileSaver","overflow","length","_item$location","Val","join","ParamValue","console","log","locations","detailsbyid","window","confirm","title","text","message","icon","button","setTimeout","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","onChange","target","files","required","CModalFooter","CButton","color","preventDefault","fd","FormData","append","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","get","requestOptions","name","placeholder","defaultValue","autoComplete","Multiselect","options","selectedValues","onSelect","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","chips","background","Footer","Button","variant"],"sourceRoot":""}