{"version":3,"file":"static/js/8918.56514028.chunk.js","mappings":"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","sources":["views/motor-model/AddModelMotor.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport Multiselect from \"multiselect-react-dropdown\";\n\nconst AddModelMotor = () => {\n    const navigate = useNavigate();\n    const [make_motor, setMakeMotor] = useState([]);\n    const [location, setLocation] = useState([]);\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            getlistMakeMotor();\n            locationList();\n        }\n    }, [])\n\n    const getlistMakeMotor = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/getlistMakeMotor', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setMakeMotor(data.data);\n            });\n    }\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n\n                setLocation(locationdt);\n            });\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // const data = new FormData(e.target);\n        // const model_motor_name = data.get('model_motor_name');\n        // const make_motor = data.get('make_motor');\n        // const model_motor_status = data.get('status');\n        // const model_motor_location = selectedOption;\n        // const model_motor_location_len = model_motor_location.length;\n        // const model_motor_location_str = [];\n        // for(let i = 0; i < model_motor_location_len; i++)\n        // {\n        //     model_motor_location_str.push(model_motor_location[i].value);\n        // }\n\n        try {\n\n\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.motor_model_name.trim() === '' || !row.make_motor || row.location.length === 0;\n            });\n\n            if (hasEmptyFields) {\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return; // Exit the function if there are empty fields\n            }\n\n\n            // console.log(rowsData,\">>>>>>>>>>rowsData\")\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(rowsData)\n            };\n            fetch('https://insuranceapi-3o5t.onrender.com/api/addModelMotor', requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status == 200) {\n                        swal({\n                            text: data.message,\n                            type: \"success\",\n                            icon: \"success\",\n                            button: false\n                        })\n                        navigate('/motor-model')\n                        setTimeout(() => {\n                            swal.close()\n                        }, \"1000\");\n                    }\n                    else {\n                        swal({\n                            title: \"Error!\",\n                            text: data.message,\n                            type: \"error\",\n                            icon: \"error\",\n                            button: false\n                        })\n                        navigate('/motor-model/AddModelMotor')\n                        setTimeout(() => {\n                            swal.close()\n                        }, \"1000\");\n                    }\n                });\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            motor_model_name: '',\n            make_motor: '',\n            location: location,\n\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <h4 className=\"card-title\">Add Model Motor</h4>\n                                </div>\n                            </div>\n                            <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                                <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                    <thead>\n                                        <tr>\n                                            <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                            <th>Model Motor Name</th>\n                                            <th>Make Motor</th>\n                                            <th>Make Motor Location</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            rowsData.map((data, index) => {\n                                                return (\n                                                    <tr key={index} >\n                                                        <td>\n                                                            <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                        </td>\n                                                        <td>\n                                                            <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"motor_model_name\" placeholder=\"Model Motor Name\" autoComplete=\"off\" required />\n\n                                                        </td>\n                                                        <td>\n                                                            <select className=\"form-control\" onChange={(evnt) => (handleChange(index, evnt))} name=\"make_motor\" required>\n                                                                <option value=\"\">Select Make Motor</option>\n                                                                {make_motor.map((item, index) => (\n                                                                    <option key={index} value={item._id}>{item.make_motor_name}</option>\n                                                                ))}\n                                                            </select>\n                                                        </td>\n                                                        <td>\n                                                            <Multiselect\n                                                                style={{ overflow: 'visible' }}\n                                                                options={location}\n                                                                selectedValues={location}\n                                                                displayValue=\"location_name\"\n                                                                onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                                placeholder=\"Select Location\"\n                                                                showCheckbox={true}\n                                                                required\n                                                            />\n                                                        </td>\n\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddModelMotor\n"],"names":["AddModelMotor","navigate","useNavigate","make_motor","setMakeMotor","useState","location","setLocation","rowsData","setRowsData","errors","setErrors","useEffect","token","localStorage","getItem","undefined","getlistMakeMotor","locationList","fetch","method","headers","then","response","json","data","locationdt","handleChange","index","evnt","name","value","target","trim","prevErrors","rowsInput","handleChange1","title","_jsx","className","children","_jsxs","style","overflowX","width","onClick","addTableRows","motor_model_name","map","rows","splice","deleteTableRows","type","onChange","placeholder","autoComplete","required","item","_id","make_motor_name","Multiselect","overflow","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","e","preventDefault","some","row","length","swal","text","icon","requestOptions","body","JSON","stringify","status","message","button","setTimeout","error","console","log"],"sourceRoot":""}