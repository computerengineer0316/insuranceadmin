{"version":3,"file":"static/js/8757.edbdb4ec.chunk.js","mappings":"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","sources":["views/Yacht/yacht_horsepower_list/Addyachthorsepowerlist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { Container, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Multiselect from 'multiselect-react-dropdown';\n\nconst Addyachthorsepowerlist = () => {\n\n    const navigate = useNavigate();\n    const [location, setLocation] = useState([]);\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [rowsData, setRowsData] = useState([])\n    const [errors, setErrors] = useState({});\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            locationList();\n        }\n    }, []);\n\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n\n                setLocation(locationdt.map((val) => ({ label: val.location_name, value: val._id })));\n            });\n    }\n\n\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(rowsData, \"rowsData\")\n        try {\n            const hasEmptyFields = rowsData.some((row) => {\n                return row.yacht_horsepower_type.trim() === '' || row.location == 0;\n            });\n\n            if (hasEmptyFields) {\n                // Display an error message or handle the validation error as needed\n                swal({\n                    title: \"Warning!\",\n                    text: \"Please fill in all fields for each row.\",\n                    type: \"warning\",\n                    icon: \"warning\"\n                });\n                return false; // Exit the function if there are empty fields\n            }\n            else {\n\n                const requestOptions = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(rowsData)\n                };\n\n                fetch(`https://insuranceapi-3o5t.onrender.com/api/add_Yacht_horespower_type`, requestOptions)\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.status == 200) {\n                            swal({\n                                text: data.message,\n                                type: \"success\",\n                                icon: \"success\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                                navigate('/Viewyachthorsepowerlist')\n                            }, 1000);\n\n                        }\n\n                        else if (data.status != 200) {\n                            swal({\n                                title: \"Error!\",\n                                text: data.message,\n                                type: \"error\",\n                                icon: \"error\",\n                                button: false\n                            })\n                            setTimeout(() => {\n                                swal.close()\n                                // navigate('/motor-make')\n                            }, 1000);\n                        }\n                    });\n            }\n\n        }\n        catch (err) {\n            console.log(err)\n        }\n\n    }\n    const addTableRows = () => {\n        const rowsInput =\n        {\n            yacht_horsepower_type: '',\n            location: location,\n\n        }\n        setRowsData([...rowsData, rowsInput])\n    }\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData]\n        rows.splice(index, 1)\n        setRowsData(rows)\n    }\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n\n        if (value.trim() === '') {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: 'This is required',\n            }));\n        } else {\n            setErrors((prevErrors) => ({\n                ...prevErrors,\n                [name]: '', // Clear the error message if the value is not empty\n            }));\n        }\n        const rowsInput = [...rowsData]\n        rowsInput[index][name] = value\n        setRowsData(rowsInput)\n    }\n    const handleChange1 = (index, value, title) => {\n        console.log(value, \"multiselect value\")\n        const rowsInput = [...rowsData];\n        rowsInput[index][title] = value;\n        setRowsData(rowsInput)\n    }\n\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\" >\n                <div className=\"col-md-12\" >\n                    <div className=\"card\" >\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <h4 className=\"card-title\">Add Yacht Horse Power </h4>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body addmotorplans\" style={{ overflowX: 'scroll' }}>\n                            <table className=\"table table-bordered\" style={{ width: \"auto\" }}>\n                                <thead>\n                                    <tr>\n                                        <th><button className=\"btn btn-outline-success\" onClick={addTableRows}>+</button></th>\n                                        <th>Yacht Horse Power</th>\n                                        <th>Location</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        rowsData.map((data, index) => {\n                                            return (\n                                                <tr key={index} >\n                                                    <td>\n                                                        <button className=\"btn btn-outline-danger\" onClick={() => (deleteTableRows(index))}>x</button>\n                                                    </td>\n                                                    <td>\n                                                        <input type=\"text\" onChange={(evnt) => (handleChange(index, evnt))} className=\"form-control\" name=\"yacht_horsepower_type\" placeholder=\"Yacht Horse Power\" autoComplete=\"off\" required />\n\n                                                    </td>\n\n                                                    <td>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={location}\n                                                            displayValue=\"label\"\n                                                            onSelect={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                            onRemove={(evnt) => (handleChange1(index, evnt, 'location'))}\n                                                            placeholder=\"Select Location\"\n                                                            showCheckbox={true}\n                                                            closeOnSelect={false}\n                                                            required\n                                                        />\n                                                    </td>\n\n\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"card-footer\">\n                            <button className=\"btn btn-outline-success\" onClick={handleSubmit}>Submit</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Addyachthorsepowerlist"],"names":["Addyachthorsepowerlist","navigate","useNavigate","location","setLocation","useState","selectedOption","setSelectedOption","rowsData","setRowsData","errors","setErrors","useEffect","token","localStorage","getItem","undefined","locationList","fetch","method","headers","then","response","json","data","locationdt","map","val","label","location_name","value","_id","handleChange1","index","title","console","log","rowsInput","_jsx","className","children","_jsxs","style","overflowX","width","onClick","addTableRows","yacht_horsepower_type","rows","splice","deleteTableRows","type","onChange","evnt","handleChange","name","target","trim","prevErrors","placeholder","autoComplete","required","Multiselect","options","selectedValues","displayValue","onSelect","onRemove","showCheckbox","closeOnSelect","e","preventDefault","some","row","swal","text","icon","requestOptions","body","JSON","stringify","status","message","button","setTimeout","err"],"sourceRoot":""}