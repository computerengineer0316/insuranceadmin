{"version":3,"file":"static/js/2676.ebbf6cea.chunk.js","mappings":"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","sources":["views/sales_advisor/dashboard/SaToplegend.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Row, Col, Modal, Button } from 'react-bootstrap';\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport { CWidgetStatsC } from '@coreui/react';\nimport { CCol } from '@coreui/react';\nimport PropTypes from 'prop-types';\n\n\nSaToplegend.propTypes =\n{\n    filterOptions: PropTypes.shape({\n        location: PropTypes.string,\n        lob: PropTypes.string,\n        businessType: PropTypes.string,\n        agent: PropTypes.string,\n        dateRange: PropTypes\n    })\n};\n\nSaToplegend.propTypes = {\n    defaultOptions: PropTypes.shape({\n        defaultlocation: PropTypes.string,\n        defaultlob: PropTypes.string,\n        defaultbusinessType: PropTypes.string,\n        defaultagent: PropTypes.string,\n        defaultdateRange: PropTypes,\n        startdate: PropTypes,\n        enddate: PropTypes,\n        userType: PropTypes\n    })\n};\n\n\nfunction SaToplegend({ filterOptions, defaultOptions }) {\n\n    const navigate = useNavigate();\n    const responsive = {\n        superLargeDesktop: {\n            // the naming can be any, depends on you.\n            breakpoint: { max: 4000, min: 3000 },\n            items: 6\n        },\n        desktop: {\n            breakpoint: { max: 3000, min: 1024 },\n            items: 6\n        },\n        tablet: {\n            breakpoint: { max: 1024, min: 464 },\n            items: 2\n        },\n        mobile: {\n            breakpoint: { max: 464, min: 0 },\n            items: 1\n        }\n    };\n\n    const [totalcount, setTotalcount] = useState(0);\n    const [closeLeadCount, setCloseLeadCount] = useState(0);\n    const [totalPremiumEarned, setTotalPremiumEarned] = useState(0);\n    const [pending, setPending] = useState(0);\n    const [lost, setLost] = useState(0);\n\n\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            getTotalCount();\n        }\n    }, [filterOptions]);\n\n\n    const getTotalCount = async () => {\n\n        const userdata = JSON.parse(localStorage.getItem('user'));\n        let newlocation = filterOptions.location;\n        let newlob = filterOptions.lob;\n        let newbusinessType = filterOptions.businessType;\n        let newagent = filterOptions.agent;\n        let dateRange = filterOptions.dateRange;\n        let startdate = defaultOptions.startdate;\n        let enddate = defaultOptions.enddate;\n        let assign_staff = userdata.assign_staff;\n        let usertype = defaultOptions.userType\n\n        if (newlocation == null || newlocation == undefined || !Array.isArray(newlocation) || newlocation.length === 0) {\n            newlocation = defaultOptions.defaultlocation.map((item) => item.value);\n            // newlocation = [];\n        }\n        else {\n            newlocation = newlocation.map((item) => item.value);\n        }\n\n        if (newlob == null || newlob == undefined || !Array.isArray(newlob) || newlob.length === 0) {\n            newlob = defaultOptions.defaultlob.map((item) => item.value);\n            // newlob = [];\n        }\n        else {\n            newlob = newlob.map((item) => item.value);\n        }\n\n        if (newbusinessType == null || newbusinessType == undefined || !Array.isArray(newbusinessType) || newbusinessType.length === 0) {\n            newbusinessType = defaultOptions.defaultbusinessType.map((item) => item.value);\n            // newbusinessType = [];\n\n        }\n        else {\n            newbusinessType = newbusinessType.map((item) => item.value);\n        }\n        if (newagent == null || newagent == undefined || !Array.isArray(newagent) || newagent.length === 0) {\n            newagent = defaultOptions.defaultagent.map((item) => item.value);\n        }\n        else {\n            newagent = newagent.map((item) => item.value);\n        }\n\n        const token = localStorage.getItem('token');\n        const loginuser = JSON.parse(localStorage.getItem('user'));\n        const loginusertype = loginuser.usertype;\n        console.log(\"loginusertype\", loginusertype);\n\n        const requestOptions = {\n            method: 'POST',\n            body: JSON.stringify({\n                location: newlocation,\n                lob: newlob,\n                business_type: newbusinessType,\n                newagent: newagent,\n                dateRange: dateRange,\n                startdate: startdate,\n                enddate: enddate,\n                assign_staff: assign_staff,\n                userType: usertype\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        };\n\n\n        if (loginusertype == \"646224eab201a6f07b2dff36\") {\n            await fetch(`https://insuranceapi-3o5t.onrender.com/api/topLeagentCount`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    console.log(\"data\", data.data);\n                    setTotalcount(data.data.totalCount)\n                    setCloseLeadCount(data.data.closeLeadCount)\n                    setTotalPremiumEarned(data.data.totalPremiumEarned)\n                    setLost(data.data.lostCount)\n                    setPending(data.data.saleAdvisorPendingCount)\n\n                })\n                .catch((error) => {\n                    console.log(error)\n                })\n\n\n        }\n        if (loginusertype == \"64622470b201a6f07b2dff22\") {\n            await fetch(`https://insuranceapi-3o5t.onrender.com/api/topLeagentCount?dashboardType=salesAdvisorDashboard`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    console.log(\"data\", data.data);\n                    setTotalcount(data.data.totalCount)\n                    setCloseLeadCount(data.data.closeLeadCount)\n                    setTotalPremiumEarned(data.data.totalPremiumEarned)\n                    setLost(data.data.lostCount)\n                    setPending(data.data.saleAdvisorPendingCount)\n                }\n                )\n                .catch((error) => {\n                    console.log(error)\n                }\n                )\n\n        }\n    }\n\n    console.log(\"totalcount\", totalcount);\n    console.log(\"closeLeadCount\", closeLeadCount);\n    console.log(\"totalPremiumEarned\", totalPremiumEarned);\n    console.log(\"lost\", lost);\n    console.log(\"pending\", pending);\n\n\n    function formatAmount(amount) {\n        if (amount !== null) {\n            const numericValue = parseFloat(amount.toString().replace(/,/g, ''));\n            if (!isNaN(numericValue)) {\n                // Use toLocaleString with custom options for grouping\n                return numericValue.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 2, useGrouping: true });\n            }\n            return ''; // Return an empty string if the input is not a valid number\n        }\n    }\n\n\n\n\n\n    return (\n        <div>\n            <Carousel className='carousel_abcds' margin={30} swipeable={false}\n                draggable={true}\n                showDots={true}\n                responsive={responsive}\n            >\n                {/* <CRow className='custom_abcd'> */}\n                <CCol xs={2} class='item'>\n                    <CWidgetStatsC\n                        className=\"mb-3\"\n                        progress={{ color: 'primary', value: 100 }}\n                        text=\"Widget helper text\"\n                        title=\"Assigned Leads\"\n                        value={totalcount != null ? totalcount.toString() : \"0\"}\n                    />\n                </CCol>\n                <CCol xs={2} class='item'>\n                    <CWidgetStatsC\n                        className=\"mb-3\"\n                        progress={{ color: 'danger', value: 100 }}\n                        text=\"Widget helper text\"\n                        title=\"Closed\"\n                        value={closeLeadCount != null ? closeLeadCount.toString() : \"0\"}\n                    />\n                </CCol>\n                <CCol xs={2} class='item' >\n                    <CWidgetStatsC\n                        className=\"mb-3\"\n                        progress={{ color: 'primary', value: 100 }}\n                        text=\"Widget helper text\"\n                        title=\"Premium earned\"\n                        value={formatAmount(totalPremiumEarned != null ? totalPremiumEarned : \"0\")}\n                    />\n                </CCol>\n\n                <CCol xs={2} class='item'>\n                    <CWidgetStatsC\n                        className=\"mb-3\"\n                        progress={{ color: 'primary', value: 100 }}\n                        text=\"Widget helper text\"\n                        title=\"Pending\"\n                        value={pending != null ? pending.toString() : \"0\"}\n                    />\n                </CCol>\n                <CCol xs={2} class='item'>\n                    <CWidgetStatsC\n                        width={36}\n                        className=\"mb-3\"\n                        progress={{ color: 'danger', value: 100 }}\n                        text=\"Widget helper text\"\n                        title=\"Lost\"\n                        value={lost != null ? lost.toString() : \"0\"}\n                    />\n                </CCol>\n\n                {/* </CRow> */}\n            </Carousel>\n\n        </div>\n    )\n}\n\nexport default SaToplegend"],"names":["_ref","filterOptions","defaultOptions","navigate","useNavigate","totalcount","setTotalcount","useState","closeLeadCount","setCloseLeadCount","totalPremiumEarned","setTotalPremiumEarned","pending","setPending","lost","setLost","useEffect","token","localStorage","getItem","undefined","getTotalCount","async","userdata","JSON","parse","newlocation","location","newlob","lob","newbusinessType","businessType","newagent","agent","dateRange","startdate","enddate","assign_staff","usertype","userType","Array","isArray","length","map","item","value","defaultlocation","defaultlob","defaultbusinessType","defaultagent","loginusertype","console","log","requestOptions","method","body","stringify","business_type","headers","fetch","then","response","json","data","totalCount","lostCount","saleAdvisorPendingCount","catch","error","_jsx","children","_jsxs","Carousel","className","margin","swipeable","draggable","showDots","responsive","superLargeDesktop","breakpoint","max","min","items","desktop","tablet","mobile","CCol","xs","class","CWidgetStatsC","progress","color","text","title","toString","amount","numericValue","parseFloat","replace","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","useGrouping","formatAmount","width"],"sourceRoot":""}