{"version":3,"file":"static/js/5070.b880918e.chunk.js","mappings":"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","sources":["views/Medical/MedicalPlan/UderwritingConditions/UnderwritingConditions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { Modal, Button } from 'react-bootstrap';\nimport filePath from '../../../../webroot/sample-files/Underwritiong_condition_sample.xlsx';\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport ReactPaginate from \"react-paginate\";\nimport swal from 'sweetalert';\nimport Multiselect from 'multiselect-react-dropdown';\nconst UnderwrintingConditions = () => {\n    const navigate = useNavigate();\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            geTableBenefits(page, perPage);\n            exportlistdata();\n            locationList();\n        }\n    }, []);\n\n    const [excelfile, setExcelfile] = useState(\"\");\n    const [perPage] = useState(10);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [uderwritingConditions, setUnderwritingConditions] = useState([]);\n    const [visible, setVisible] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [editshowModal, setEditShowModal] = useState(false);\n    const [UnderwringConditionId, setUderwritingConditionId] = useState('');\n    const [underwritingConditionValues, setUderwritingConditionValues] = useState({});\n    const [location, setLocation] = useState([]);\n    const [selectedLocation, setDefaultLocation] = useState([]);\n    const locationList = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/get_location`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const locationdt = data.data;\n                const location_len = locationdt.length;\n                const location_list = [];\n                for (let i = 0; i < location_len; i++) {\n                    const location_obj = { label: locationdt[i].location_name, value: locationdt[i]._id };\n                    location_list.push(location_obj);\n                }\n\n                setLocation(location_list);\n            });\n    }\n    const geTableBenefits = async (page, perPage) => {\n        setUnderwritingConditions([]);\n        const requestOptions =\n        {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_Underwriting_condition?page=${page}&limit=${perPage}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data, \"data\")\n                const total = data.total;\n                const slice = total / perPage;\n                const pages = Math.ceil(slice);\n                setPageCount(pages);\n                setUnderwritingConditions(data.data);\n            });\n    }\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        geTableBenefits(selectedPage + 1, perPage);\n    };\n\n    const updatestatus = async (id, status) => {\n        let result = await fetch('https://insuranceapi-3o5t.onrender.com/api/update_Underwriting_condition_status', {\n            method: 'post',\n            body: JSON.stringify({ id, status }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        result = await result.json();\n        swal(\"Updated Succesfully\", \"\", \"success\");\n        geTableBenefits(page, perPage)\n    }\n\n    const AddUnderwritingCondition = async (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        const underwriting_label = formData.get('underwriting_label');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ underwriting_label, location: selectedLocation }),\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/add_Underwriting_condition`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setShowModal(false);\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        type: \"success\",\n                        icon: \"success\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    setShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        type: \"error\",\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n\n    const updateSubmit = (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        const underwriting_label = formData.get('underwriting_label');\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ underwriting_label, UnderwringConditionId, location: selectedLocation }),\n\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/update_Underwriting_condition`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    setEditShowModal(false);\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false\n                    })\n                    setTimeout(() => {\n                        swal.close()\n                        geTableBenefits(page, perPage);\n\n                    }, 1000);\n                }\n                else {\n                    setEditShowModal(false);\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n            });\n    }\n    const [exportlist, setExportlist] = useState([]);\n    const exportlistdata = () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch('https://insuranceapi-3o5t.onrender.com/api/get_Underwriting_condition', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                setExportlist(data.data);\n            });\n    }\n    const fileType = 'xlsx'\n    const exporttocsv = () => {\n        const updatedData = exportlist.map((item, index) => {\n            return {\n\n                'Condition': item.condition,\n            }\n        })\n        const ws = XLSX.utils.json_to_sheet(updatedData);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { booktype: \"xlsx\", type: \"array\" });\n        const newdata = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(newdata, \"underwriting-conditions\" + \".xlsx\")\n    }\n\n    const collectExceldata = async (e) => {\n        e.preventDefault()\n        const fd = new FormData()\n        fd.append('file', excelfile)\n        let result = await fetch(\"https://insuranceapi-3o5t.onrender.com/api/read_underwriting_condition_excel\",\n            {\n                method: \"POST\",\n                body: fd,\n            });\n        result = await result.json();\n        if (result.status == 200) {\n            setVisible(!visible)\n            swal({\n                text: result.message,\n                type: \"success\",\n                icon: \"success\",\n                button: false,\n            })\n            geTableBenefits(page, perPage)\n\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n        else {\n            setVisible(!visible)\n            swal({\n                title: \"Error!\",\n                text: result.message,\n                type: \"error\",\n                icon: \"error\",\n                button: false,\n            })\n            geTableBenefits(page, perPage)\n\n            setTimeout(() => {\n                swal.close()\n            }, 1000);\n        }\n    }\n\n    const detailsbyid = async (ParamValue) => {\n        setUderwritingConditionId(ParamValue)\n        const requestOptions = {\n            method: \"post\",\n            body: JSON.stringify({ ParamValue }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        let result = await fetch(`https://insuranceapi-3o5t.onrender.com/api/get_Underwriting_conditionbyid`, requestOptions);\n        result = await result.json();\n        setUderwritingConditionValues(result.data[0]);\n        const locs = result.data[0]?.location;\n        const locs_len = locs?.length;\n        const locs_list = [];\n        for (let i = 0; i < locs_len; i++) {\n            const locs_obj = { label: locs[i].location_name, value: locs[i]._id };\n            locs_list.push(locs_obj);\n        }\n        setDefaultLocation(locs_list);\n\n\n        setEditShowModal(true);\n    };\n    const deleteItem = (id) => {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`https://insuranceapi-3o5t.onrender.com/api/deleteMedicalMaster/?id=${id}&type=underwritingConditions`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 200) {\n                    swal({\n                        title: \"Success!\",\n                        text: data.message,\n                        icon: \"success\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n                else {\n                    swal({\n                        title: \"Error!\",\n                        text: data.message,\n                        icon: \"error\",\n                        button: false,\n                    })\n                    geTableBenefits(page, perPage);\n                    setTimeout(() => {\n                        swal.close()\n                    }, 1000);\n                }\n\n            })\n    }\n\n    const AddUnderWriting = () => {\n        navigate(\"/AddUnderwritingConditions\")\n    }\n    const startFrom = (page - 1) * perPage;\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"card \">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4 className=\"card-title\">Underwriting Conditions</h4>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <button className='btn btn-primary' style={{ float: \"right\" }} onClick={() => AddUnderWriting()}>Add Underwriting Conditions</button>\n                                </div>\n                            </div>\n                        </div>\n                        {/* <div className=\"card-header\" style={{ textAlign: 'right' }}>\n                            <a className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} href={filePath} download><i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i> Download Sample File</a>\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\", marginRight: '15px' }} onClick={() => setVisible(!visible)}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Upload Excel</button>\n                            <button className=\"btn btn-dark btn-sm btn-icon-text m-r-10\" style={{ backgroundColor: \"green\" }} onClick={exporttocsv}><i className=\"fa fa-file-excel\" aria-hidden=\"true\"></i> Export Data to excel</button>\n                        </div> */}\n                        <div className=\"card-body\" style={{ overflow: 'scroll' }}>\n                            <table className=\"table table-bordered\" >\n                                <thead>\n                                    <tr>\n                                        <th><strong>#</strong></th>\n                                        <th><strong>Condition</strong></th>\n                                        <th><strong>Location</strong></th>\n                                        <th><strong>Action</strong></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {uderwritingConditions.length > 0 ?\n                                        uderwritingConditions.map((item, index) =>\n                                            <tr key={index}>\n                                                <td>{startFrom + index + 1}</td>\n                                                <td>{item.condition}</td>\n                                                <td>{item.location?.map((Val) => Val.location_name)?.join(\", \")}</td>\n                                                <td>\n                                                    <button className=\"btn btn-primary\" onClick={() => detailsbyid(item._id)}>Edit</button>&nbsp;&nbsp;\n                                                    {\n                                                        item.status === 1 ?\n                                                            <button className=\"btn btn-danger mr-5\" onClick={() => { if (window.confirm('Are you sure you wish to deactivate this item?')) updatestatus(item._id, 0) }}>Deactivate</button> :\n                                                            <button className=\"btn btn-success mr-5\" onClick={() => { if (window.confirm('Are you sure you wish to activate this item?')) updatestatus(item._id, 1) }}>Activate</button>\n                                                    }\n                                                    <button className=\"btn btn-warning mx-1\" onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(item._id) }}>Delete</button>\n                                                </td>\n                                            </tr>\n                                        ) : <tr>\n                                            <td colSpan=\"4\">No Data Found</td>\n                                        </tr>\n                                    }\n                                </tbody>\n                            </table>\n                            <ReactPaginate\n                                previousLabel={\"Previous\"}\n                                nextLabel={\"Next\"}\n                                breakLabel={\"...\"}\n                                pageCount={pageCount}\n                                marginPagesDisplayed={2}\n                                pageRangeDisplayed={3}\n                                onPageChange={handlePageClick}\n                                containerClassName={\"pagination justify-content-end\"}\n                                pageClassName={\"page-item\"}\n                                pageLinkClassName={\"page-link\"}\n                                previousClassName={\"page-item\"}\n                                previousLinkClassName={\"page-link\"}\n                                nextClassName={\"page-item\"}\n                                nextLinkClassName={\"page-link\"}\n                                breakClassName={\"page-item\"}\n                                breakLinkClassName={\"page-link\"}\n                                activeClassName={\"active\"}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                    <CModalTitle>Upload Excel File</CModalTitle>\n                </CModalHeader>\n                <CModalBody>\n                    <div>\n                        <input type=\"file\" className=\"form-control\" onChange={(e) => setExcelfile(e.target.files[0])} required />\n                    </div>\n                </CModalBody>\n                <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setVisible(false)}>Close</CButton>\n                    <CButton color=\"primary\" onClick={collectExceldata}>Upload</CButton>\n                </CModalFooter>\n            </CModal>\n\n            <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Underwring Condition</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={AddUnderwritingCondition}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Underwriting Conditions</strong></label>\n                                                        <input type='text' className=\"form-control\" name='underwriting_label' placeholder=\"Enter Underwriting Condition Feature\" autoComplete='off' required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group\">\n                                                        <label>Location</label>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={selectedLocation}\n                                                            onSelect={(evnt) => (setDefaultLocation(evnt))}\n                                                            onRemove={(evnt) => (setDefaultLocation(evnt))}\n                                                            displayValue=\"label\"\n                                                            placeholder=\"Select Location\"\n                                                            closeOnSelect={false}\n                                                            avoidHighlightFirstOption={true}\n                                                            showCheckbox={true}\n                                                            style={{ chips: { background: \"#007bff\" } }}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal size='lg' show={editshowModal} onHide={() => setEditShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Update Underwriting Condition</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form action=\"/\" method=\"POST\" onSubmit={updateSubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group mb-3\">\n                                                        <label className=\"form-label\"><strong>Update Underwriting Conditions</strong></label>\n                                                        <input type='text' className=\"form-control\" name='underwriting_label' placeholder='Enter Condition Label' defaultValue={underwritingConditionValues.condition} autoComplete='off' required />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <div className=\"form-group\">\n                                                        <label>Location</label>\n                                                        <Multiselect\n                                                            options={location}\n                                                            selectedValues={selectedLocation}\n                                                            onSelect={(evnt) => (setDefaultLocation(evnt))}\n                                                            onRemove={(evnt) => (setDefaultLocation(evnt))}\n                                                            displayValue=\"label\"\n                                                            placeholder=\"Select Location\"\n                                                            closeOnSelect={false}\n                                                            avoidHighlightFirstOption={true}\n                                                            showCheckbox={true}\n                                                            style={{ chips: { background: \"#007bff\" } }}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary submit_all\" style={{ float: \"right\" }}>Update</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setEditShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n        </div>\n    )\n}\n\nexport default UnderwrintingConditions\n"],"names":["UnderwrintingConditions","navigate","useNavigate","useEffect","token","localStorage","getItem","undefined","geTableBenefits","page","perPage","exportlistdata","locationList","excelfile","setExcelfile","useState","pageCount","setPageCount","setPage","uderwritingConditions","setUnderwritingConditions","visible","setVisible","showModal","setShowModal","editshowModal","setEditShowModal","UnderwringConditionId","setUderwritingConditionId","underwritingConditionValues","setUderwritingConditionValues","location","setLocation","selectedLocation","setDefaultLocation","fetch","method","headers","then","response","json","data","locationdt","location_len","length","location_list","i","location_obj","label","location_name","value","_id","push","async","console","log","slice","total","pages","Math","ceil","updatestatus","id","status","result","body","JSON","stringify","swal","exportlist","setExportlist","startFrom","_jsxs","className","children","_jsx","style","float","onClick","overflow","map","item","index","_item$location","_item$location$map","condition","Val","join","_result$data$","ParamValue","requestOptions","locs","locs_len","locs_list","locs_obj","detailsbyid","window","confirm","title","text","message","icon","button","setTimeout","colSpan","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selectedPage","selected","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","type","onChange","target","files","required","CModalFooter","CButton","color","preventDefault","fd","FormData","append","Modal","size","show","onHide","Header","closeButton","Title","Body","action","onSubmit","underwriting_label","get","name","placeholder","autoComplete","Multiselect","options","selectedValues","onSelect","evnt","onRemove","displayValue","closeOnSelect","avoidHighlightFirstOption","showCheckbox","chips","background","Footer","Button","variant","defaultValue"],"sourceRoot":""}