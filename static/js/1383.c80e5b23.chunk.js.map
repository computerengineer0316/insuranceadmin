{"version":3,"file":"static/js/1383.c80e5b23.chunk.js","mappings":"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","sources":["views/producer/ProducerGenerateLink.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactPaginate from \"react-paginate\";\nimport { useNavigate } from 'react-router-dom'\nimport { Container, Row, Modal, Button, Accordion, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { ClipLoader } from 'react-spinners';\nimport Multiselect from 'multiselect-react-dropdown';\n\n\n\nProducerGenerateLink.propTypes =\n{\n    filterOptions: PropTypes.shape({\n        location: PropTypes.string,\n        lob: PropTypes.string,\n        businessType: PropTypes.string,\n        agent: PropTypes.string,\n        dateRange: PropTypes\n\n    })\n};\n\nProducerGenerateLink.propTypes = {\n    defaultOptions: PropTypes.shape({\n        defaultlocation: PropTypes.string,\n        defaultlob: PropTypes.string,\n        defaultbusinessType: PropTypes.string,\n        defaultagent: PropTypes.string,\n        defaultdateRange: PropTypes,\n        startdate: PropTypes,\n        enddate: PropTypes,\n\n    })\n};\n\n\n\nProducerGenerateLink.propTypes = {\n    updateSharedData: PropTypes.func.isRequired,\n};\n\nfunction ProducerGenerateLink({ filterOptions, defaultOptions, updateSharedData }) {\n\n    const token = localStorage.getItem('token');\n    const [url, setUrl] = useState(''); // State to store the generated URL\n    const [userurl, setUserurl] = useState(''); // State to store the generated URL\n    const [copied, setCopied] = useState(false);\n    const [whatsappnumber, setWhatsappnumber] = useState(''); // State to store the generated URL\n    const [email, setEmail] = useState(''); // State to store the generated URL\n\n\n    const navigate = useNavigate();\n    const [newleaddata, setNewleadData] = useState([]);\n    const [leadstatus, setLeadStatus] = useState([]);\n    const [leaddetails, setLeadDetails] = useState([]);\n    const [line_of_business_name, setLineOfBusinessName] = useState([]);\n    const [perPage] = useState(10);\n    const [pageCount, setPageCount] = useState(0);\n    const [page, setPage] = useState(1);\n    const [showModal, setShowModal] = useState(false);\n    const [id, setId] = useState('');\n    const [lead_status, set_Lead_Status] = useState({});\n    const [direct_payment, set_Direct_Payment] = useState({});\n    const [dclist, setDcList] = useState([]);\n    const [assigndc, setAssignDc] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [lob, setLob] = useState([]);\n\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token === null || token === undefined || token === '') {\n            navigate('/login')\n        }\n        else {\n            getlist(page, perPage);\n            getsalists();\n        }\n    }, [filterOptions]);\n\n    useEffect(() => {\n        lobList();\n    }\n        , []);\n\n    const getlist = async (page, perPage) => {\n        try {\n            setLoading(true);\n            let newlocation = filterOptions.location\n            let newlob = filterOptions.lob\n            let newbusinessType = filterOptions.businessType\n            let newagent = filterOptions.agent\n            let dateRange = filterOptions.dateRange\n            let startdate = defaultOptions.startdate\n            let enddate = defaultOptions.enddate\n\n\n            if (newlocation == null || newlocation == undefined || !Array.isArray(newlocation) || newlocation.length === 0) {\n                newlocation = defaultOptions.defaultlocation.map((item) => item.value);\n                // newlocation = [];\n            }\n            else {\n                newlocation = newlocation.map((item) => item.value);\n            }\n\n            if (newlob == null || newlob == undefined || !Array.isArray(newlob) || newlob.length === 0) {\n                newlob = defaultOptions.defaultlob.map((item) => item.value);\n                // newlob = [];\n            }\n            else {\n                newlob = newlob.map((item) => item.value);\n            }\n\n            if (newbusinessType == null || newbusinessType == undefined || !Array.isArray(newbusinessType) || newbusinessType.length === 0) {\n                newbusinessType = defaultOptions.defaultbusinessType.map((item) => item.value);\n                // newbusinessType = [];\n\n            }\n            else {\n                newbusinessType = newbusinessType.map((item) => item.value);\n            }\n\n            if (newagent == null || newagent == undefined || !Array.isArray(newagent) || newagent.length === 0) {\n                newagent = defaultOptions.defaultagent.map((item) => item.value);\n            } else {\n                newagent = newagent.map((item) => item.value);\n            }\n\n            const token = localStorage.getItem('token');\n            const loginuser = JSON.parse(localStorage.getItem('user'));\n            const loginusertype = loginuser.usertype;\n\n            const requestOptions = {\n                method: 'POST',\n                body: JSON.stringify({\n                    // page: page,\n                    // limit: perPage,\n                    location: newlocation,\n                    lob: newlob,\n                    business_type: newbusinessType,\n                    newagent: newagent,\n                    dateRange: dateRange,\n                    startdate: startdate,\n                    enddate: enddate\n                }),\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                },\n            };\n\n            await fetch(`https://insuranceapi-3o5t.onrender.com/api/businessEntityLinks?page=${page}&limit=${perPage}`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    console.log('data>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', data)\n                    const total = data.count;\n                    console.log('total>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', total)\n                    const slice = total / perPage;\n                    const pages = Math.ceil(slice);\n                    setPageCount(pages);\n                    const list = data.data;\n                    setNewleadData(list);\n                    setLoading(false);\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }\n        catch (error) {\n            console.log(error)\n        }\n    }\n\n    console.log('newleaddata>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', newleaddata)\n\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        setPage(selectedPage + 1);\n        getlist(selectedPage + 1, perPage, localStorage.getItem('lob'));\n    };\n\n    const startFrom = (page - 1) * perPage;\n\n\n    const user = localStorage.getItem('user');\n    const userid = JSON.parse(user)._id;\n\n    console.log('userid>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', userid)\n\n\n    const generateLink = () => {\n        const baseUrl = `https://insuranceapi-3o5t.onrender.com?${userid}`;\n        const generatedUrl = baseUrl;\n        setUrl(generatedUrl);\n    };\n\n    // const generateUserLink = () => {\n    //     const baseUrl = `https://lmpfrontend.handsintechnology.in/${token}&user=BE`;\n    //     const generatedUrl = baseUrl;\n    //     setUserurl(generatedUrl);\n    // };\n\n    const whatsapp = async () => {\n\n        try {\n            if (url == '') {\n                alert('Please generate link first')\n            }\n            else if (whatsappnumber == '') {\n                alert('Please enter whatsapp number')\n            }\n            else {\n                const whatsappLink = `https://wa.me/${whatsappnumber}`;\n                window.open(whatsappLink);\n\n                await fetch('https://insuranceapi-3o5t.onrender.com/api/businessEntityLink', {\n                    method: 'post',\n                    body: JSON.stringify({\n                        number: whatsappnumber,\n                        link: url\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + token\n                    },\n                })\n                    .then(response => response.json())\n                    .then(data => {\n                        console.log(data)\n                    })\n            }\n        }\n        catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    const handleEmailsend = async () => {\n\n        console.log(url)\n        if (email == '') {\n            alert('Please enter email')\n        }\n        else if (!email.includes('@') || !email.includes('.')) {\n            alert('Please enter valid email')\n        }\n        else if (url == '') {\n            alert('Please generate link first')\n        }\n        else {\n\n            try {\n                const mailtoLink = `mailto:${email}`;\n                window.open(mailtoLink);\n\n                await fetch('https://insuranceapi-3o5t.onrender.com/api/businessEntityLink', {\n                    method: 'post',\n                    body: JSON.stringify({\n                        email: email,\n                        link: url\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + token\n                    },\n                })\n                    .then(response => response.json())\n                    .then(data => {\n                        console.log(data)\n                    })\n            }\n            catch (error) {\n                console.log(error)\n            }\n        }\n\n    }\n\n    const handlemodal = () => {\n        setShowModal(true);\n    }\n\n    const lobList = () => {\n        const userdata = JSON.parse(localStorage.getItem('user'));\n        const lob = userdata.line_of_business;\n        if (lob.length > 0) {\n            const lobdt = lob;\n            const lob_len = lobdt.length;\n            const lob_list = [];\n            for (let i = 0; i < lob_len; i++) {\n                const lob_obj = { label: lobdt[i].lob_name, value: lobdt[i].lob_id };\n                lob_list.push(lob_obj);\n            }\n            setLob(lob_list);\n        }\n        else {\n            const requestOptions =\n            {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/get_line_of_business_list`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    const lobdt = data.data;\n                    const lob_len = lobdt.length;\n                    const lob_list = [];\n                    for (let i = 0; i < lob_len; i++) {\n                        const lob_obj = { label: lobdt[i].line_of_business_name, value: lobdt[i]._id };\n                        lob_list.push(lob_obj);\n                    }\n                    setLob(lob_list);\n                });\n        }\n    }\n\n\n\n\n    const [formData, setFormData] = useState({\n        phonenumber: '',\n        email: '',\n    });\n    const [selectedlob, setSelectedLob] = useState([]);\n    const [selectedagent, setSelectedAgent] = useState('');\n\n\n    const handleLocationSelect = (selectedList) => {\n        console.log(selectedList)\n        setSelectedLob(selectedList);\n    };\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData({\n            ...formData,\n            [name]: value,\n        });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        try {\n            if (formData.selectedlob == []) {\n                alert('Please select location')\n            }\n            else if (formData.phonenumber == '') {\n                alert('Please enter phone number')\n            }\n            else if (formData.email == '') {\n                alert('Please enter email')\n            } else if (formData.name == '') {\n                alert('Please enter name')\n            }\n            else if (!formData.email.includes('@') || !formData.email.includes('.')) {\n                alert('Please enter valid email')\n            }\n            else if (selectedagent == '' && loginusertype == '64622470b201a6f07b2dff22') {\n                alert('Agent Required')\n            }\n            else {\n\n                if (loginusertype == '66068569e8f96a29286c956e') {\n                    const requestOptions = {\n                        method: 'POST',\n                        body: JSON.stringify({\n                            lob: selectedlob.map((item) => item.value),\n                            phoneno: formData?.phonenumber,\n                            email: formData?.email,\n                            name: formData?.name,\n                            // producerId: selectedagent\n                        }),\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': 'Bearer ' + token\n                        },\n                    };\n\n                    fetch(`https://insuranceapi-3o5t.onrender.com/api/createProducerLeads`, requestOptions)\n                        .then(response => response.json())\n                        .then(data => {\n                            console.log(data.data)\n                            alert('Link Generated Successfully')\n\n                            setFormData({\n                                phonenumber: '',\n                                email: '',\n                            });\n                            setSelectedLob([]);\n                            setUrl(data.data);\n                            setShowModal(false);\n                            navigate('/ProducerDashboard')\n                        });\n                }\n\n                if (loginusertype == '64622470b201a6f07b2dff22') {\n\n                    const requestOptions = {\n                        method: 'POST',\n                        body: JSON.stringify({\n                            lob: selectedlob.map((item) => item.value),\n                            phoneno: formData?.phonenumber,\n                            email: formData?.email,\n                            name: formData?.name,\n                            producerId: selectedagent\n                        }),\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': 'Bearer ' + token\n                        },\n                    };\n\n                    fetch(`https://insuranceapi-3o5t.onrender.com/api/createProducerLeads`, requestOptions)\n                        .then(response => response.json())\n                        .then(data => {\n                            console.log(data.data)\n                            alert('Link Generated Successfully')\n\n                            setFormData({\n                                phonenumber: '',\n                                email: '',\n                            });\n                            setSelectedLob([]);\n                            setUrl(data.data);\n                            setShowModal(false);\n                            navigate('/ProducerDashboard')\n                        });\n                }\n\n\n            }\n        }\n        catch (error) {\n            console.log(error)\n        }\n    };\n\n\n    const loginuser = JSON.parse(localStorage.getItem('user'));\n    const loginusertype = loginuser.usertype;\n\n    const [agent, setAgent] = useState([]);\n    const getsalists = async () => {\n        try {\n            const requestOptions =\n            {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + localStorage.getItem('token'),\n                },\n            };\n\n            fetch(`https://insuranceapi-3o5t.onrender.com/api/getUserAccordingUserType?userType=producer`, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    console.log(\"adminagent>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\", data.data);\n                    const agentdt = data.data;\n                    const agent_len = agentdt?.length;\n                    const agent_list = [];\n                    for (let i = 0; i < agent_len; i++) {\n                        const agent_obj = { label: agentdt[i].name, value: agentdt[i]._id };\n                        agent_list.push(agent_obj);\n                    }\n                    setAgent(agent_list);\n                });\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    console.log('agent>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', agent)\n\n\n\n    return (\n        <>\n            <div className=\"row mb-5\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <h4 className=\"card-title\" style={{ marginBottom: '0px', fontSize: '15px' }}>Link Generator</h4>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body\">\n                            <div>\n                                <button className='generated_links' style={{ marginTop: '10px', marginLeft: '10px', marginBottom: '5px' }} onClick={handlemodal}>Generate Customer Link</button>\n\n                                {/* {url && (\n                                    <div className='links_generaed'>\n                                        <p>Generated Customer Link:</p>\n                                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                            {url}\n                                        </a>\n\n                                    </div>\n                                )} */}\n                            </div>\n                            <div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <Modal size='lg' show={showModal} onHide={() => setShowModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Create Link</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <form onSubmit={handleSubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\"><strong>Select line of business </strong></label>\n                                                    <Multiselect\n                                                        options={lob}\n                                                        displayValue=\"label\"\n                                                        onSelect={(selectedValue) => handleLocationSelect(selectedValue)}\n                                                        onRemove={(selectedValue) => handleLocationSelect(selectedValue)}\n                                                        placeholder=\"Select line of business\"\n                                                        selectedValues={selectedlob}\n                                                        showArrow={true}\n                                                    />\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\"><strong>Name</strong></label>\n                                                    <input\n                                                        type='text'\n                                                        className=\"form-control\"\n                                                        name='name'\n                                                        placeholder=\"Enter Name\"\n                                                        value={formData.name}\n                                                        onChange={handleChange}\n                                                        required\n                                                    />\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\"><strong>Phone Number</strong></label>\n                                                    <input\n                                                        type='number'\n                                                        className=\"form-control\"\n                                                        name='phonenumber'\n                                                        placeholder=\"Enter Phone Number\"\n                                                        value={formData.phonenumber}\n                                                        onChange={handleChange}\n                                                        required\n                                                    />\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <label className=\"form-label\"><strong>Email</strong></label>\n                                                    <input\n                                                        type='email'\n                                                        className=\"form-control\"\n                                                        name='email'\n                                                        placeholder=\"Enter Email Address\"\n                                                        value={formData.email}\n                                                        onChange={handleChange}\n                                                        required\n                                                    />\n                                                </div>\n                                                {loginusertype == '64622470b201a6f07b2dff22' && (\n                                                    <div className=\"col-md-6\">\n                                                        <label className=\"form-label\"><strong>Agent</strong></label>\n                                                        <select\n                                                            className='form-control'\n                                                            onChange={(e) => setSelectedAgent(e.target.value)}\n                                                        >\n                                                            <option value=''>Select Agent</option>\n                                                            {\n                                                                agent?.map((item, index) => (\n                                                                    <option key={index} value={item.value}>{item.label}</option>\n                                                                ))\n                                                            }\n                                                        </select>\n                                                        {/* <Multiselect\n                                                        options={agent}\n                                                        displayValue=\"label\"\n                                                        onSelect={(selectedValue) => setSelectedAgent(selectedValue)}\n                                                        onRemove={(selectedValue) => setSelectedAgent(selectedValue)}\n                                                        placeholder=\"Select Agent\"\n                                                        selectedValues={selectedagent}\n                                                        showArrow={true}\n                                                    /> */}\n                                                    </div>\n                                                )}\n\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <button type=\"submit\" className=\"btn btn-primary mt-2 submit_all\" style={{ float: \"right\" }}>Submit</button>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n\n\n\n        </>\n    )\n}\n\nexport default ProducerGenerateLink"],"names":["_ref","filterOptions","defaultOptions","updateSharedData","token","localStorage","getItem","url","setUrl","useState","userurl","setUserurl","copied","setCopied","whatsappnumber","setWhatsappnumber","email","setEmail","navigate","useNavigate","newleaddata","setNewleadData","leadstatus","setLeadStatus","leaddetails","setLeadDetails","line_of_business_name","setLineOfBusinessName","perPage","pageCount","setPageCount","page","setPage","showModal","setShowModal","id","setId","lead_status","set_Lead_Status","direct_payment","set_Direct_Payment","dclist","setDcList","assigndc","setAssignDc","loading","setLoading","lob","setLob","useEffect","undefined","getlist","getsalists","lobList","async","newlocation","location","newlob","newbusinessType","businessType","newagent","agent","dateRange","startdate","enddate","Array","isArray","length","map","item","value","defaultlocation","defaultlob","defaultbusinessType","defaultagent","requestOptions","JSON","parse","usertype","method","body","stringify","business_type","headers","fetch","then","response","json","data","console","log","total","count","slice","pages","Math","ceil","list","catch","error","user","userid","_id","line_of_business","lobdt","lob_len","lob_list","i","lob_obj","label","lob_name","lob_id","push","formData","setFormData","phonenumber","selectedlob","setSelectedLob","selectedagent","setSelectedAgent","handleLocationSelect","selectedList","handleChange","e","name","target","loginusertype","setAgent","agentdt","agent_len","agent_list","agent_obj","_jsxs","_Fragment","children","_jsx","className","style","marginBottom","fontSize","marginTop","marginLeft","onClick","handlemodal","Modal","size","show","onHide","Header","closeButton","Title","Body","onSubmit","preventDefault","alert","includes","phoneno","producerId","Multiselect","options","displayValue","onSelect","selectedValue","onRemove","placeholder","selectedValues","showArrow","type","onChange","required","index","float","Footer","Button","variant"],"sourceRoot":""}